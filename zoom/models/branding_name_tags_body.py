# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BrandingNameTagsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'text_color': 'str',
        'accent_color': 'str',
        'background_color': 'str',
        'is_default': 'bool',
        'set_default_for_all_panelists': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'text_color': 'text_color',
        'accent_color': 'accent_color',
        'background_color': 'background_color',
        'is_default': 'is_default',
        'set_default_for_all_panelists': 'set_default_for_all_panelists'
    }

    def __init__(self, name=None, text_color=None, accent_color=None, background_color=None, is_default=False, set_default_for_all_panelists=True):  # noqa: E501
        """BrandingNameTagsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._text_color = None
        self._accent_color = None
        self._background_color = None
        self._is_default = None
        self._set_default_for_all_panelists = None
        self.discriminator = None
        self.name = name
        self.text_color = text_color
        self.accent_color = accent_color
        self.background_color = background_color
        if is_default is not None:
            self.is_default = is_default
        if set_default_for_all_panelists is not None:
            self.set_default_for_all_panelists = set_default_for_all_panelists

    @property
    def name(self):
        """Gets the name of this BrandingNameTagsBody.  # noqa: E501

        The name tag's name.  **Note:** This value cannot exceed more than 50 characters.  # noqa: E501

        :return: The name of this BrandingNameTagsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandingNameTagsBody.

        The name tag's name.  **Note:** This value cannot exceed more than 50 characters.  # noqa: E501

        :param name: The name of this BrandingNameTagsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def text_color(self):
        """Gets the text_color of this BrandingNameTagsBody.  # noqa: E501

        The name tag's text color.  # noqa: E501

        :return: The text_color of this BrandingNameTagsBody.  # noqa: E501
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this BrandingNameTagsBody.

        The name tag's text color.  # noqa: E501

        :param text_color: The text_color of this BrandingNameTagsBody.  # noqa: E501
        :type: str
        """
        if text_color is None:
            raise ValueError("Invalid value for `text_color`, must not be `None`")  # noqa: E501

        self._text_color = text_color

    @property
    def accent_color(self):
        """Gets the accent_color of this BrandingNameTagsBody.  # noqa: E501

        The name tag's accent color.  # noqa: E501

        :return: The accent_color of this BrandingNameTagsBody.  # noqa: E501
        :rtype: str
        """
        return self._accent_color

    @accent_color.setter
    def accent_color(self, accent_color):
        """Sets the accent_color of this BrandingNameTagsBody.

        The name tag's accent color.  # noqa: E501

        :param accent_color: The accent_color of this BrandingNameTagsBody.  # noqa: E501
        :type: str
        """
        if accent_color is None:
            raise ValueError("Invalid value for `accent_color`, must not be `None`")  # noqa: E501

        self._accent_color = accent_color

    @property
    def background_color(self):
        """Gets the background_color of this BrandingNameTagsBody.  # noqa: E501

        The name tag's background color.  # noqa: E501

        :return: The background_color of this BrandingNameTagsBody.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this BrandingNameTagsBody.

        The name tag's background color.  # noqa: E501

        :param background_color: The background_color of this BrandingNameTagsBody.  # noqa: E501
        :type: str
        """
        if background_color is None:
            raise ValueError("Invalid value for `background_color`, must not be `None`")  # noqa: E501

        self._background_color = background_color

    @property
    def is_default(self):
        """Gets the is_default of this BrandingNameTagsBody.  # noqa: E501

        Whether set the name tag as the default name tag or not.  # noqa: E501

        :return: The is_default of this BrandingNameTagsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this BrandingNameTagsBody.

        Whether set the name tag as the default name tag or not.  # noqa: E501

        :param is_default: The is_default of this BrandingNameTagsBody.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def set_default_for_all_panelists(self):
        """Gets the set_default_for_all_panelists of this BrandingNameTagsBody.  # noqa: E501

        Whether to set the name tag as the new default for all panelists or not. This includes panelists not currently assigned a default name tag.  # noqa: E501

        :return: The set_default_for_all_panelists of this BrandingNameTagsBody.  # noqa: E501
        :rtype: bool
        """
        return self._set_default_for_all_panelists

    @set_default_for_all_panelists.setter
    def set_default_for_all_panelists(self, set_default_for_all_panelists):
        """Sets the set_default_for_all_panelists of this BrandingNameTagsBody.

        Whether to set the name tag as the new default for all panelists or not. This includes panelists not currently assigned a default name tag.  # noqa: E501

        :param set_default_for_all_panelists: The set_default_for_all_panelists of this BrandingNameTagsBody.  # noqa: E501
        :type: bool
        """

        self._set_default_for_all_panelists = set_default_for_all_panelists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandingNameTagsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandingNameTagsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
