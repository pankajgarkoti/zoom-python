# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002ChatSendDataToThirdPartyArchivingService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'type': 'str',
        'smtp_delivery_address': 'str',
        'user_name': 'str',
        'passcode': 'str',
        'authorized_channel_token': 'str'
    }

    attribute_map = {
        'enable': 'enable',
        'type': 'type',
        'smtp_delivery_address': 'smtp_delivery_address',
        'user_name': 'user_name',
        'passcode': 'passcode',
        'authorized_channel_token': 'authorized_channel_token'
    }

    def __init__(self, enable=None, type=None, smtp_delivery_address=None, user_name=None, passcode=None, authorized_channel_token=None):  # noqa: E501
        """InlineResponse2002ChatSendDataToThirdPartyArchivingService - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._type = None
        self._smtp_delivery_address = None
        self._user_name = None
        self._passcode = None
        self._authorized_channel_token = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if type is not None:
            self.type = type
        if smtp_delivery_address is not None:
            self.smtp_delivery_address = smtp_delivery_address
        if user_name is not None:
            self.user_name = user_name
        if passcode is not None:
            self.passcode = passcode
        if authorized_channel_token is not None:
            self.authorized_channel_token = authorized_channel_token

    @property
    def enable(self):
        """Gets the enable of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        Allow users to send data to third-party archiving service.  # noqa: E501

        :return: The enable of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        Allow users to send data to third-party archiving service.  # noqa: E501

        :param enable: The enable of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def type(self):
        """Gets the type of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        The type of global relay.  * `global_relay` - The participant cannot use chat. * `smarsh` - Host and co-hosts only.  # noqa: E501

        :return: The type of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        The type of global relay.  * `global_relay` - The participant cannot use chat. * `smarsh` - Host and co-hosts only.  # noqa: E501

        :param type: The type of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: str
        """
        allowed_values = ["global_relay", "smarsh"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def smtp_delivery_address(self):
        """Gets the smtp_delivery_address of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        SMTP delivery address. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :return: The smtp_delivery_address of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: str
        """
        return self._smtp_delivery_address

    @smtp_delivery_address.setter
    def smtp_delivery_address(self, smtp_delivery_address):
        """Sets the smtp_delivery_address of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        SMTP delivery address. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :param smtp_delivery_address: The smtp_delivery_address of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: str
        """

        self._smtp_delivery_address = smtp_delivery_address

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        User name. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :return: The user_name of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        User name. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :param user_name: The user_name of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def passcode(self):
        """Gets the passcode of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        passcode. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :return: The passcode of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: str
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        passcode. It is used when the field `type` value is `global_relay`.  # noqa: E501

        :param passcode: The passcode of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: str
        """

        self._passcode = passcode

    @property
    def authorized_channel_token(self):
        """Gets the authorized_channel_token of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501

        Authorized channel token. It is used when the field `type` value is `smarsh`.  # noqa: E501

        :return: The authorized_channel_token of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :rtype: str
        """
        return self._authorized_channel_token

    @authorized_channel_token.setter
    def authorized_channel_token(self, authorized_channel_token):
        """Sets the authorized_channel_token of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.

        Authorized channel token. It is used when the field `type` value is `smarsh`.  # noqa: E501

        :param authorized_channel_token: The authorized_channel_token of this InlineResponse2002ChatSendDataToThirdPartyArchivingService.  # noqa: E501
        :type: str
        """

        self._authorized_channel_token = authorized_channel_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002ChatSendDataToThirdPartyArchivingService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002ChatSendDataToThirdPartyArchivingService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
