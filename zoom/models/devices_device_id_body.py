# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DevicesDeviceIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'tag': 'str',
        'room_id': 'str',
        'device_type': 'int'
    }

    attribute_map = {
        'device_name': 'device_name',
        'tag': 'tag',
        'room_id': 'room_id',
        'device_type': 'device_type'
    }

    def __init__(self, device_name=None, tag=None, room_id=None, device_type=None):  # noqa: E501
        """DevicesDeviceIdBody - a model defined in Swagger"""  # noqa: E501
        self._device_name = None
        self._tag = None
        self._room_id = None
        self._device_type = None
        self.discriminator = None
        self.device_name = device_name
        if tag is not None:
            self.tag = tag
        if room_id is not None:
            self.room_id = room_id
        if device_type is not None:
            self.device_type = device_type

    @property
    def device_name(self):
        """Gets the device_name of this DevicesDeviceIdBody.  # noqa: E501

        The name of the device.  # noqa: E501

        :return: The device_name of this DevicesDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DevicesDeviceIdBody.

        The name of the device.  # noqa: E501

        :param device_name: The device_name of this DevicesDeviceIdBody.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def tag(self):
        """Gets the tag of this DevicesDeviceIdBody.  # noqa: E501

        The name of the tag.  # noqa: E501

        :return: The tag of this DevicesDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DevicesDeviceIdBody.

        The name of the tag.  # noqa: E501

        :param tag: The tag of this DevicesDeviceIdBody.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def room_id(self):
        """Gets the room_id of this DevicesDeviceIdBody.  # noqa: E501

        id of the Zoom Room.  # noqa: E501

        :return: The room_id of this DevicesDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this DevicesDeviceIdBody.

        id of the Zoom Room.  # noqa: E501

        :param room_id: The room_id of this DevicesDeviceIdBody.  # noqa: E501
        :type: str
        """

        self._room_id = room_id

    @property
    def device_type(self):
        """Gets the device_type of this DevicesDeviceIdBody.  # noqa: E501

        Device Type:    `0` - Zoom Rooms Computer.    `1` - Zoom Rooms Controller.    `2` - Zoom Rooms Scheduling Display.  # noqa: E501

        :return: The device_type of this DevicesDeviceIdBody.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DevicesDeviceIdBody.

        Device Type:    `0` - Zoom Rooms Computer.    `1` - Zoom Rooms Controller.    `2` - Zoom Rooms Scheduling Display.  # noqa: E501

        :param device_type: The device_type of this DevicesDeviceIdBody.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 3]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicesDeviceIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicesDeviceIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
