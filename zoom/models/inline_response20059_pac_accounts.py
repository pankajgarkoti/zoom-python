# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20059PacAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conference_id': 'int',
        'dedicated_dial_in_number': 'list[InlineResponse20059DedicatedDialInNumber]',
        'global_dial_in_numbers': 'list[InlineResponse20059GlobalDialInNumbers]',
        'listen_only_password': 'str',
        'participant_password': 'str'
    }

    attribute_map = {
        'conference_id': 'conference_id',
        'dedicated_dial_in_number': 'dedicated_dial_in_number',
        'global_dial_in_numbers': 'global_dial_in_numbers',
        'listen_only_password': 'listen_only_password',
        'participant_password': 'participant_password'
    }

    def __init__(self, conference_id=None, dedicated_dial_in_number=None, global_dial_in_numbers=None, listen_only_password=None, participant_password=None):  # noqa: E501
        """InlineResponse20059PacAccounts - a model defined in Swagger"""  # noqa: E501
        self._conference_id = None
        self._dedicated_dial_in_number = None
        self._global_dial_in_numbers = None
        self._listen_only_password = None
        self._participant_password = None
        self.discriminator = None
        if conference_id is not None:
            self.conference_id = conference_id
        if dedicated_dial_in_number is not None:
            self.dedicated_dial_in_number = dedicated_dial_in_number
        if global_dial_in_numbers is not None:
            self.global_dial_in_numbers = global_dial_in_numbers
        if listen_only_password is not None:
            self.listen_only_password = listen_only_password
        if participant_password is not None:
            self.participant_password = participant_password

    @property
    def conference_id(self):
        """Gets the conference_id of this InlineResponse20059PacAccounts.  # noqa: E501

        The conference ID.  # noqa: E501

        :return: The conference_id of this InlineResponse20059PacAccounts.  # noqa: E501
        :rtype: int
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this InlineResponse20059PacAccounts.

        The conference ID.  # noqa: E501

        :param conference_id: The conference_id of this InlineResponse20059PacAccounts.  # noqa: E501
        :type: int
        """

        self._conference_id = conference_id

    @property
    def dedicated_dial_in_number(self):
        """Gets the dedicated_dial_in_number of this InlineResponse20059PacAccounts.  # noqa: E501

        Information about the account's dedicated dial-in numbers.  # noqa: E501

        :return: The dedicated_dial_in_number of this InlineResponse20059PacAccounts.  # noqa: E501
        :rtype: list[InlineResponse20059DedicatedDialInNumber]
        """
        return self._dedicated_dial_in_number

    @dedicated_dial_in_number.setter
    def dedicated_dial_in_number(self, dedicated_dial_in_number):
        """Sets the dedicated_dial_in_number of this InlineResponse20059PacAccounts.

        Information about the account's dedicated dial-in numbers.  # noqa: E501

        :param dedicated_dial_in_number: The dedicated_dial_in_number of this InlineResponse20059PacAccounts.  # noqa: E501
        :type: list[InlineResponse20059DedicatedDialInNumber]
        """

        self._dedicated_dial_in_number = dedicated_dial_in_number

    @property
    def global_dial_in_numbers(self):
        """Gets the global_dial_in_numbers of this InlineResponse20059PacAccounts.  # noqa: E501

        Information about the account's global dial-in numbers.  # noqa: E501

        :return: The global_dial_in_numbers of this InlineResponse20059PacAccounts.  # noqa: E501
        :rtype: list[InlineResponse20059GlobalDialInNumbers]
        """
        return self._global_dial_in_numbers

    @global_dial_in_numbers.setter
    def global_dial_in_numbers(self, global_dial_in_numbers):
        """Sets the global_dial_in_numbers of this InlineResponse20059PacAccounts.

        Information about the account's global dial-in numbers.  # noqa: E501

        :param global_dial_in_numbers: The global_dial_in_numbers of this InlineResponse20059PacAccounts.  # noqa: E501
        :type: list[InlineResponse20059GlobalDialInNumbers]
        """

        self._global_dial_in_numbers = global_dial_in_numbers

    @property
    def listen_only_password(self):
        """Gets the listen_only_password of this InlineResponse20059PacAccounts.  # noqa: E501

        The listen-only password, up to six characters in length.  # noqa: E501

        :return: The listen_only_password of this InlineResponse20059PacAccounts.  # noqa: E501
        :rtype: str
        """
        return self._listen_only_password

    @listen_only_password.setter
    def listen_only_password(self, listen_only_password):
        """Sets the listen_only_password of this InlineResponse20059PacAccounts.

        The listen-only password, up to six characters in length.  # noqa: E501

        :param listen_only_password: The listen_only_password of this InlineResponse20059PacAccounts.  # noqa: E501
        :type: str
        """

        self._listen_only_password = listen_only_password

    @property
    def participant_password(self):
        """Gets the participant_password of this InlineResponse20059PacAccounts.  # noqa: E501

        The participant password, up to six characters in length.  # noqa: E501

        :return: The participant_password of this InlineResponse20059PacAccounts.  # noqa: E501
        :rtype: str
        """
        return self._participant_password

    @participant_password.setter
    def participant_password(self, participant_password):
        """Sets the participant_password of this InlineResponse20059PacAccounts.

        The participant password, up to six characters in length.  # noqa: E501

        :param participant_password: The participant_password of this InlineResponse20059PacAccounts.  # noqa: E501
        :type: str
        """

        self._participant_password = participant_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20059PacAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20059PacAccounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
