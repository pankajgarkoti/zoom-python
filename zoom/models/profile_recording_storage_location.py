# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileRecordingStorageLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_values': 'list[str]',
        'value': 'str'
    }

    attribute_map = {
        'allowed_values': 'allowed_values',
        'value': 'value'
    }

    def __init__(self, allowed_values=None, value=None):  # noqa: E501
        """ProfileRecordingStorageLocation - a model defined in Swagger"""  # noqa: E501
        self._allowed_values = None
        self._value = None
        self.discriminator = None
        if allowed_values is not None:
            self.allowed_values = allowed_values
        if value is not None:
            self.value = value

    @property
    def allowed_values(self):
        """Gets the allowed_values of this ProfileRecordingStorageLocation.  # noqa: E501

        Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.  Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for details.  # noqa: E501

        :return: The allowed_values of this ProfileRecordingStorageLocation.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this ProfileRecordingStorageLocation.

        Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.  Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for details.  # noqa: E501

        :param allowed_values: The allowed_values of this ProfileRecordingStorageLocation.  # noqa: E501
        :type: list[str]
        """

        self._allowed_values = allowed_values

    @property
    def value(self):
        """Gets the value of this ProfileRecordingStorageLocation.  # noqa: E501

        Abbreviated country code.  # noqa: E501

        :return: The value of this ProfileRecordingStorageLocation.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProfileRecordingStorageLocation.

        Abbreviated country code.  # noqa: E501

        :param value: The value of this ProfileRecordingStorageLocation.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileRecordingStorageLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileRecordingStorageLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
