# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200Recording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_user_access_recording': 'bool',
        'auto_delete_cmr': 'bool',
        'auto_recording': 'bool',
        'cloud_recording': 'bool',
        'cloud_recording_download': 'bool',
        'host_delete_cloud_recording': 'bool',
        'ip_address_access_control': 'bool',
        'local_recording': 'bool',
        'prevent_host_access_recording': 'bool',
        'recording_authentication': 'bool',
        'archive': 'bool'
    }

    attribute_map = {
        'account_user_access_recording': 'account_user_access_recording',
        'auto_delete_cmr': 'auto_delete_cmr',
        'auto_recording': 'auto_recording',
        'cloud_recording': 'cloud_recording',
        'cloud_recording_download': 'cloud_recording_download',
        'host_delete_cloud_recording': 'host_delete_cloud_recording',
        'ip_address_access_control': 'ip_address_access_control',
        'local_recording': 'local_recording',
        'prevent_host_access_recording': 'prevent_host_access_recording',
        'recording_authentication': 'recording_authentication',
        'archive': 'archive'
    }

    def __init__(self, account_user_access_recording=None, auto_delete_cmr=None, auto_recording=None, cloud_recording=None, cloud_recording_download=None, host_delete_cloud_recording=None, ip_address_access_control=None, local_recording=None, prevent_host_access_recording=None, recording_authentication=None, archive=None):  # noqa: E501
        """InlineResponse200Recording - a model defined in Swagger"""  # noqa: E501
        self._account_user_access_recording = None
        self._auto_delete_cmr = None
        self._auto_recording = None
        self._cloud_recording = None
        self._cloud_recording_download = None
        self._host_delete_cloud_recording = None
        self._ip_address_access_control = None
        self._local_recording = None
        self._prevent_host_access_recording = None
        self._recording_authentication = None
        self._archive = None
        self.discriminator = None
        if account_user_access_recording is not None:
            self.account_user_access_recording = account_user_access_recording
        if auto_delete_cmr is not None:
            self.auto_delete_cmr = auto_delete_cmr
        if auto_recording is not None:
            self.auto_recording = auto_recording
        if cloud_recording is not None:
            self.cloud_recording = cloud_recording
        if cloud_recording_download is not None:
            self.cloud_recording_download = cloud_recording_download
        if host_delete_cloud_recording is not None:
            self.host_delete_cloud_recording = host_delete_cloud_recording
        if ip_address_access_control is not None:
            self.ip_address_access_control = ip_address_access_control
        if local_recording is not None:
            self.local_recording = local_recording
        if prevent_host_access_recording is not None:
            self.prevent_host_access_recording = prevent_host_access_recording
        if recording_authentication is not None:
            self.recording_authentication = recording_authentication
        if archive is not None:
            self.archive = archive

    @property
    def account_user_access_recording(self):
        """Gets the account_user_access_recording of this InlineResponse200Recording.  # noqa: E501

        Make cloud recordings accessible to account members only.  # noqa: E501

        :return: The account_user_access_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._account_user_access_recording

    @account_user_access_recording.setter
    def account_user_access_recording(self, account_user_access_recording):
        """Sets the account_user_access_recording of this InlineResponse200Recording.

        Make cloud recordings accessible to account members only.  # noqa: E501

        :param account_user_access_recording: The account_user_access_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._account_user_access_recording = account_user_access_recording

    @property
    def auto_delete_cmr(self):
        """Gets the auto_delete_cmr of this InlineResponse200Recording.  # noqa: E501

        Allow Zoom to automatically delete recordings permanently after a specified number of days.  # noqa: E501

        :return: The auto_delete_cmr of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete_cmr

    @auto_delete_cmr.setter
    def auto_delete_cmr(self, auto_delete_cmr):
        """Sets the auto_delete_cmr of this InlineResponse200Recording.

        Allow Zoom to automatically delete recordings permanently after a specified number of days.  # noqa: E501

        :param auto_delete_cmr: The auto_delete_cmr of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._auto_delete_cmr = auto_delete_cmr

    @property
    def auto_recording(self):
        """Gets the auto_recording of this InlineResponse200Recording.  # noqa: E501

        Record meetings automatically as they start.  # noqa: E501

        :return: The auto_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._auto_recording

    @auto_recording.setter
    def auto_recording(self, auto_recording):
        """Sets the auto_recording of this InlineResponse200Recording.

        Record meetings automatically as they start.  # noqa: E501

        :param auto_recording: The auto_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._auto_recording = auto_recording

    @property
    def cloud_recording(self):
        """Gets the cloud_recording of this InlineResponse200Recording.  # noqa: E501

        Allow hosts to record and save the meeting / webinar in the cloud.  # noqa: E501

        :return: The cloud_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording

    @cloud_recording.setter
    def cloud_recording(self, cloud_recording):
        """Sets the cloud_recording of this InlineResponse200Recording.

        Allow hosts to record and save the meeting / webinar in the cloud.  # noqa: E501

        :param cloud_recording: The cloud_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._cloud_recording = cloud_recording

    @property
    def cloud_recording_download(self):
        """Gets the cloud_recording_download of this InlineResponse200Recording.  # noqa: E501

        Allow anyone with a link to the cloud recording to download.  # noqa: E501

        :return: The cloud_recording_download of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording_download

    @cloud_recording_download.setter
    def cloud_recording_download(self, cloud_recording_download):
        """Sets the cloud_recording_download of this InlineResponse200Recording.

        Allow anyone with a link to the cloud recording to download.  # noqa: E501

        :param cloud_recording_download: The cloud_recording_download of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._cloud_recording_download = cloud_recording_download

    @property
    def host_delete_cloud_recording(self):
        """Gets the host_delete_cloud_recording of this InlineResponse200Recording.  # noqa: E501

        Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.  # noqa: E501

        :return: The host_delete_cloud_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._host_delete_cloud_recording

    @host_delete_cloud_recording.setter
    def host_delete_cloud_recording(self, host_delete_cloud_recording):
        """Sets the host_delete_cloud_recording of this InlineResponse200Recording.

        Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.  # noqa: E501

        :param host_delete_cloud_recording: The host_delete_cloud_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._host_delete_cloud_recording = host_delete_cloud_recording

    @property
    def ip_address_access_control(self):
        """Gets the ip_address_access_control of this InlineResponse200Recording.  # noqa: E501

        Setting to allow cloud recording access only from specific IP address ranges.   # noqa: E501

        :return: The ip_address_access_control of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._ip_address_access_control

    @ip_address_access_control.setter
    def ip_address_access_control(self, ip_address_access_control):
        """Sets the ip_address_access_control of this InlineResponse200Recording.

        Setting to allow cloud recording access only from specific IP address ranges.   # noqa: E501

        :param ip_address_access_control: The ip_address_access_control of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._ip_address_access_control = ip_address_access_control

    @property
    def local_recording(self):
        """Gets the local_recording of this InlineResponse200Recording.  # noqa: E501

        Allow hosts and participants to record the meeting to a local file.  # noqa: E501

        :return: The local_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._local_recording

    @local_recording.setter
    def local_recording(self, local_recording):
        """Sets the local_recording of this InlineResponse200Recording.

        Allow hosts and participants to record the meeting to a local file.  # noqa: E501

        :param local_recording: The local_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._local_recording = local_recording

    @property
    def prevent_host_access_recording(self):
        """Gets the prevent_host_access_recording of this InlineResponse200Recording.  # noqa: E501

        If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.    # noqa: E501

        :return: The prevent_host_access_recording of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_host_access_recording

    @prevent_host_access_recording.setter
    def prevent_host_access_recording(self, prevent_host_access_recording):
        """Sets the prevent_host_access_recording of this InlineResponse200Recording.

        If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.    # noqa: E501

        :param prevent_host_access_recording: The prevent_host_access_recording of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._prevent_host_access_recording = prevent_host_access_recording

    @property
    def recording_authentication(self):
        """Gets the recording_authentication of this InlineResponse200Recording.  # noqa: E501

        Only authenticated users can view cloud recordings  # noqa: E501

        :return: The recording_authentication of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._recording_authentication

    @recording_authentication.setter
    def recording_authentication(self, recording_authentication):
        """Sets the recording_authentication of this InlineResponse200Recording.

        Only authenticated users can view cloud recordings  # noqa: E501

        :param recording_authentication: The recording_authentication of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._recording_authentication = recording_authentication

    @property
    def archive(self):
        """Gets the archive of this InlineResponse200Recording.  # noqa: E501

        [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom support team.  # noqa: E501

        :return: The archive of this InlineResponse200Recording.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this InlineResponse200Recording.

        [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom support team.  # noqa: E501

        :param archive: The archive of this InlineResponse200Recording.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Recording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Recording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
