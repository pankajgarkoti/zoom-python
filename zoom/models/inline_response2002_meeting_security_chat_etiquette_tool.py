# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002MeetingSecurityChatEtiquetteTool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'policies': 'list[InlineResponse2002MeetingSecurityChatEtiquetteToolPolicies]',
        'policy_max_count': 'int'
    }

    attribute_map = {
        'enable': 'enable',
        'policies': 'policies',
        'policy_max_count': 'policy_max_count'
    }

    def __init__(self, enable=None, policies=None, policy_max_count=None):  # noqa: E501
        """InlineResponse2002MeetingSecurityChatEtiquetteTool - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._policies = None
        self._policy_max_count = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if policies is not None:
            self.policies = policies
        if policy_max_count is not None:
            self.policy_max_count = policy_max_count

    @property
    def enable(self):
        """Gets the enable of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501

        Whether to enable the **Chat Etiquette Tool**.  # noqa: E501

        :return: The enable of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse2002MeetingSecurityChatEtiquetteTool.

        Whether to enable the **Chat Etiquette Tool**.  # noqa: E501

        :param enable: The enable of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def policies(self):
        """Gets the policies of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501

        Information about the defined **Chat Etiquette Tool** policies.  # noqa: E501

        :return: The policies of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :rtype: list[InlineResponse2002MeetingSecurityChatEtiquetteToolPolicies]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this InlineResponse2002MeetingSecurityChatEtiquetteTool.

        Information about the defined **Chat Etiquette Tool** policies.  # noqa: E501

        :param policies: The policies of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :type: list[InlineResponse2002MeetingSecurityChatEtiquetteToolPolicies]
        """

        self._policies = policies

    @property
    def policy_max_count(self):
        """Gets the policy_max_count of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501

        The read-only maximum number of **Chat Etiquette Tool** policies.  # noqa: E501

        :return: The policy_max_count of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :rtype: int
        """
        return self._policy_max_count

    @policy_max_count.setter
    def policy_max_count(self, policy_max_count):
        """Sets the policy_max_count of this InlineResponse2002MeetingSecurityChatEtiquetteTool.

        The read-only maximum number of **Chat Etiquette Tool** policies.  # noqa: E501

        :param policy_max_count: The policy_max_count of this InlineResponse2002MeetingSecurityChatEtiquetteTool.  # noqa: E501
        :type: int
        """

        self._policy_max_count = policy_max_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002MeetingSecurityChatEtiquetteTool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002MeetingSecurityChatEtiquetteTool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
