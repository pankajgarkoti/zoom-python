# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsRecordingSmartRecording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_recording_highlights': 'bool',
        'create_smart_chapters': 'bool',
        'create_next_steps': 'bool'
    }

    attribute_map = {
        'create_recording_highlights': 'create_recording_highlights',
        'create_smart_chapters': 'create_smart_chapters',
        'create_next_steps': 'create_next_steps'
    }

    def __init__(self, create_recording_highlights=None, create_smart_chapters=None, create_next_steps=None):  # noqa: E501
        """AccountsaccountIdsettingsRecordingSmartRecording - a model defined in Swagger"""  # noqa: E501
        self._create_recording_highlights = None
        self._create_smart_chapters = None
        self._create_next_steps = None
        self.discriminator = None
        if create_recording_highlights is not None:
            self.create_recording_highlights = create_recording_highlights
        if create_smart_chapters is not None:
            self.create_smart_chapters = create_smart_chapters
        if create_next_steps is not None:
            self.create_next_steps = create_next_steps

    @property
    def create_recording_highlights(self):
        """Gets the create_recording_highlights of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501

        By selecting this option, meeting details in the audio transcript will be highlighted. Hosts can modify highlighted sections and generate a video summary (highlighted sections may have a 3-second offset) based on these sections. The summary is for informational purposes only and may not be complete.  # noqa: E501

        :return: The create_recording_highlights of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :rtype: bool
        """
        return self._create_recording_highlights

    @create_recording_highlights.setter
    def create_recording_highlights(self, create_recording_highlights):
        """Sets the create_recording_highlights of this AccountsaccountIdsettingsRecordingSmartRecording.

        By selecting this option, meeting details in the audio transcript will be highlighted. Hosts can modify highlighted sections and generate a video summary (highlighted sections may have a 3-second offset) based on these sections. The summary is for informational purposes only and may not be complete.  # noqa: E501

        :param create_recording_highlights: The create_recording_highlights of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :type: bool
        """

        self._create_recording_highlights = create_recording_highlights

    @property
    def create_smart_chapters(self):
        """Gets the create_smart_chapters of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501

        By selecting this option, your recording will have chapters with overview. Hosts can edit the chapters.  # noqa: E501

        :return: The create_smart_chapters of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :rtype: bool
        """
        return self._create_smart_chapters

    @create_smart_chapters.setter
    def create_smart_chapters(self, create_smart_chapters):
        """Sets the create_smart_chapters of this AccountsaccountIdsettingsRecordingSmartRecording.

        By selecting this option, your recording will have chapters with overview. Hosts can edit the chapters.  # noqa: E501

        :param create_smart_chapters: The create_smart_chapters of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :type: bool
        """

        self._create_smart_chapters = create_smart_chapters

    @property
    def create_next_steps(self):
        """Gets the create_next_steps of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501

        By selecting this option, there will be a summary of actions to take after the recorded meeting.  # noqa: E501

        :return: The create_next_steps of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :rtype: bool
        """
        return self._create_next_steps

    @create_next_steps.setter
    def create_next_steps(self, create_next_steps):
        """Sets the create_next_steps of this AccountsaccountIdsettingsRecordingSmartRecording.

        By selecting this option, there will be a summary of actions to take after the recorded meeting.  # noqa: E501

        :param create_next_steps: The create_next_steps of this AccountsaccountIdsettingsRecordingSmartRecording.  # noqa: E501
        :type: bool
        """

        self._create_next_steps = create_next_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsRecordingSmartRecording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsRecordingSmartRecording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
