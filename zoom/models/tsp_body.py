# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TspBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dial_in_number_unrestricted': 'bool',
        'enable': 'bool',
        'master_account_setting_extended': 'bool',
        'modify_credential_forbidden': 'bool',
        'tsp_bridge': 'str',
        'tsp_enabled': 'bool',
        'tsp_provider': 'str'
    }

    attribute_map = {
        'dial_in_number_unrestricted': 'dial_in_number_unrestricted',
        'enable': 'enable',
        'master_account_setting_extended': 'master_account_setting_extended',
        'modify_credential_forbidden': 'modify_credential_forbidden',
        'tsp_bridge': 'tsp_bridge',
        'tsp_enabled': 'tsp_enabled',
        'tsp_provider': 'tsp_provider'
    }

    def __init__(self, dial_in_number_unrestricted=None, enable=None, master_account_setting_extended=None, modify_credential_forbidden=None, tsp_bridge=None, tsp_enabled=None, tsp_provider=None):  # noqa: E501
        """TspBody - a model defined in Swagger"""  # noqa: E501
        self._dial_in_number_unrestricted = None
        self._enable = None
        self._master_account_setting_extended = None
        self._modify_credential_forbidden = None
        self._tsp_bridge = None
        self._tsp_enabled = None
        self._tsp_provider = None
        self.discriminator = None
        if dial_in_number_unrestricted is not None:
            self.dial_in_number_unrestricted = dial_in_number_unrestricted
        if enable is not None:
            self.enable = enable
        if master_account_setting_extended is not None:
            self.master_account_setting_extended = master_account_setting_extended
        if modify_credential_forbidden is not None:
            self.modify_credential_forbidden = modify_credential_forbidden
        if tsp_bridge is not None:
            self.tsp_bridge = tsp_bridge
        if tsp_enabled is not None:
            self.tsp_enabled = tsp_enabled
        if tsp_provider is not None:
            self.tsp_provider = tsp_provider

    @property
    def dial_in_number_unrestricted(self):
        """Gets the dial_in_number_unrestricted of this TspBody.  # noqa: E501

        Control restriction on account users adding a TSP number outside of account's dial in numbers.  # noqa: E501

        :return: The dial_in_number_unrestricted of this TspBody.  # noqa: E501
        :rtype: bool
        """
        return self._dial_in_number_unrestricted

    @dial_in_number_unrestricted.setter
    def dial_in_number_unrestricted(self, dial_in_number_unrestricted):
        """Sets the dial_in_number_unrestricted of this TspBody.

        Control restriction on account users adding a TSP number outside of account's dial in numbers.  # noqa: E501

        :param dial_in_number_unrestricted: The dial_in_number_unrestricted of this TspBody.  # noqa: E501
        :type: bool
        """

        self._dial_in_number_unrestricted = dial_in_number_unrestricted

    @property
    def enable(self):
        """Gets the enable of this TspBody.  # noqa: E501

        Enable 3rd party audio conferencing for account users  # noqa: E501

        :return: The enable of this TspBody.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this TspBody.

        Enable 3rd party audio conferencing for account users  # noqa: E501

        :param enable: The enable of this TspBody.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def master_account_setting_extended(self):
        """Gets the master_account_setting_extended of this TspBody.  # noqa: E501

        For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.  # noqa: E501

        :return: The master_account_setting_extended of this TspBody.  # noqa: E501
        :rtype: bool
        """
        return self._master_account_setting_extended

    @master_account_setting_extended.setter
    def master_account_setting_extended(self, master_account_setting_extended):
        """Sets the master_account_setting_extended of this TspBody.

        For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.  # noqa: E501

        :param master_account_setting_extended: The master_account_setting_extended of this TspBody.  # noqa: E501
        :type: bool
        """

        self._master_account_setting_extended = master_account_setting_extended

    @property
    def modify_credential_forbidden(self):
        """Gets the modify_credential_forbidden of this TspBody.  # noqa: E501

        Control restriction on account users being able to modify their TSP credentials.  # noqa: E501

        :return: The modify_credential_forbidden of this TspBody.  # noqa: E501
        :rtype: bool
        """
        return self._modify_credential_forbidden

    @modify_credential_forbidden.setter
    def modify_credential_forbidden(self, modify_credential_forbidden):
        """Sets the modify_credential_forbidden of this TspBody.

        Control restriction on account users being able to modify their TSP credentials.  # noqa: E501

        :param modify_credential_forbidden: The modify_credential_forbidden of this TspBody.  # noqa: E501
        :type: bool
        """

        self._modify_credential_forbidden = modify_credential_forbidden

    @property
    def tsp_bridge(self):
        """Gets the tsp_bridge of this TspBody.  # noqa: E501

        Telephony bridge  # noqa: E501

        :return: The tsp_bridge of this TspBody.  # noqa: E501
        :rtype: str
        """
        return self._tsp_bridge

    @tsp_bridge.setter
    def tsp_bridge(self, tsp_bridge):
        """Sets the tsp_bridge of this TspBody.

        Telephony bridge  # noqa: E501

        :param tsp_bridge: The tsp_bridge of this TspBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["US_TSP_TB", "EU_TSP_TB"]  # noqa: E501
        if tsp_bridge not in allowed_values:
            raise ValueError(
                "Invalid value for `tsp_bridge` ({0}), must be one of {1}"  # noqa: E501
                .format(tsp_bridge, allowed_values)
            )

        self._tsp_bridge = tsp_bridge

    @property
    def tsp_enabled(self):
        """Gets the tsp_enabled of this TspBody.  # noqa: E501

        Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.  # noqa: E501

        :return: The tsp_enabled of this TspBody.  # noqa: E501
        :rtype: bool
        """
        return self._tsp_enabled

    @tsp_enabled.setter
    def tsp_enabled(self, tsp_enabled):
        """Sets the tsp_enabled of this TspBody.

        Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.  # noqa: E501

        :param tsp_enabled: The tsp_enabled of this TspBody.  # noqa: E501
        :type: bool
        """

        self._tsp_enabled = tsp_enabled

    @property
    def tsp_provider(self):
        """Gets the tsp_provider of this TspBody.  # noqa: E501

        3rd party audio conferencing provider  # noqa: E501

        :return: The tsp_provider of this TspBody.  # noqa: E501
        :rtype: str
        """
        return self._tsp_provider

    @tsp_provider.setter
    def tsp_provider(self, tsp_provider):
        """Sets the tsp_provider of this TspBody.

        3rd party audio conferencing provider  # noqa: E501

        :param tsp_provider: The tsp_provider of this TspBody.  # noqa: E501
        :type: str
        """

        self._tsp_provider = tsp_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TspBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TspBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
