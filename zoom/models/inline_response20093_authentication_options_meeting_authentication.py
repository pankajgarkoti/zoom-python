# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20093AuthenticationOptionsMeetingAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_authentication_exception': 'bool',
        'authentication_options': 'list[InlineResponse20093AuthenticationOptionsMeetingAuthenticationAuthenticationOptions]',
        'meeting_authentication': 'bool'
    }

    attribute_map = {
        'allow_authentication_exception': 'allow_authentication_exception',
        'authentication_options': 'authentication_options',
        'meeting_authentication': 'meeting_authentication'
    }

    def __init__(self, allow_authentication_exception=None, authentication_options=None, meeting_authentication=None):  # noqa: E501
        """InlineResponse20093AuthenticationOptionsMeetingAuthentication - a model defined in Swagger"""  # noqa: E501
        self._allow_authentication_exception = None
        self._authentication_options = None
        self._meeting_authentication = None
        self.discriminator = None
        if allow_authentication_exception is not None:
            self.allow_authentication_exception = allow_authentication_exception
        if authentication_options is not None:
            self.authentication_options = authentication_options
        if meeting_authentication is not None:
            self.meeting_authentication = meeting_authentication

    @property
    def allow_authentication_exception(self):
        """Gets the allow_authentication_exception of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501

        Whether the [**Allow authentication exception**](https://support.zoom.us/hc/en-us/articles/360037117472#h_01F13A9N1FQFNVESC9C21NRHXY) setting is enabled. This lets hosts invite users who can bypass authentication.  # noqa: E501

        :return: The allow_authentication_exception of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :rtype: bool
        """
        return self._allow_authentication_exception

    @allow_authentication_exception.setter
    def allow_authentication_exception(self, allow_authentication_exception):
        """Sets the allow_authentication_exception of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.

        Whether the [**Allow authentication exception**](https://support.zoom.us/hc/en-us/articles/360037117472#h_01F13A9N1FQFNVESC9C21NRHXY) setting is enabled. This lets hosts invite users who can bypass authentication.  # noqa: E501

        :param allow_authentication_exception: The allow_authentication_exception of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :type: bool
        """

        self._allow_authentication_exception = allow_authentication_exception

    @property
    def authentication_options(self):
        """Gets the authentication_options of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501

        The user's [**Meeting Authentication Options**](https://support.zoom.us/hc/en-us/articles/360060549492-Allowing-only-authenticated-users-in-meetings#h_01F51KGPWJNQBDMFSJ3ZJQ4AA2) settings.  # noqa: E501

        :return: The authentication_options of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :rtype: list[InlineResponse20093AuthenticationOptionsMeetingAuthenticationAuthenticationOptions]
        """
        return self._authentication_options

    @authentication_options.setter
    def authentication_options(self, authentication_options):
        """Sets the authentication_options of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.

        The user's [**Meeting Authentication Options**](https://support.zoom.us/hc/en-us/articles/360060549492-Allowing-only-authenticated-users-in-meetings#h_01F51KGPWJNQBDMFSJ3ZJQ4AA2) settings.  # noqa: E501

        :param authentication_options: The authentication_options of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :type: list[InlineResponse20093AuthenticationOptionsMeetingAuthenticationAuthenticationOptions]
        """

        self._authentication_options = authentication_options

    @property
    def meeting_authentication(self):
        """Gets the meeting_authentication of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501

        Whether only authenticated users can join meetings.  # noqa: E501

        :return: The meeting_authentication of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_authentication

    @meeting_authentication.setter
    def meeting_authentication(self, meeting_authentication):
        """Sets the meeting_authentication of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.

        Whether only authenticated users can join meetings.  # noqa: E501

        :param meeting_authentication: The meeting_authentication of this InlineResponse20093AuthenticationOptionsMeetingAuthentication.  # noqa: E501
        :type: bool
        """

        self._meeting_authentication = meeting_authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20093AuthenticationOptionsMeetingAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20093AuthenticationOptionsMeetingAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
