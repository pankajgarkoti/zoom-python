# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsregistrationQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'required': 'bool',
        'selected': 'bool'
    }

    attribute_map = {
        'field_name': 'field_name',
        'required': 'required',
        'selected': 'selected'
    }

    def __init__(self, field_name=None, required=None, selected=None):  # noqa: E501
        """AccountsaccountIdsettingsregistrationQuestions - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._required = None
        self._selected = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if required is not None:
            self.required = required
        if selected is not None:
            self.selected = selected

    @property
    def field_name(self):
        """Gets the field_name of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501

        Field name of the question.  # noqa: E501

        :return: The field_name of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this AccountsaccountIdsettingsregistrationQuestions.

        Field name of the question.  # noqa: E501

        :param field_name: The field_name of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :type: str
        """
        allowed_values = ["last_name", "address", "city", "country", "zip", "state", "phone", "industry", "org", "job_title", "purchasing_time_frame", "role_in_purchase_process", "no_of_employees", "comments"]  # noqa: E501
        if field_name not in allowed_values:
            raise ValueError(
                "Invalid value for `field_name` ({0}), must be one of {1}"  # noqa: E501
                .format(field_name, allowed_values)
            )

        self._field_name = field_name

    @property
    def required(self):
        """Gets the required of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501

        Decide whether this field are required.  # noqa: E501

        :return: The required of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AccountsaccountIdsettingsregistrationQuestions.

        Decide whether this field are required.  # noqa: E501

        :param required: The required of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def selected(self):
        """Gets the selected of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501

        Indicates whether or not the displayed fields are required to be filled out by registrants.  # noqa: E501

        :return: The selected of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this AccountsaccountIdsettingsregistrationQuestions.

        Indicates whether or not the displayed fields are required to be filled out by registrants.  # noqa: E501

        :param selected: The selected of this AccountsaccountIdsettingsregistrationQuestions.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsregistrationQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsregistrationQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
