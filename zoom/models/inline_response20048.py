# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20048(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expire_in': 'int',
        'token': 'str'
    }

    attribute_map = {
        'expire_in': 'expire_in',
        'token': 'token'
    }

    def __init__(self, expire_in=None, token=None):  # noqa: E501
        """InlineResponse20048 - a model defined in Swagger"""  # noqa: E501
        self._expire_in = None
        self._token = None
        self.discriminator = None
        if expire_in is not None:
            self.expire_in = expire_in
        if token is not None:
            self.token = token

    @property
    def expire_in(self):
        """Gets the expire_in of this InlineResponse20048.  # noqa: E501

        The number of seconds the join token is valid for before it expires. This value always returns `120`.  # noqa: E501

        :return: The expire_in of this InlineResponse20048.  # noqa: E501
        :rtype: int
        """
        return self._expire_in

    @expire_in.setter
    def expire_in(self, expire_in):
        """Sets the expire_in of this InlineResponse20048.

        The number of seconds the join token is valid for before it expires. This value always returns `120`.  # noqa: E501

        :param expire_in: The expire_in of this InlineResponse20048.  # noqa: E501
        :type: int
        """
        allowed_values = [120]  # noqa: E501
        if expire_in not in allowed_values:
            raise ValueError(
                "Invalid value for `expire_in` ({0}), must be one of {1}"  # noqa: E501
                .format(expire_in, allowed_values)
            )

        self._expire_in = expire_in

    @property
    def token(self):
        """Gets the token of this InlineResponse20048.  # noqa: E501

        The join token.  # noqa: E501

        :return: The token of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse20048.

        The join token.  # noqa: E501

        :param token: The token of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20048, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20048):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
