# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserIdMeetingsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agenda': 'str',
        'default_password': 'bool',
        'duration': 'int',
        'password': 'str',
        'pre_schedule': 'bool',
        'recurrence': 'UsersuserIdmeetingsRecurrence',
        'schedule_for': 'str',
        'settings': 'UsersuserIdmeetingsSettings',
        'start_time': 'datetime',
        'template_id': 'str',
        'timezone': 'str',
        'topic': 'str',
        'tracking_fields': 'list[UsersuserIdmeetingsTrackingFields]',
        'type': 'int'
    }

    attribute_map = {
        'agenda': 'agenda',
        'default_password': 'default_password',
        'duration': 'duration',
        'password': 'password',
        'pre_schedule': 'pre_schedule',
        'recurrence': 'recurrence',
        'schedule_for': 'schedule_for',
        'settings': 'settings',
        'start_time': 'start_time',
        'template_id': 'template_id',
        'timezone': 'timezone',
        'topic': 'topic',
        'tracking_fields': 'tracking_fields',
        'type': 'type'
    }

    def __init__(self, agenda=None, default_password=False, duration=None, password=None, pre_schedule=False, recurrence=None, schedule_for=None, settings=None, start_time=None, template_id=None, timezone=None, topic=None, tracking_fields=None, type=TypeEnum._2):  # noqa: E501
        """UserIdMeetingsBody - a model defined in Swagger"""  # noqa: E501
        self._agenda = None
        self._default_password = None
        self._duration = None
        self._password = None
        self._pre_schedule = None
        self._recurrence = None
        self._schedule_for = None
        self._settings = None
        self._start_time = None
        self._template_id = None
        self._timezone = None
        self._topic = None
        self._tracking_fields = None
        self._type = None
        self.discriminator = None
        if agenda is not None:
            self.agenda = agenda
        if default_password is not None:
            self.default_password = default_password
        if duration is not None:
            self.duration = duration
        if password is not None:
            self.password = password
        if pre_schedule is not None:
            self.pre_schedule = pre_schedule
        if recurrence is not None:
            self.recurrence = recurrence
        if schedule_for is not None:
            self.schedule_for = schedule_for
        if settings is not None:
            self.settings = settings
        if start_time is not None:
            self.start_time = start_time
        if template_id is not None:
            self.template_id = template_id
        if timezone is not None:
            self.timezone = timezone
        if topic is not None:
            self.topic = topic
        if tracking_fields is not None:
            self.tracking_fields = tracking_fields
        if type is not None:
            self.type = type

    @property
    def agenda(self):
        """Gets the agenda of this UserIdMeetingsBody.  # noqa: E501

        The meeting's agenda. This value has a maximum length of 2,000 characters.  # noqa: E501

        :return: The agenda of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda):
        """Sets the agenda of this UserIdMeetingsBody.

        The meeting's agenda. This value has a maximum length of 2,000 characters.  # noqa: E501

        :param agenda: The agenda of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._agenda = agenda

    @property
    def default_password(self):
        """Gets the default_password of this UserIdMeetingsBody.  # noqa: E501

        Whether to generate a default passcode using the user's settings. This value defaults to `false`.   If this value is `true` and the user has the PMI setting enabled with a passcode, then the user's meetings will use the PMI passcode. It will **not** use a default passcode.  # noqa: E501

        :return: The default_password of this UserIdMeetingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._default_password

    @default_password.setter
    def default_password(self, default_password):
        """Sets the default_password of this UserIdMeetingsBody.

        Whether to generate a default passcode using the user's settings. This value defaults to `false`.   If this value is `true` and the user has the PMI setting enabled with a passcode, then the user's meetings will use the PMI passcode. It will **not** use a default passcode.  # noqa: E501

        :param default_password: The default_password of this UserIdMeetingsBody.  # noqa: E501
        :type: bool
        """

        self._default_password = default_password

    @property
    def duration(self):
        """Gets the duration of this UserIdMeetingsBody.  # noqa: E501

        The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).  # noqa: E501

        :return: The duration of this UserIdMeetingsBody.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this UserIdMeetingsBody.

        The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).  # noqa: E501

        :param duration: The duration of this UserIdMeetingsBody.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def password(self):
        """Gets the password of this UserIdMeetingsBody.  # noqa: E501

        The passcode required to join the meeting. By default, a passcode can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters.  * If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements.  * If passcode requirements are enabled, use the [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API to get the requirements.  # noqa: E501

        :return: The password of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserIdMeetingsBody.

        The passcode required to join the meeting. By default, a passcode can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters.  * If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements.  * If passcode requirements are enabled, use the [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API to get the requirements.  # noqa: E501

        :param password: The password of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pre_schedule(self):
        """Gets the pre_schedule of this UserIdMeetingsBody.  # noqa: E501

        Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time).  * `true` - Create a prescheduled meeting.  * `false` - Create a regular meeting.  # noqa: E501

        :return: The pre_schedule of this UserIdMeetingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._pre_schedule

    @pre_schedule.setter
    def pre_schedule(self, pre_schedule):
        """Sets the pre_schedule of this UserIdMeetingsBody.

        Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time).  * `true` - Create a prescheduled meeting.  * `false` - Create a regular meeting.  # noqa: E501

        :param pre_schedule: The pre_schedule of this UserIdMeetingsBody.  # noqa: E501
        :type: bool
        """

        self._pre_schedule = pre_schedule

    @property
    def recurrence(self):
        """Gets the recurrence of this UserIdMeetingsBody.  # noqa: E501


        :return: The recurrence of this UserIdMeetingsBody.  # noqa: E501
        :rtype: UsersuserIdmeetingsRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this UserIdMeetingsBody.


        :param recurrence: The recurrence of this UserIdMeetingsBody.  # noqa: E501
        :type: UsersuserIdmeetingsRecurrence
        """

        self._recurrence = recurrence

    @property
    def schedule_for(self):
        """Gets the schedule_for of this UserIdMeetingsBody.  # noqa: E501

        The email address or user ID of the user to schedule a meeting for.  # noqa: E501

        :return: The schedule_for of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_for

    @schedule_for.setter
    def schedule_for(self, schedule_for):
        """Sets the schedule_for of this UserIdMeetingsBody.

        The email address or user ID of the user to schedule a meeting for.  # noqa: E501

        :param schedule_for: The schedule_for of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._schedule_for = schedule_for

    @property
    def settings(self):
        """Gets the settings of this UserIdMeetingsBody.  # noqa: E501


        :return: The settings of this UserIdMeetingsBody.  # noqa: E501
        :rtype: UsersuserIdmeetingsSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserIdMeetingsBody.


        :param settings: The settings of this UserIdMeetingsBody.  # noqa: E501
        :type: UsersuserIdmeetingsSettings
        """

        self._settings = settings

    @property
    def start_time(self):
        """Gets the start_time of this UserIdMeetingsBody.  # noqa: E501

        The meeting's start time. This field is only used for scheduled or recurring meetings with a fixed time. This supports local time and GMT formats.  * To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`.  * To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](/docs/api/rest/other-references/abbreviation-lists/#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.  # noqa: E501

        :return: The start_time of this UserIdMeetingsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UserIdMeetingsBody.

        The meeting's start time. This field is only used for scheduled or recurring meetings with a fixed time. This supports local time and GMT formats.  * To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`.  * To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](/docs/api/rest/other-references/abbreviation-lists/#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.  # noqa: E501

        :param start_time: The start_time of this UserIdMeetingsBody.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def template_id(self):
        """Gets the template_id of this UserIdMeetingsBody.  # noqa: E501

        The account admin meeting template ID used to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](/docs/api-reference/zoom-api/methods#operation/listMeetingTemplates) API.  * At this time, this field **only** accepts account admin meeting template IDs.  * To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).  # noqa: E501

        :return: The template_id of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this UserIdMeetingsBody.

        The account admin meeting template ID used to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](/docs/api-reference/zoom-api/methods#operation/listMeetingTemplates) API.  * At this time, this field **only** accepts account admin meeting template IDs.  * To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).  # noqa: E501

        :param template_id: The template_id of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def timezone(self):
        """Gets the timezone of this UserIdMeetingsBody.  # noqa: E501

        The timezone to assign to the `start_time` value. This field is only used for scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](/docs/api/rest/other-references/abbreviation-lists/#timezones).  # noqa: E501

        :return: The timezone of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserIdMeetingsBody.

        The timezone to assign to the `start_time` value. This field is only used for scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](/docs/api/rest/other-references/abbreviation-lists/#timezones).  # noqa: E501

        :param timezone: The timezone of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def topic(self):
        """Gets the topic of this UserIdMeetingsBody.  # noqa: E501

        The meeting's topic.  # noqa: E501

        :return: The topic of this UserIdMeetingsBody.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this UserIdMeetingsBody.

        The meeting's topic.  # noqa: E501

        :param topic: The topic of this UserIdMeetingsBody.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def tracking_fields(self):
        """Gets the tracking_fields of this UserIdMeetingsBody.  # noqa: E501

        Information about the meeting's tracking fields.  # noqa: E501

        :return: The tracking_fields of this UserIdMeetingsBody.  # noqa: E501
        :rtype: list[UsersuserIdmeetingsTrackingFields]
        """
        return self._tracking_fields

    @tracking_fields.setter
    def tracking_fields(self, tracking_fields):
        """Sets the tracking_fields of this UserIdMeetingsBody.

        Information about the meeting's tracking fields.  # noqa: E501

        :param tracking_fields: The tracking_fields of this UserIdMeetingsBody.  # noqa: E501
        :type: list[UsersuserIdmeetingsTrackingFields]
        """

        self._tracking_fields = tracking_fields

    @property
    def type(self):
        """Gets the type of this UserIdMeetingsBody.  # noqa: E501

        The type of meeting. * `1` - An instant meeting.  * `2` - A scheduled meeting.  * `3` - A recurring meeting with no fixed time.  * `8` - A recurring meeting with fixed time.  # noqa: E501

        :return: The type of this UserIdMeetingsBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserIdMeetingsBody.

        The type of meeting. * `1` - An instant meeting.  * `2` - A scheduled meeting.  * `3` - A recurring meeting with no fixed time.  * `8` - A recurring meeting with fixed time.  # noqa: E501

        :param type: The type of this UserIdMeetingsBody.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 8]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIdMeetingsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIdMeetingsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
