# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20030AudioCall(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_number': 'str',
        'call_type': 'str',
        'zoom_number': 'str'
    }

    attribute_map = {
        'call_number': 'call_number',
        'call_type': 'call_type',
        'zoom_number': 'zoom_number'
    }

    def __init__(self, call_number=None, call_type=None, zoom_number=None):  # noqa: E501
        """InlineResponse20030AudioCall - a model defined in Swagger"""  # noqa: E501
        self._call_number = None
        self._call_type = None
        self._zoom_number = None
        self.discriminator = None
        if call_number is not None:
            self.call_number = call_number
        if call_type is not None:
            self.call_type = call_type
        if zoom_number is not None:
            self.zoom_number = zoom_number

    @property
    def call_number(self):
        """Gets the call_number of this InlineResponse20030AudioCall.  # noqa: E501

        The caller's number.  # noqa: E501

        :return: The call_number of this InlineResponse20030AudioCall.  # noqa: E501
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """Sets the call_number of this InlineResponse20030AudioCall.

        The caller's number.  # noqa: E501

        :param call_number: The call_number of this InlineResponse20030AudioCall.  # noqa: E501
        :type: str
        """

        self._call_number = call_number

    @property
    def call_type(self):
        """Gets the call_type of this InlineResponse20030AudioCall.  # noqa: E501

        The call type.  # noqa: E501

        :return: The call_type of this InlineResponse20030AudioCall.  # noqa: E501
        :rtype: str
        """
        return self._call_type

    @call_type.setter
    def call_type(self, call_type):
        """Sets the call_type of this InlineResponse20030AudioCall.

        The call type.  # noqa: E501

        :param call_type: The call_type of this InlineResponse20030AudioCall.  # noqa: E501
        :type: str
        """
        allowed_values = ["call-in", "call-out"]  # noqa: E501
        if call_type not in allowed_values:
            raise ValueError(
                "Invalid value for `call_type` ({0}), must be one of {1}"  # noqa: E501
                .format(call_type, allowed_values)
            )

        self._call_type = call_type

    @property
    def zoom_number(self):
        """Gets the zoom_number of this InlineResponse20030AudioCall.  # noqa: E501

        The toll-free telephone number.  # noqa: E501

        :return: The zoom_number of this InlineResponse20030AudioCall.  # noqa: E501
        :rtype: str
        """
        return self._zoom_number

    @zoom_number.setter
    def zoom_number(self, zoom_number):
        """Sets the zoom_number of this InlineResponse20030AudioCall.

        The toll-free telephone number.  # noqa: E501

        :param zoom_number: The zoom_number of this InlineResponse20030AudioCall.  # noqa: E501
        :type: str
        """

        self._zoom_number = zoom_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20030AudioCall, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20030AudioCall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
