# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20051(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sip_dialing': 'str',
        'paid_crc_plan_participant': 'bool',
        'participant_identifier_code': 'str',
        'expire_in': 'int'
    }

    attribute_map = {
        'sip_dialing': 'sip_dialing',
        'paid_crc_plan_participant': 'paid_crc_plan_participant',
        'participant_identifier_code': 'participant_identifier_code',
        'expire_in': 'expire_in'
    }

    def __init__(self, sip_dialing=None, paid_crc_plan_participant=None, participant_identifier_code=None, expire_in=None):  # noqa: E501
        """InlineResponse20051 - a model defined in Swagger"""  # noqa: E501
        self._sip_dialing = None
        self._paid_crc_plan_participant = None
        self._participant_identifier_code = None
        self._expire_in = None
        self.discriminator = None
        if sip_dialing is not None:
            self.sip_dialing = sip_dialing
        if paid_crc_plan_participant is not None:
            self.paid_crc_plan_participant = paid_crc_plan_participant
        if participant_identifier_code is not None:
            self.participant_identifier_code = participant_identifier_code
        if expire_in is not None:
            self.expire_in = expire_in

    @property
    def sip_dialing(self):
        """Gets the sip_dialing of this InlineResponse20051.  # noqa: E501

        The meeting's encoded SIP URI.  # noqa: E501

        :return: The sip_dialing of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._sip_dialing

    @sip_dialing.setter
    def sip_dialing(self, sip_dialing):
        """Sets the sip_dialing of this InlineResponse20051.

        The meeting's encoded SIP URI.  # noqa: E501

        :param sip_dialing: The sip_dialing of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._sip_dialing = sip_dialing

    @property
    def paid_crc_plan_participant(self):
        """Gets the paid_crc_plan_participant of this InlineResponse20051.  # noqa: E501

        Whether the API caller has a CRC (Conference Room Connector) plan.  # noqa: E501

        :return: The paid_crc_plan_participant of this InlineResponse20051.  # noqa: E501
        :rtype: bool
        """
        return self._paid_crc_plan_participant

    @paid_crc_plan_participant.setter
    def paid_crc_plan_participant(self, paid_crc_plan_participant):
        """Sets the paid_crc_plan_participant of this InlineResponse20051.

        Whether the API caller has a CRC (Conference Room Connector) plan.  # noqa: E501

        :param paid_crc_plan_participant: The paid_crc_plan_participant of this InlineResponse20051.  # noqa: E501
        :type: bool
        """

        self._paid_crc_plan_participant = paid_crc_plan_participant

    @property
    def participant_identifier_code(self):
        """Gets the participant_identifier_code of this InlineResponse20051.  # noqa: E501

        This value identifies the meeting participant. It is automatically embedded in the SIP URI if the API caller has a CRC (Conference Room Connector) plan.  # noqa: E501

        :return: The participant_identifier_code of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._participant_identifier_code

    @participant_identifier_code.setter
    def participant_identifier_code(self, participant_identifier_code):
        """Sets the participant_identifier_code of this InlineResponse20051.

        This value identifies the meeting participant. It is automatically embedded in the SIP URI if the API caller has a CRC (Conference Room Connector) plan.  # noqa: E501

        :param participant_identifier_code: The participant_identifier_code of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._participant_identifier_code = participant_identifier_code

    @property
    def expire_in(self):
        """Gets the expire_in of this InlineResponse20051.  # noqa: E501

        The number of seconds the encoded SIP URI is valid before it expires.  # noqa: E501

        :return: The expire_in of this InlineResponse20051.  # noqa: E501
        :rtype: int
        """
        return self._expire_in

    @expire_in.setter
    def expire_in(self, expire_in):
        """Sets the expire_in of this InlineResponse20051.

        The number of seconds the encoded SIP URI is valid before it expires.  # noqa: E501

        :param expire_in: The expire_in of this InlineResponse20051.  # noqa: E501
        :type: int
        """

        self._expire_in = expire_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
