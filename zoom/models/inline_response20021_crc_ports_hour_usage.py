# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20021CrcPortsHourUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hour': 'str',
        'max_usage': 'int',
        'total_usage': 'int'
    }

    attribute_map = {
        'hour': 'hour',
        'max_usage': 'max_usage',
        'total_usage': 'total_usage'
    }

    def __init__(self, hour=None, max_usage=None, total_usage=None):  # noqa: E501
        """InlineResponse20021CrcPortsHourUsage - a model defined in Swagger"""  # noqa: E501
        self._hour = None
        self._max_usage = None
        self._total_usage = None
        self.discriminator = None
        if hour is not None:
            self.hour = hour
        if max_usage is not None:
            self.max_usage = max_usage
        if total_usage is not None:
            self.total_usage = total_usage

    @property
    def hour(self):
        """Gets the hour of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501

        Hour in the day, during which the CRC was used. For example if the CRC was used at 11 pm, the value of this field will be 23.  # noqa: E501

        :return: The hour of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :rtype: str
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this InlineResponse20021CrcPortsHourUsage.

        Hour in the day, during which the CRC was used. For example if the CRC was used at 11 pm, the value of this field will be 23.  # noqa: E501

        :param hour: The hour of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :type: str
        """

        self._hour = hour

    @property
    def max_usage(self):
        """Gets the max_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501

        The maximum number of concurrent ports that are being used in that hour.  # noqa: E501

        :return: The max_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :rtype: int
        """
        return self._max_usage

    @max_usage.setter
    def max_usage(self, max_usage):
        """Sets the max_usage of this InlineResponse20021CrcPortsHourUsage.

        The maximum number of concurrent ports that are being used in that hour.  # noqa: E501

        :param max_usage: The max_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :type: int
        """

        self._max_usage = max_usage

    @property
    def total_usage(self):
        """Gets the total_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501

        The total number of H.323/SIP connections in that hour.  # noqa: E501

        :return: The total_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :rtype: int
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this InlineResponse20021CrcPortsHourUsage.

        The total number of H.323/SIP connections in that hour.  # noqa: E501

        :param total_usage: The total_usage of this InlineResponse20021CrcPortsHourUsage.  # noqa: E501
        :type: int
        """

        self._total_usage = total_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021CrcPortsHourUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021CrcPortsHourUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
