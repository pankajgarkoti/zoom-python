# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20122(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_email': 'str',
        'host_id': 'str',
        'id': 'int',
        'registrants_confirmation_email': 'bool',
        'template_id': 'str',
        'uuid': 'str',
        'agenda': 'str',
        'created_at': 'datetime',
        'duration': 'int',
        'join_url': 'str',
        'occurrences': 'list[InlineResponse20122Occurrences]',
        'password': 'str',
        'recurrence': 'RecurrenceWebinar1',
        'settings': 'InlineResponse20122Settings',
        'start_time': 'datetime',
        'start_url': 'str',
        'timezone': 'str',
        'topic': 'str',
        'tracking_fields': 'list[InlineResponse20122TrackingFields]',
        'type': 'int',
        'is_simulive': 'bool',
        'record_file_id': 'str'
    }

    attribute_map = {
        'host_email': 'host_email',
        'host_id': 'host_id',
        'id': 'id',
        'registrants_confirmation_email': 'registrants_confirmation_email',
        'template_id': 'template_id',
        'uuid': 'uuid',
        'agenda': 'agenda',
        'created_at': 'created_at',
        'duration': 'duration',
        'join_url': 'join_url',
        'occurrences': 'occurrences',
        'password': 'password',
        'recurrence': 'recurrence',
        'settings': 'settings',
        'start_time': 'start_time',
        'start_url': 'start_url',
        'timezone': 'timezone',
        'topic': 'topic',
        'tracking_fields': 'tracking_fields',
        'type': 'type',
        'is_simulive': 'is_simulive',
        'record_file_id': 'record_file_id'
    }

    def __init__(self, host_email=None, host_id=None, id=None, registrants_confirmation_email=None, template_id=None, uuid=None, agenda=None, created_at=None, duration=None, join_url=None, occurrences=None, password=None, recurrence=None, settings=None, start_time=None, start_url=None, timezone=None, topic=None, tracking_fields=None, type=TypeEnum._5, is_simulive=None, record_file_id=None):  # noqa: E501
        """InlineResponse20122 - a model defined in Swagger"""  # noqa: E501
        self._host_email = None
        self._host_id = None
        self._id = None
        self._registrants_confirmation_email = None
        self._template_id = None
        self._uuid = None
        self._agenda = None
        self._created_at = None
        self._duration = None
        self._join_url = None
        self._occurrences = None
        self._password = None
        self._recurrence = None
        self._settings = None
        self._start_time = None
        self._start_url = None
        self._timezone = None
        self._topic = None
        self._tracking_fields = None
        self._type = None
        self._is_simulive = None
        self._record_file_id = None
        self.discriminator = None
        if host_email is not None:
            self.host_email = host_email
        if host_id is not None:
            self.host_id = host_id
        if id is not None:
            self.id = id
        if registrants_confirmation_email is not None:
            self.registrants_confirmation_email = registrants_confirmation_email
        if template_id is not None:
            self.template_id = template_id
        if uuid is not None:
            self.uuid = uuid
        if agenda is not None:
            self.agenda = agenda
        if created_at is not None:
            self.created_at = created_at
        if duration is not None:
            self.duration = duration
        if join_url is not None:
            self.join_url = join_url
        if occurrences is not None:
            self.occurrences = occurrences
        if password is not None:
            self.password = password
        if recurrence is not None:
            self.recurrence = recurrence
        if settings is not None:
            self.settings = settings
        if start_time is not None:
            self.start_time = start_time
        if start_url is not None:
            self.start_url = start_url
        if timezone is not None:
            self.timezone = timezone
        if topic is not None:
            self.topic = topic
        if tracking_fields is not None:
            self.tracking_fields = tracking_fields
        if type is not None:
            self.type = type
        if is_simulive is not None:
            self.is_simulive = is_simulive
        if record_file_id is not None:
            self.record_file_id = record_file_id

    @property
    def host_email(self):
        """Gets the host_email of this InlineResponse20122.  # noqa: E501

        Email address of the meeting host.  # noqa: E501

        :return: The host_email of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._host_email

    @host_email.setter
    def host_email(self, host_email):
        """Sets the host_email of this InlineResponse20122.

        Email address of the meeting host.  # noqa: E501

        :param host_email: The host_email of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._host_email = host_email

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse20122.  # noqa: E501

        ID of the user set as host of the webinar.  # noqa: E501

        :return: The host_id of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse20122.

        ID of the user set as host of the webinar.  # noqa: E501

        :param host_id: The host_id of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20122.  # noqa: E501

        Webinar ID in **long** format (represented as int64 data type in JSON), also known as the webinar number.  # noqa: E501

        :return: The id of this InlineResponse20122.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20122.

        Webinar ID in **long** format (represented as int64 data type in JSON), also known as the webinar number.  # noqa: E501

        :param id: The id of this InlineResponse20122.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def registrants_confirmation_email(self):
        """Gets the registrants_confirmation_email of this InlineResponse20122.  # noqa: E501

        Specify whether or not registrants of this webinar should receive confirmation emails.  # noqa: E501

        :return: The registrants_confirmation_email of this InlineResponse20122.  # noqa: E501
        :rtype: bool
        """
        return self._registrants_confirmation_email

    @registrants_confirmation_email.setter
    def registrants_confirmation_email(self, registrants_confirmation_email):
        """Sets the registrants_confirmation_email of this InlineResponse20122.

        Specify whether or not registrants of this webinar should receive confirmation emails.  # noqa: E501

        :param registrants_confirmation_email: The registrants_confirmation_email of this InlineResponse20122.  # noqa: E501
        :type: bool
        """

        self._registrants_confirmation_email = registrants_confirmation_email

    @property
    def template_id(self):
        """Gets the template_id of this InlineResponse20122.  # noqa: E501

        Unique identifier of the webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [**List webinar templates**](/docs/api-reference/zoom-api/methods#operation/listWebinarTemplates) API. You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.  # noqa: E501

        :return: The template_id of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this InlineResponse20122.

        Unique identifier of the webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [**List webinar templates**](/docs/api-reference/zoom-api/methods#operation/listWebinarTemplates) API. You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.  # noqa: E501

        :param template_id: The template_id of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20122.  # noqa: E501

        Unique identifier of a webinar. Each webinar instance will generate its own UUID (for example, after a webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of the UUID for the same webinar will be different from when it was scheduled.  # noqa: E501

        :return: The uuid of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20122.

        Unique identifier of a webinar. Each webinar instance will generate its own UUID (for example, after a webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of the UUID for the same webinar will be different from when it was scheduled.  # noqa: E501

        :param uuid: The uuid of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def agenda(self):
        """Gets the agenda of this InlineResponse20122.  # noqa: E501

        Webinar agenda.  # noqa: E501

        :return: The agenda of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda):
        """Sets the agenda of this InlineResponse20122.

        Webinar agenda.  # noqa: E501

        :param agenda: The agenda of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._agenda = agenda

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20122.  # noqa: E501

        Create time.  # noqa: E501

        :return: The created_at of this InlineResponse20122.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20122.

        Create time.  # noqa: E501

        :param created_at: The created_at of this InlineResponse20122.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20122.  # noqa: E501

        Webinar duration.  # noqa: E501

        :return: The duration of this InlineResponse20122.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20122.

        Webinar duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20122.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def join_url(self):
        """Gets the join_url of this InlineResponse20122.  # noqa: E501

        URL to join the webinar. Only share this URL with the users who should be invited to the Webinar.  # noqa: E501

        :return: The join_url of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this InlineResponse20122.

        URL to join the webinar. Only share this URL with the users who should be invited to the Webinar.  # noqa: E501

        :param join_url: The join_url of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._join_url = join_url

    @property
    def occurrences(self):
        """Gets the occurrences of this InlineResponse20122.  # noqa: E501

        Array of occurrence objects.  # noqa: E501

        :return: The occurrences of this InlineResponse20122.  # noqa: E501
        :rtype: list[InlineResponse20122Occurrences]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this InlineResponse20122.

        Array of occurrence objects.  # noqa: E501

        :param occurrences: The occurrences of this InlineResponse20122.  # noqa: E501
        :type: list[InlineResponse20122Occurrences]
        """

        self._occurrences = occurrences

    @property
    def password(self):
        """Gets the password of this InlineResponse20122.  # noqa: E501

        Webinar passcode.   If **Require a passcode when scheduling new meetings** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.          **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API.  # noqa: E501

        :return: The password of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InlineResponse20122.

        Webinar passcode.   If **Require a passcode when scheduling new meetings** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.          **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API.  # noqa: E501

        :param password: The password of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def recurrence(self):
        """Gets the recurrence of this InlineResponse20122.  # noqa: E501


        :return: The recurrence of this InlineResponse20122.  # noqa: E501
        :rtype: RecurrenceWebinar1
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this InlineResponse20122.


        :param recurrence: The recurrence of this InlineResponse20122.  # noqa: E501
        :type: RecurrenceWebinar1
        """

        self._recurrence = recurrence

    @property
    def settings(self):
        """Gets the settings of this InlineResponse20122.  # noqa: E501


        :return: The settings of this InlineResponse20122.  # noqa: E501
        :rtype: InlineResponse20122Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this InlineResponse20122.


        :param settings: The settings of this InlineResponse20122.  # noqa: E501
        :type: InlineResponse20122Settings
        """

        self._settings = settings

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20122.  # noqa: E501

        Webinar start time in GMT/UTC.  # noqa: E501

        :return: The start_time of this InlineResponse20122.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20122.

        Webinar start time in GMT/UTC.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20122.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def start_url(self):
        """Gets the start_url of this InlineResponse20122.  # noqa: E501

            &lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a Webinar is a URL using which a host or an alternative host can start the webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.   The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field listed in the response of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API is two hours for all regular users.    For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [**Create users**](/docs/api-reference/zoom-api/methods#operation/userCreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.   For security reasons, to retrieve the latest value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after expiry), you must call the [**Get a webinar**](/docs/api-reference/zoom-api/methods#operation/webinar) API and refer to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;              # noqa: E501

        :return: The start_url of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._start_url

    @start_url.setter
    def start_url(self, start_url):
        """Sets the start_url of this InlineResponse20122.

            &lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a Webinar is a URL using which a host or an alternative host can start the webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.   The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field listed in the response of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API is two hours for all regular users.    For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [**Create users**](/docs/api-reference/zoom-api/methods#operation/userCreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.   For security reasons, to retrieve the latest value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after expiry), you must call the [**Get a webinar**](/docs/api-reference/zoom-api/methods#operation/webinar) API and refer to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;              # noqa: E501

        :param start_url: The start_url of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._start_url = start_url

    @property
    def timezone(self):
        """Gets the timezone of this InlineResponse20122.  # noqa: E501

        Time zone to format start_time.  # noqa: E501

        :return: The timezone of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InlineResponse20122.

        Time zone to format start_time.  # noqa: E501

        :param timezone: The timezone of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def topic(self):
        """Gets the topic of this InlineResponse20122.  # noqa: E501

        Webinar topic.  # noqa: E501

        :return: The topic of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this InlineResponse20122.

        Webinar topic.  # noqa: E501

        :param topic: The topic of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def tracking_fields(self):
        """Gets the tracking_fields of this InlineResponse20122.  # noqa: E501

        Tracking fields  # noqa: E501

        :return: The tracking_fields of this InlineResponse20122.  # noqa: E501
        :rtype: list[InlineResponse20122TrackingFields]
        """
        return self._tracking_fields

    @tracking_fields.setter
    def tracking_fields(self, tracking_fields):
        """Sets the tracking_fields of this InlineResponse20122.

        Tracking fields  # noqa: E501

        :param tracking_fields: The tracking_fields of this InlineResponse20122.  # noqa: E501
        :type: list[InlineResponse20122TrackingFields]
        """

        self._tracking_fields = tracking_fields

    @property
    def type(self):
        """Gets the type of this InlineResponse20122.  # noqa: E501

        Webinar Types:    `5` - Webinar.    `6` - Recurring webinar with no fixed time.    `9` - Recurring webinar with a fixed time.  # noqa: E501

        :return: The type of this InlineResponse20122.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20122.

        Webinar Types:    `5` - Webinar.    `6` - Recurring webinar with no fixed time.    `9` - Recurring webinar with a fixed time.  # noqa: E501

        :param type: The type of this InlineResponse20122.  # noqa: E501
        :type: int
        """
        allowed_values = [5, 6, 9]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_simulive(self):
        """Gets the is_simulive of this InlineResponse20122.  # noqa: E501

        Whether the webinar is `simulive`.  # noqa: E501

        :return: The is_simulive of this InlineResponse20122.  # noqa: E501
        :rtype: bool
        """
        return self._is_simulive

    @is_simulive.setter
    def is_simulive(self, is_simulive):
        """Sets the is_simulive of this InlineResponse20122.

        Whether the webinar is `simulive`.  # noqa: E501

        :param is_simulive: The is_simulive of this InlineResponse20122.  # noqa: E501
        :type: bool
        """

        self._is_simulive = is_simulive

    @property
    def record_file_id(self):
        """Gets the record_file_id of this InlineResponse20122.  # noqa: E501

        The previously recorded file's ID for `simulive`.  # noqa: E501

        :return: The record_file_id of this InlineResponse20122.  # noqa: E501
        :rtype: str
        """
        return self._record_file_id

    @record_file_id.setter
    def record_file_id(self, record_file_id):
        """Sets the record_file_id of this InlineResponse20122.

        The previously recorded file's ID for `simulive`.  # noqa: E501

        :param record_file_id: The record_file_id of this InlineResponse20122.  # noqa: E501
        :type: str
        """

        self._record_file_id = record_file_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20122, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20122):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
