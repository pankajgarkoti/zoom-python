# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSettingsMeetingSettings1WebinarLiveStreaming(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_service_instructions': 'str',
        'enable': 'bool',
        'live_streaming_reminder': 'bool',
        'live_streaming_service': 'list[str]'
    }

    attribute_map = {
        'custom_service_instructions': 'custom_service_instructions',
        'enable': 'enable',
        'live_streaming_reminder': 'live_streaming_reminder',
        'live_streaming_service': 'live_streaming_service'
    }

    def __init__(self, custom_service_instructions=None, enable=None, live_streaming_reminder=None, live_streaming_service=None):  # noqa: E501
        """UserSettingsMeetingSettings1WebinarLiveStreaming - a model defined in Swagger"""  # noqa: E501
        self._custom_service_instructions = None
        self._enable = None
        self._live_streaming_reminder = None
        self._live_streaming_service = None
        self.discriminator = None
        if custom_service_instructions is not None:
            self.custom_service_instructions = custom_service_instructions
        if enable is not None:
            self.enable = enable
        if live_streaming_reminder is not None:
            self.live_streaming_reminder = live_streaming_reminder
        if live_streaming_service is not None:
            self.live_streaming_service = live_streaming_service

    @property
    def custom_service_instructions(self):
        """Gets the custom_service_instructions of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501

        The specific instructions to allow your account's meeting hosts to configure a custom live stream.  # noqa: E501

        :return: The custom_service_instructions of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :rtype: str
        """
        return self._custom_service_instructions

    @custom_service_instructions.setter
    def custom_service_instructions(self, custom_service_instructions):
        """Sets the custom_service_instructions of this UserSettingsMeetingSettings1WebinarLiveStreaming.

        The specific instructions to allow your account's meeting hosts to configure a custom live stream.  # noqa: E501

        :param custom_service_instructions: The custom_service_instructions of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :type: str
        """

        self._custom_service_instructions = custom_service_instructions

    @property
    def enable(self):
        """Gets the enable of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501

        Whether webinar live streaming is enabled.  # noqa: E501

        :return: The enable of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this UserSettingsMeetingSettings1WebinarLiveStreaming.

        Whether webinar live streaming is enabled.  # noqa: E501

        :param enable: The enable of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def live_streaming_reminder(self):
        """Gets the live_streaming_reminder of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501

        Whether to notify users to watch the live stream. This does not apply to custom RTMP (real-time messaging protocol).  # noqa: E501

        :return: The live_streaming_reminder of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :rtype: bool
        """
        return self._live_streaming_reminder

    @live_streaming_reminder.setter
    def live_streaming_reminder(self, live_streaming_reminder):
        """Sets the live_streaming_reminder of this UserSettingsMeetingSettings1WebinarLiveStreaming.

        Whether to notify users to watch the live stream. This does not apply to custom RTMP (real-time messaging protocol).  # noqa: E501

        :param live_streaming_reminder: The live_streaming_reminder of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :type: bool
        """

        self._live_streaming_reminder = live_streaming_reminder

    @property
    def live_streaming_service(self):
        """Gets the live_streaming_service of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501

        The available live streaming services: * `facebook` * `workplace_by_facebook` * `youtube` * `custom_live_streaming_service`  # noqa: E501

        :return: The live_streaming_service of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :rtype: list[str]
        """
        return self._live_streaming_service

    @live_streaming_service.setter
    def live_streaming_service(self, live_streaming_service):
        """Sets the live_streaming_service of this UserSettingsMeetingSettings1WebinarLiveStreaming.

        The available live streaming services: * `facebook` * `workplace_by_facebook` * `youtube` * `custom_live_streaming_service`  # noqa: E501

        :param live_streaming_service: The live_streaming_service of this UserSettingsMeetingSettings1WebinarLiveStreaming.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["facebook", "workplace_by_facebook", "youtube", "custom_live_streaming_service"]  # noqa: E501
        if not set(live_streaming_service).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `live_streaming_service` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(live_streaming_service) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._live_streaming_service = live_streaming_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsMeetingSettings1WebinarLiveStreaming, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsMeetingSettings1WebinarLiveStreaming):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
