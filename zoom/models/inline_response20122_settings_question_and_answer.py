# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20122SettingsQuestionAndAnswer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_submit_questions': 'bool',
        'allow_anonymous_questions': 'bool',
        'answer_questions': 'str',
        'attendees_can_comment': 'bool',
        'attendees_can_upvote': 'bool',
        'allow_auto_reply': 'bool',
        'auto_reply_text': 'str',
        'enable': 'bool'
    }

    attribute_map = {
        'allow_submit_questions': 'allow_submit_questions',
        'allow_anonymous_questions': 'allow_anonymous_questions',
        'answer_questions': 'answer_questions',
        'attendees_can_comment': 'attendees_can_comment',
        'attendees_can_upvote': 'attendees_can_upvote',
        'allow_auto_reply': 'allow_auto_reply',
        'auto_reply_text': 'auto_reply_text',
        'enable': 'enable'
    }

    def __init__(self, allow_submit_questions=None, allow_anonymous_questions=None, answer_questions=None, attendees_can_comment=None, attendees_can_upvote=None, allow_auto_reply=None, auto_reply_text=None, enable=None):  # noqa: E501
        """InlineResponse20122SettingsQuestionAndAnswer - a model defined in Swagger"""  # noqa: E501
        self._allow_submit_questions = None
        self._allow_anonymous_questions = None
        self._answer_questions = None
        self._attendees_can_comment = None
        self._attendees_can_upvote = None
        self._allow_auto_reply = None
        self._auto_reply_text = None
        self._enable = None
        self.discriminator = None
        if allow_submit_questions is not None:
            self.allow_submit_questions = allow_submit_questions
        if allow_anonymous_questions is not None:
            self.allow_anonymous_questions = allow_anonymous_questions
        if answer_questions is not None:
            self.answer_questions = answer_questions
        if attendees_can_comment is not None:
            self.attendees_can_comment = attendees_can_comment
        if attendees_can_upvote is not None:
            self.attendees_can_upvote = attendees_can_upvote
        if allow_auto_reply is not None:
            self.allow_auto_reply = allow_auto_reply
        if auto_reply_text is not None:
            self.auto_reply_text = auto_reply_text
        if enable is not None:
            self.enable = enable

    @property
    def allow_submit_questions(self):
        """Gets the allow_submit_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        * `true`: Allow participants to submit questions.  * `false`: Do not allow submit questions.  # noqa: E501

        :return: The allow_submit_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._allow_submit_questions

    @allow_submit_questions.setter
    def allow_submit_questions(self, allow_submit_questions):
        """Sets the allow_submit_questions of this InlineResponse20122SettingsQuestionAndAnswer.

        * `true`: Allow participants to submit questions.  * `false`: Do not allow submit questions.  # noqa: E501

        :param allow_submit_questions: The allow_submit_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._allow_submit_questions = allow_submit_questions

    @property
    def allow_anonymous_questions(self):
        """Gets the allow_anonymous_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..  * `false`: Do not allow anonymous questions.  # noqa: E501

        :return: The allow_anonymous_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._allow_anonymous_questions

    @allow_anonymous_questions.setter
    def allow_anonymous_questions(self, allow_anonymous_questions):
        """Sets the allow_anonymous_questions of this InlineResponse20122SettingsQuestionAndAnswer.

        * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..  * `false`: Do not allow anonymous questions.  # noqa: E501

        :param allow_anonymous_questions: The allow_anonymous_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._allow_anonymous_questions = allow_anonymous_questions

    @property
    def answer_questions(self):
        """Gets the answer_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        Indicate whether you want attendees to be able to view answered questions only or view all questions.  * `only`: Attendees are able to view answered questions only.  *  `all`: Attendees are able to view all questions submitted in the Q&amp;A.  # noqa: E501

        :return: The answer_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: str
        """
        return self._answer_questions

    @answer_questions.setter
    def answer_questions(self, answer_questions):
        """Sets the answer_questions of this InlineResponse20122SettingsQuestionAndAnswer.

        Indicate whether you want attendees to be able to view answered questions only or view all questions.  * `only`: Attendees are able to view answered questions only.  *  `all`: Attendees are able to view all questions submitted in the Q&amp;A.  # noqa: E501

        :param answer_questions: The answer_questions of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: str
        """
        allowed_values = ["only", "all"]  # noqa: E501
        if answer_questions not in allowed_values:
            raise ValueError(
                "Invalid value for `answer_questions` ({0}), must be one of {1}"  # noqa: E501
                .format(answer_questions, allowed_values)
            )

        self._answer_questions = answer_questions

    @property
    def attendees_can_comment(self):
        """Gets the attendees_can_comment of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        * `true`: Attendees can answer questions or leave a comment in the question thread.  * `false`: Attendees can not answer questions or leave a comment in the question thread  # noqa: E501

        :return: The attendees_can_comment of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._attendees_can_comment

    @attendees_can_comment.setter
    def attendees_can_comment(self, attendees_can_comment):
        """Sets the attendees_can_comment of this InlineResponse20122SettingsQuestionAndAnswer.

        * `true`: Attendees can answer questions or leave a comment in the question thread.  * `false`: Attendees can not answer questions or leave a comment in the question thread  # noqa: E501

        :param attendees_can_comment: The attendees_can_comment of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._attendees_can_comment = attendees_can_comment

    @property
    def attendees_can_upvote(self):
        """Gets the attendees_can_upvote of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.  * `false`: Attendees can not click the thumbs up button on questions.  # noqa: E501

        :return: The attendees_can_upvote of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._attendees_can_upvote

    @attendees_can_upvote.setter
    def attendees_can_upvote(self, attendees_can_upvote):
        """Sets the attendees_can_upvote of this InlineResponse20122SettingsQuestionAndAnswer.

        * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.  * `false`: Attendees can not click the thumbs up button on questions.  # noqa: E501

        :param attendees_can_upvote: The attendees_can_upvote of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._attendees_can_upvote = attendees_can_upvote

    @property
    def allow_auto_reply(self):
        """Gets the allow_auto_reply of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        If simulive webinar,   * `true`: allow auto-reply to attendees.   * `false`: don't allow auto-reply to the attendees.  # noqa: E501

        :return: The allow_auto_reply of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_reply

    @allow_auto_reply.setter
    def allow_auto_reply(self, allow_auto_reply):
        """Sets the allow_auto_reply of this InlineResponse20122SettingsQuestionAndAnswer.

        If simulive webinar,   * `true`: allow auto-reply to attendees.   * `false`: don't allow auto-reply to the attendees.  # noqa: E501

        :param allow_auto_reply: The allow_auto_reply of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._allow_auto_reply = allow_auto_reply

    @property
    def auto_reply_text(self):
        """Gets the auto_reply_text of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        If `allow_auto_reply` = true, the text to be included in the automatic response.   # noqa: E501

        :return: The auto_reply_text of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: str
        """
        return self._auto_reply_text

    @auto_reply_text.setter
    def auto_reply_text(self, auto_reply_text):
        """Sets the auto_reply_text of this InlineResponse20122SettingsQuestionAndAnswer.

        If `allow_auto_reply` = true, the text to be included in the automatic response.   # noqa: E501

        :param auto_reply_text: The auto_reply_text of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: str
        """

        self._auto_reply_text = auto_reply_text

    @property
    def enable(self):
        """Gets the enable of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501

        * `true`: Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.  * `false`: Disable Q&amp;A for webinar.  # noqa: E501

        :return: The enable of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse20122SettingsQuestionAndAnswer.

        * `true`: Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.  * `false`: Disable Q&amp;A for webinar.  # noqa: E501

        :param enable: The enable of this InlineResponse20122SettingsQuestionAndAnswer.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20122SettingsQuestionAndAnswer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20122SettingsQuestionAndAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
