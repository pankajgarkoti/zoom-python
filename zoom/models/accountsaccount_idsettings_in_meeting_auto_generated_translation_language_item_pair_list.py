# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_lang_config': 'list[AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfig]',
        'all': 'bool'
    }

    attribute_map = {
        'trans_lang_config': 'trans_lang_config',
        'all': 'all'
    }

    def __init__(self, trans_lang_config=None, all=None):  # noqa: E501
        """AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList - a model defined in Swagger"""  # noqa: E501
        self._trans_lang_config = None
        self._all = None
        self.discriminator = None
        if trans_lang_config is not None:
            self.trans_lang_config = trans_lang_config
        if all is not None:
            self.all = all

    @property
    def trans_lang_config(self):
        """Gets the trans_lang_config of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501

        The speaking language and caption language list.  # noqa: E501

        :return: The trans_lang_config of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501
        :rtype: list[AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfig]
        """
        return self._trans_lang_config

    @trans_lang_config.setter
    def trans_lang_config(self, trans_lang_config):
        """Sets the trans_lang_config of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.

        The speaking language and caption language list.  # noqa: E501

        :param trans_lang_config: The trans_lang_config of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501
        :type: list[AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfig]
        """

        self._trans_lang_config = trans_lang_config

    @property
    def all(self):
        """Gets the all of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501

        The option to select all language pairs.  # noqa: E501

        :return: The all of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.

        The option to select all language pairs.  # noqa: E501

        :param all: The all of this AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList.  # noqa: E501
        :type: bool
        """

        self._all = all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsInMeetingAutoGeneratedTranslationLanguageItemPairList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
