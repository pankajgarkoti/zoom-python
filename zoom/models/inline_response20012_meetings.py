# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012Meetings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'duration': 'int',
        'host_id': 'str',
        'id': 'int',
        'recording_count': 'int',
        'start_time': 'datetime',
        'topic': 'str',
        'total_size': 'int',
        'type': 'str',
        'uuid': 'str',
        'recording_play_passcode': 'str',
        'recording_files': 'list[InlineResponse20012RecordingFiles]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'duration': 'duration',
        'host_id': 'host_id',
        'id': 'id',
        'recording_count': 'recording_count',
        'start_time': 'start_time',
        'topic': 'topic',
        'total_size': 'total_size',
        'type': 'type',
        'uuid': 'uuid',
        'recording_play_passcode': 'recording_play_passcode',
        'recording_files': 'recording_files'
    }

    def __init__(self, account_id=None, duration=None, host_id=None, id=None, recording_count=None, start_time=None, topic=None, total_size=None, type=None, uuid=None, recording_play_passcode=None, recording_files=None):  # noqa: E501
        """InlineResponse20012Meetings - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._duration = None
        self._host_id = None
        self._id = None
        self._recording_count = None
        self._start_time = None
        self._topic = None
        self._total_size = None
        self._type = None
        self._uuid = None
        self._recording_play_passcode = None
        self._recording_files = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if duration is not None:
            self.duration = duration
        if host_id is not None:
            self.host_id = host_id
        if id is not None:
            self.id = id
        if recording_count is not None:
            self.recording_count = recording_count
        if start_time is not None:
            self.start_time = start_time
        if topic is not None:
            self.topic = topic
        if total_size is not None:
            self.total_size = total_size
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if recording_play_passcode is not None:
            self.recording_play_passcode = recording_play_passcode
        if recording_files is not None:
            self.recording_files = recording_files

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20012Meetings.  # noqa: E501

        Unique Identifier of the user account.  # noqa: E501

        :return: The account_id of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20012Meetings.

        Unique Identifier of the user account.  # noqa: E501

        :param account_id: The account_id of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20012Meetings.  # noqa: E501

        Meeting duration.  # noqa: E501

        :return: The duration of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20012Meetings.

        Meeting duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20012Meetings.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse20012Meetings.  # noqa: E501

        ID of the user set as host of meeting.  # noqa: E501

        :return: The host_id of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse20012Meetings.

        ID of the user set as host of meeting.  # noqa: E501

        :param host_id: The host_id of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20012Meetings.  # noqa: E501

        Meeting ID - also known as the meeting number.  # noqa: E501

        :return: The id of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20012Meetings.

        Meeting ID - also known as the meeting number.  # noqa: E501

        :param id: The id of this InlineResponse20012Meetings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def recording_count(self):
        """Gets the recording_count of this InlineResponse20012Meetings.  # noqa: E501

        Number of recording files returned in the response of this API call. This includes the `recording_files` and  `participant_audio_files` files.  # noqa: E501

        :return: The recording_count of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: int
        """
        return self._recording_count

    @recording_count.setter
    def recording_count(self, recording_count):
        """Sets the recording_count of this InlineResponse20012Meetings.

        Number of recording files returned in the response of this API call. This includes the `recording_files` and  `participant_audio_files` files.  # noqa: E501

        :param recording_count: The recording_count of this InlineResponse20012Meetings.  # noqa: E501
        :type: int
        """

        self._recording_count = recording_count

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20012Meetings.  # noqa: E501

        The time when the meeting started.  # noqa: E501

        :return: The start_time of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20012Meetings.

        The time when the meeting started.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20012Meetings.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def topic(self):
        """Gets the topic of this InlineResponse20012Meetings.  # noqa: E501

        Meeting topic.  # noqa: E501

        :return: The topic of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this InlineResponse20012Meetings.

        Meeting topic.  # noqa: E501

        :param topic: The topic of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def total_size(self):
        """Gets the total_size of this InlineResponse20012Meetings.  # noqa: E501

        The total file size of the recording. This includes the `recording_files` and `participant_audio_files` files.  # noqa: E501

        :return: The total_size of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this InlineResponse20012Meetings.

        The total file size of the recording. This includes the `recording_files` and `participant_audio_files` files.  # noqa: E501

        :param total_size: The total_size of this InlineResponse20012Meetings.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def type(self):
        """Gets the type of this InlineResponse20012Meetings.  # noqa: E501

        The recording's associated type of meeting or webinar:   If the recording is of a meeting:  * `1` &mdash; Instant meeting.  * `2` &mdash; Scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A meeting created via PMI (Personal Meeting ID).  * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.   If the recording is of a webinar:  * `5` &mdash; A webinar.  * `6` &mdash; A recurring webinar without a fixed time  * `9` &mdash; A recurring webinar with a fixed time.  If the recording is **not** from a meeting or webinar:   * `99` &mdash; A recording uploaded via the [**Recordings**](https://zoom.us/recording) interface on the Zoom Web Portal.  # noqa: E501

        :return: The type of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20012Meetings.

        The recording's associated type of meeting or webinar:   If the recording is of a meeting:  * `1` &mdash; Instant meeting.  * `2` &mdash; Scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A meeting created via PMI (Personal Meeting ID).  * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.   If the recording is of a webinar:  * `5` &mdash; A webinar.  * `6` &mdash; A recurring webinar without a fixed time  * `9` &mdash; A recurring webinar with a fixed time.  If the recording is **not** from a meeting or webinar:   * `99` &mdash; A recording uploaded via the [**Recordings**](https://zoom.us/recording) interface on the Zoom Web Portal.  # noqa: E501

        :param type: The type of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "99"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20012Meetings.  # noqa: E501

        Unique Meeting Identifier. Each instance of the meeting will have its own UUID.  # noqa: E501

        :return: The uuid of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20012Meetings.

        Unique Meeting Identifier. Each instance of the meeting will have its own UUID.  # noqa: E501

        :param uuid: The uuid of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def recording_play_passcode(self):
        """Gets the recording_play_passcode of this InlineResponse20012Meetings.  # noqa: E501

        The cloud recording's passcode to be used in the URL. This recording's passcode can be directly spliced in `play_url` or `share_url` with `?pwd=` to access and play. For example, 'https://zoom.us/rec/share/**************?pwd=yNYIS408EJygs7rE5vVsJwXIz4-VW7MH'. If you want to use this field, please contact Zoom support.  # noqa: E501

        :return: The recording_play_passcode of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: str
        """
        return self._recording_play_passcode

    @recording_play_passcode.setter
    def recording_play_passcode(self, recording_play_passcode):
        """Sets the recording_play_passcode of this InlineResponse20012Meetings.

        The cloud recording's passcode to be used in the URL. This recording's passcode can be directly spliced in `play_url` or `share_url` with `?pwd=` to access and play. For example, 'https://zoom.us/rec/share/**************?pwd=yNYIS408EJygs7rE5vVsJwXIz4-VW7MH'. If you want to use this field, please contact Zoom support.  # noqa: E501

        :param recording_play_passcode: The recording_play_passcode of this InlineResponse20012Meetings.  # noqa: E501
        :type: str
        """

        self._recording_play_passcode = recording_play_passcode

    @property
    def recording_files(self):
        """Gets the recording_files of this InlineResponse20012Meetings.  # noqa: E501

        List of recording file.  # noqa: E501

        :return: The recording_files of this InlineResponse20012Meetings.  # noqa: E501
        :rtype: list[InlineResponse20012RecordingFiles]
        """
        return self._recording_files

    @recording_files.setter
    def recording_files(self, recording_files):
        """Sets the recording_files of this InlineResponse20012Meetings.

        List of recording file.  # noqa: E501

        :param recording_files: The recording_files of this InlineResponse20012Meetings.  # noqa: E501
        :type: list[InlineResponse20012RecordingFiles]
        """

        self._recording_files = recording_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012Meetings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Meetings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
