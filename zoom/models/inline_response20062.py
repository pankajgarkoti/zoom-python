# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20062(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'invoices': 'list[InlineResponse20062Invoices]'
    }

    attribute_map = {
        'currency': 'currency',
        'invoices': 'invoices'
    }

    def __init__(self, currency=None, invoices=None):  # noqa: E501
        """InlineResponse20062 - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._invoices = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if invoices is not None:
            self.invoices = invoices

    @property
    def currency(self):
        """Gets the currency of this InlineResponse20062.  # noqa: E501

        Currency of the billed amount in the invoice.  # noqa: E501

        :return: The currency of this InlineResponse20062.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse20062.

        Currency of the billed amount in the invoice.  # noqa: E501

        :param currency: The currency of this InlineResponse20062.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def invoices(self):
        """Gets the invoices of this InlineResponse20062.  # noqa: E501


        :return: The invoices of this InlineResponse20062.  # noqa: E501
        :rtype: list[InlineResponse20062Invoices]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this InlineResponse20062.


        :param invoices: The invoices of this InlineResponse20062.  # noqa: E501
        :type: list[InlineResponse20062Invoices]
        """

        self._invoices = invoices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20062, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20062):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
