# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParticipantQOS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device': 'str',
        'domain': 'str',
        'harddisk_id': 'str',
        'internal_ip_addresses': 'list[str]',
        'ip_address': 'str',
        'join_time': 'datetime',
        'leave_time': 'datetime',
        'location': 'str',
        'mac_addr': 'str',
        'pc_name': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'user_qos': 'list[ParticipantQOSUserQos]',
        'version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'domain': 'domain',
        'harddisk_id': 'harddisk_id',
        'internal_ip_addresses': 'internal_ip_addresses',
        'ip_address': 'ip_address',
        'join_time': 'join_time',
        'leave_time': 'leave_time',
        'location': 'location',
        'mac_addr': 'mac_addr',
        'pc_name': 'pc_name',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'user_qos': 'user_qos',
        'version': 'version'
    }

    def __init__(self, id=None, device=None, domain=None, harddisk_id=None, internal_ip_addresses=None, ip_address=None, join_time=None, leave_time=None, location=None, mac_addr=None, pc_name=None, user_id=None, user_name=None, user_qos=None, version=None):  # noqa: E501
        """ParticipantQOS - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._device = None
        self._domain = None
        self._harddisk_id = None
        self._internal_ip_addresses = None
        self._ip_address = None
        self._join_time = None
        self._leave_time = None
        self._location = None
        self._mac_addr = None
        self._pc_name = None
        self._user_id = None
        self._user_name = None
        self._user_qos = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if device is not None:
            self.device = device
        if domain is not None:
            self.domain = domain
        if harddisk_id is not None:
            self.harddisk_id = harddisk_id
        if internal_ip_addresses is not None:
            self.internal_ip_addresses = internal_ip_addresses
        if ip_address is not None:
            self.ip_address = ip_address
        if join_time is not None:
            self.join_time = join_time
        if leave_time is not None:
            self.leave_time = leave_time
        if location is not None:
            self.location = location
        if mac_addr is not None:
            self.mac_addr = mac_addr
        if pc_name is not None:
            self.pc_name = pc_name
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_qos is not None:
            self.user_qos = user_qos
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this ParticipantQOS.  # noqa: E501

        The participant's universally unique ID. This value is the same as the participant's user ID if the participant joins the webinar by logging into Zoom. If the participant joins the webinar without logging into Zoom, this returns an empty value.  # noqa: E501

        :return: The id of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParticipantQOS.

        The participant's universally unique ID. This value is the same as the participant's user ID if the participant joins the webinar by logging into Zoom. If the participant joins the webinar without logging into Zoom, this returns an empty value.  # noqa: E501

        :param id: The id of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this ParticipantQOS.  # noqa: E501

        The type of device the participant used to join the meeting.  * `Phone` - The participant joined via PSTN.  * `H.323/SIP` - The participant joined via an H.323 or SIP device.  * `Windows` - The participant joined via VoIP using a Windows device.  * `Mac` - The participant joined via VoIP using a Mac device.  * `iOS` - The participant joined via VoIP using an iOS device.  * `Android` - The participant joined via VoIP using an Android device.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The device of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ParticipantQOS.

        The type of device the participant used to join the meeting.  * `Phone` - The participant joined via PSTN.  * `H.323/SIP` - The participant joined via an H.323 or SIP device.  * `Windows` - The participant joined via VoIP using a Windows device.  * `Mac` - The participant joined via VoIP using a Mac device.  * `iOS` - The participant joined via VoIP using an iOS device.  * `Android` - The participant joined via VoIP using an Android device.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param device: The device of this ParticipantQOS.  # noqa: E501
        :type: str
        """
        allowed_values = ["Phone", "H.323/SIP", "Windows", "Mac", "iOS", "Android"]  # noqa: E501
        if device not in allowed_values:
            raise ValueError(
                "Invalid value for `device` ({0}), must be one of {1}"  # noqa: E501
                .format(device, allowed_values)
            )

        self._device = device

    @property
    def domain(self):
        """Gets the domain of this ParticipantQOS.  # noqa: E501

        The participant's PC domain.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The domain of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ParticipantQOS.

        The participant's PC domain.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param domain: The domain of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def harddisk_id(self):
        """Gets the harddisk_id of this ParticipantQOS.  # noqa: E501

        The participant's hard disk ID.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The harddisk_id of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._harddisk_id

    @harddisk_id.setter
    def harddisk_id(self, harddisk_id):
        """Sets the harddisk_id of this ParticipantQOS.

        The participant's hard disk ID.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param harddisk_id: The harddisk_id of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._harddisk_id = harddisk_id

    @property
    def internal_ip_addresses(self):
        """Gets the internal_ip_addresses of this ParticipantQOS.  # noqa: E501

        The participant's internal IP addresses. This field will not return under these conditions:  * The account calling this API is a **legacy** [business associate agreement (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&amp;n=se45.1.160_1103&amp;r=SECTION&amp;ty=HTML).  * The account calling this API is a BAA under HIPAA **without** a signed BAA data processing addendum.  # noqa: E501

        :return: The internal_ip_addresses of this ParticipantQOS.  # noqa: E501
        :rtype: list[str]
        """
        return self._internal_ip_addresses

    @internal_ip_addresses.setter
    def internal_ip_addresses(self, internal_ip_addresses):
        """Sets the internal_ip_addresses of this ParticipantQOS.

        The participant's internal IP addresses. This field will not return under these conditions:  * The account calling this API is a **legacy** [business associate agreement (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&amp;n=se45.1.160_1103&amp;r=SECTION&amp;ty=HTML).  * The account calling this API is a BAA under HIPAA **without** a signed BAA data processing addendum.  # noqa: E501

        :param internal_ip_addresses: The internal_ip_addresses of this ParticipantQOS.  # noqa: E501
        :type: list[str]
        """

        self._internal_ip_addresses = internal_ip_addresses

    @property
    def ip_address(self):
        """Gets the ip_address of this ParticipantQOS.  # noqa: E501

        The participant's IP address.  # noqa: E501

        :return: The ip_address of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ParticipantQOS.

        The participant's IP address.  # noqa: E501

        :param ip_address: The ip_address of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def join_time(self):
        """Gets the join_time of this ParticipantQOS.  # noqa: E501

        The time when the participant joined the meeting.  # noqa: E501

        :return: The join_time of this ParticipantQOS.  # noqa: E501
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this ParticipantQOS.

        The time when the participant joined the meeting.  # noqa: E501

        :param join_time: The join_time of this ParticipantQOS.  # noqa: E501
        :type: datetime
        """

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this ParticipantQOS.  # noqa: E501

        The time when the participant left the meeting.  # noqa: E501

        :return: The leave_time of this ParticipantQOS.  # noqa: E501
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this ParticipantQOS.

        The time when the participant left the meeting.  # noqa: E501

        :param leave_time: The leave_time of this ParticipantQOS.  # noqa: E501
        :type: datetime
        """

        self._leave_time = leave_time

    @property
    def location(self):
        """Gets the location of this ParticipantQOS.  # noqa: E501

        The participant's location.  # noqa: E501

        :return: The location of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ParticipantQOS.

        The participant's location.  # noqa: E501

        :param location: The location of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mac_addr(self):
        """Gets the mac_addr of this ParticipantQOS.  # noqa: E501

        The participant's MAC address.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The mac_addr of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._mac_addr

    @mac_addr.setter
    def mac_addr(self, mac_addr):
        """Sets the mac_addr of this ParticipantQOS.

        The participant's MAC address.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param mac_addr: The mac_addr of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._mac_addr = mac_addr

    @property
    def pc_name(self):
        """Gets the pc_name of this ParticipantQOS.  # noqa: E501

        The participant's PC name.  # noqa: E501

        :return: The pc_name of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._pc_name

    @pc_name.setter
    def pc_name(self, pc_name):
        """Sets the pc_name of this ParticipantQOS.

        The participant's PC name.  # noqa: E501

        :param pc_name: The pc_name of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._pc_name = pc_name

    @property
    def user_id(self):
        """Gets the user_id of this ParticipantQOS.  # noqa: E501

        The participant's ID. This value is assigned to a participant upon joining a meeting and is only valid for the meeting's duration.  # noqa: E501

        :return: The user_id of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ParticipantQOS.

        The participant's ID. This value is assigned to a participant upon joining a meeting and is only valid for the meeting's duration.  # noqa: E501

        :param user_id: The user_id of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this ParticipantQOS.  # noqa: E501

        The participant's display name.  # noqa: E501

        :return: The user_name of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ParticipantQOS.

        The participant's display name.  # noqa: E501

        :param user_name: The user_name of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_qos(self):
        """Gets the user_qos of this ParticipantQOS.  # noqa: E501

        The participant's quality of service information.  # noqa: E501

        :return: The user_qos of this ParticipantQOS.  # noqa: E501
        :rtype: list[ParticipantQOSUserQos]
        """
        return self._user_qos

    @user_qos.setter
    def user_qos(self, user_qos):
        """Sets the user_qos of this ParticipantQOS.

        The participant's quality of service information.  # noqa: E501

        :param user_qos: The user_qos of this ParticipantQOS.  # noqa: E501
        :type: list[ParticipantQOSUserQos]
        """

        self._user_qos = user_qos

    @property
    def version(self):
        """Gets the version of this ParticipantQOS.  # noqa: E501

        The participant's Zoom client version.  # noqa: E501

        :return: The version of this ParticipantQOS.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ParticipantQOS.

        The participant's Zoom client version.  # noqa: E501

        :param version: The version of this ParticipantQOS.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParticipantQOS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticipantQOS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
