# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20030Participants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_quality': 'str',
        'connection_type': 'str',
        'customer_key': 'str',
        'data_center': 'str',
        'device': 'str',
        'domain': 'str',
        'email': 'str',
        'from_sip_uri': 'str',
        'full_data_center': 'str',
        'harddisk_id': 'str',
        'id': 'str',
        'internal_ip_addresses': 'list[str]',
        'ip_address': 'str',
        'join_time': 'datetime',
        'leave_reason': 'str',
        'leave_time': 'datetime',
        'location': 'str',
        'mac_addr': 'str',
        'microphone': 'str',
        'network_type': 'str',
        'participant_user_id': 'str',
        'pc_name': 'str',
        'recording': 'bool',
        'registrant_id': 'str',
        'role': 'str',
        'screen_share_quality': 'str',
        'share_application': 'bool',
        'share_desktop': 'bool',
        'share_whiteboard': 'bool',
        'sip_uri': 'str',
        'speaker': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'version': 'str',
        'video_quality': 'str',
        'audio_call': 'list[InlineResponse20030AudioCall]'
    }

    attribute_map = {
        'audio_quality': 'audio_quality',
        'connection_type': 'connection_type',
        'customer_key': 'customer_key',
        'data_center': 'data_center',
        'device': 'device',
        'domain': 'domain',
        'email': 'email',
        'from_sip_uri': 'from_sip_uri',
        'full_data_center': 'full_data_center',
        'harddisk_id': 'harddisk_id',
        'id': 'id',
        'internal_ip_addresses': 'internal_ip_addresses',
        'ip_address': 'ip_address',
        'join_time': 'join_time',
        'leave_reason': 'leave_reason',
        'leave_time': 'leave_time',
        'location': 'location',
        'mac_addr': 'mac_addr',
        'microphone': 'microphone',
        'network_type': 'network_type',
        'participant_user_id': 'participant_user_id',
        'pc_name': 'pc_name',
        'recording': 'recording',
        'registrant_id': 'registrant_id',
        'role': 'role',
        'screen_share_quality': 'screen_share_quality',
        'share_application': 'share_application',
        'share_desktop': 'share_desktop',
        'share_whiteboard': 'share_whiteboard',
        'sip_uri': 'sip_uri',
        'speaker': 'speaker',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'version': 'version',
        'video_quality': 'video_quality',
        'audio_call': 'audio_call'
    }

    def __init__(self, audio_quality=None, connection_type=None, customer_key=None, data_center=None, device=None, domain=None, email=None, from_sip_uri=None, full_data_center=None, harddisk_id=None, id=None, internal_ip_addresses=None, ip_address=None, join_time=None, leave_reason=None, leave_time=None, location=None, mac_addr=None, microphone=None, network_type=None, participant_user_id=None, pc_name=None, recording=None, registrant_id=None, role=None, screen_share_quality=None, share_application=None, share_desktop=None, share_whiteboard=None, sip_uri=None, speaker=None, user_id=None, user_name=None, version=None, video_quality=None, audio_call=None):  # noqa: E501
        """InlineResponse20030Participants - a model defined in Swagger"""  # noqa: E501
        self._audio_quality = None
        self._connection_type = None
        self._customer_key = None
        self._data_center = None
        self._device = None
        self._domain = None
        self._email = None
        self._from_sip_uri = None
        self._full_data_center = None
        self._harddisk_id = None
        self._id = None
        self._internal_ip_addresses = None
        self._ip_address = None
        self._join_time = None
        self._leave_reason = None
        self._leave_time = None
        self._location = None
        self._mac_addr = None
        self._microphone = None
        self._network_type = None
        self._participant_user_id = None
        self._pc_name = None
        self._recording = None
        self._registrant_id = None
        self._role = None
        self._screen_share_quality = None
        self._share_application = None
        self._share_desktop = None
        self._share_whiteboard = None
        self._sip_uri = None
        self._speaker = None
        self._user_id = None
        self._user_name = None
        self._version = None
        self._video_quality = None
        self._audio_call = None
        self.discriminator = None
        if audio_quality is not None:
            self.audio_quality = audio_quality
        if connection_type is not None:
            self.connection_type = connection_type
        if customer_key is not None:
            self.customer_key = customer_key
        if data_center is not None:
            self.data_center = data_center
        if device is not None:
            self.device = device
        if domain is not None:
            self.domain = domain
        if email is not None:
            self.email = email
        if from_sip_uri is not None:
            self.from_sip_uri = from_sip_uri
        if full_data_center is not None:
            self.full_data_center = full_data_center
        if harddisk_id is not None:
            self.harddisk_id = harddisk_id
        if id is not None:
            self.id = id
        if internal_ip_addresses is not None:
            self.internal_ip_addresses = internal_ip_addresses
        if ip_address is not None:
            self.ip_address = ip_address
        if join_time is not None:
            self.join_time = join_time
        if leave_reason is not None:
            self.leave_reason = leave_reason
        if leave_time is not None:
            self.leave_time = leave_time
        if location is not None:
            self.location = location
        if mac_addr is not None:
            self.mac_addr = mac_addr
        if microphone is not None:
            self.microphone = microphone
        if network_type is not None:
            self.network_type = network_type
        if participant_user_id is not None:
            self.participant_user_id = participant_user_id
        if pc_name is not None:
            self.pc_name = pc_name
        if recording is not None:
            self.recording = recording
        if registrant_id is not None:
            self.registrant_id = registrant_id
        if role is not None:
            self.role = role
        if screen_share_quality is not None:
            self.screen_share_quality = screen_share_quality
        if share_application is not None:
            self.share_application = share_application
        if share_desktop is not None:
            self.share_desktop = share_desktop
        if share_whiteboard is not None:
            self.share_whiteboard = share_whiteboard
        if sip_uri is not None:
            self.sip_uri = sip_uri
        if speaker is not None:
            self.speaker = speaker
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if version is not None:
            self.version = version
        if video_quality is not None:
            self.video_quality = video_quality
        if audio_call is not None:
            self.audio_call = audio_call

    @property
    def audio_quality(self):
        """Gets the audio_quality of this InlineResponse20030Participants.  # noqa: E501

        The participant's [audio quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts).  * `good` - The audio is almost flawless and the quality is excellent.  * `fair` - The audio occasionally has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `poor` - The audio often has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `bad` - The sound quality is extremely poor and the audio content is almost inaudible.  # noqa: E501

        :return: The audio_quality of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._audio_quality

    @audio_quality.setter
    def audio_quality(self, audio_quality):
        """Sets the audio_quality of this InlineResponse20030Participants.

        The participant's [audio quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts).  * `good` - The audio is almost flawless and the quality is excellent.  * `fair` - The audio occasionally has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `poor` - The audio often has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `bad` - The sound quality is extremely poor and the audio content is almost inaudible.  # noqa: E501

        :param audio_quality: The audio_quality of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "good", "fair", "poor", "bad"]  # noqa: E501
        if audio_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_quality` ({0}), must be one of {1}"  # noqa: E501
                .format(audio_quality, allowed_values)
            )

        self._audio_quality = audio_quality

    @property
    def connection_type(self):
        """Gets the connection_type of this InlineResponse20030Participants.  # noqa: E501

        The participant's connection type.  # noqa: E501

        :return: The connection_type of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this InlineResponse20030Participants.

        The participant's connection type.  # noqa: E501

        :param connection_type: The connection_type of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def customer_key(self):
        """Gets the customer_key of this InlineResponse20030Participants.  # noqa: E501

        The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.  # noqa: E501

        :return: The customer_key of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._customer_key

    @customer_key.setter
    def customer_key(self, customer_key):
        """Sets the customer_key of this InlineResponse20030Participants.

        The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.  # noqa: E501

        :param customer_key: The customer_key of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._customer_key = customer_key

    @property
    def data_center(self):
        """Gets the data_center of this InlineResponse20030Participants.  # noqa: E501

        The data center that the participant is leveraging to join the webinar.  # noqa: E501

        :return: The data_center of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._data_center

    @data_center.setter
    def data_center(self, data_center):
        """Sets the data_center of this InlineResponse20030Participants.

        The data center that the participant is leveraging to join the webinar.  # noqa: E501

        :param data_center: The data_center of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._data_center = data_center

    @property
    def device(self):
        """Gets the device of this InlineResponse20030Participants.  # noqa: E501

        The type of device the participant used to join the webinar.  * `Phone` - The participant joined via PSTN.  * `H.323/SIP` - The participant joined via an H.323 or SIP device.  * `Windows` - The participant joined via VoIP using a Windows device.  * `Mac` - The participant joined via VoIP using a Mac device.  * `iOS` - The participant joined via VoIP using an iOS device.  * `Android` - The participant joined via VoIP using an Android device.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The device of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InlineResponse20030Participants.

        The type of device the participant used to join the webinar.  * `Phone` - The participant joined via PSTN.  * `H.323/SIP` - The participant joined via an H.323 or SIP device.  * `Windows` - The participant joined via VoIP using a Windows device.  * `Mac` - The participant joined via VoIP using a Mac device.  * `iOS` - The participant joined via VoIP using an iOS device.  * `Android` - The participant joined via VoIP using an Android device.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param device: The device of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["Phone", "H.323/SIP", "Windows", "Mac", "iOS", "Android"]  # noqa: E501
        if device not in allowed_values:
            raise ValueError(
                "Invalid value for `device` ({0}), must be one of {1}"  # noqa: E501
                .format(device, allowed_values)
            )

        self._device = device

    @property
    def domain(self):
        """Gets the domain of this InlineResponse20030Participants.  # noqa: E501

        The participant's PC domain.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The domain of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this InlineResponse20030Participants.

        The participant's PC domain.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param domain: The domain of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def email(self):
        """Gets the email of this InlineResponse20030Participants.  # noqa: E501

        The participant's email address. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details.  # noqa: E501

        :return: The email of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20030Participants.

        The participant's email address. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details.  # noqa: E501

        :param email: The email of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def from_sip_uri(self):
        """Gets the from_sip_uri of this InlineResponse20030Participants.  # noqa: E501

        The meeting participant's SIP From header URI. The API only returns this response when the participant joins a meeting via SIP.  # noqa: E501

        :return: The from_sip_uri of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._from_sip_uri

    @from_sip_uri.setter
    def from_sip_uri(self, from_sip_uri):
        """Sets the from_sip_uri of this InlineResponse20030Participants.

        The meeting participant's SIP From header URI. The API only returns this response when the participant joins a meeting via SIP.  # noqa: E501

        :param from_sip_uri: The from_sip_uri of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._from_sip_uri = from_sip_uri

    @property
    def full_data_center(self):
        """Gets the full_data_center of this InlineResponse20030Participants.  # noqa: E501

        The data center where participant's meeting data is stored. This field includes a semicolon-separated list of HTTP Tunnel (HT), Cloud Room Connector (CRC), and Real-Time Web Gateway (RWG) location information.  # noqa: E501

        :return: The full_data_center of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._full_data_center

    @full_data_center.setter
    def full_data_center(self, full_data_center):
        """Sets the full_data_center of this InlineResponse20030Participants.

        The data center where participant's meeting data is stored. This field includes a semicolon-separated list of HTTP Tunnel (HT), Cloud Room Connector (CRC), and Real-Time Web Gateway (RWG) location information.  # noqa: E501

        :param full_data_center: The full_data_center of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._full_data_center = full_data_center

    @property
    def harddisk_id(self):
        """Gets the harddisk_id of this InlineResponse20030Participants.  # noqa: E501

        The participant's hard disk ID.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The harddisk_id of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._harddisk_id

    @harddisk_id.setter
    def harddisk_id(self, harddisk_id):
        """Sets the harddisk_id of this InlineResponse20030Participants.

        The participant's hard disk ID.   **Note:** This response returns an empty string (``) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param harddisk_id: The harddisk_id of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._harddisk_id = harddisk_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20030Participants.  # noqa: E501

        The participant's universally unique ID (UUID):  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.  # noqa: E501

        :return: The id of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20030Participants.

        The participant's universally unique ID (UUID):  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.  # noqa: E501

        :param id: The id of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_ip_addresses(self):
        """Gets the internal_ip_addresses of this InlineResponse20030Participants.  # noqa: E501

        The participant's internal IP addresses. This field will not return when:  * The account calling this API is a **legacy** [business associate agreement (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&amp;n=se45.1.160_1103&amp;r=SECTION&amp;ty=HTML).  * The account calling this API is a BAA under HIPAA **without** a signed BAA data processing addendum.  # noqa: E501

        :return: The internal_ip_addresses of this InlineResponse20030Participants.  # noqa: E501
        :rtype: list[str]
        """
        return self._internal_ip_addresses

    @internal_ip_addresses.setter
    def internal_ip_addresses(self, internal_ip_addresses):
        """Sets the internal_ip_addresses of this InlineResponse20030Participants.

        The participant's internal IP addresses. This field will not return when:  * The account calling this API is a **legacy** [business associate agreement (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&amp;n=se45.1.160_1103&amp;r=SECTION&amp;ty=HTML).  * The account calling this API is a BAA under HIPAA **without** a signed BAA data processing addendum.  # noqa: E501

        :param internal_ip_addresses: The internal_ip_addresses of this InlineResponse20030Participants.  # noqa: E501
        :type: list[str]
        """

        self._internal_ip_addresses = internal_ip_addresses

    @property
    def ip_address(self):
        """Gets the ip_address of this InlineResponse20030Participants.  # noqa: E501

        The participant's IP address.  # noqa: E501

        :return: The ip_address of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InlineResponse20030Participants.

        The participant's IP address.  # noqa: E501

        :param ip_address: The ip_address of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def join_time(self):
        """Gets the join_time of this InlineResponse20030Participants.  # noqa: E501

        The time when participant joined the webinar.  # noqa: E501

        :return: The join_time of this InlineResponse20030Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this InlineResponse20030Participants.

        The time when participant joined the webinar.  # noqa: E501

        :param join_time: The join_time of this InlineResponse20030Participants.  # noqa: E501
        :type: datetime
        """

        self._join_time = join_time

    @property
    def leave_reason(self):
        """Gets the leave_reason of this InlineResponse20030Participants.  # noqa: E501

        The reason why the participant left the webinar, where `$name` is the participant's username:  * `$name left the meeting.`  * `$name got disconnected from the meeting.`  * `Host ended the meeting.`  * `Host closed the meeting.`  * `Host started a new meeting.`  * `Network connection error.`  * `Host did not join.`  * `Exceeded free meeting minutes limit.`  * `Removed by host.`  * `Unknown reason.`  * `Leave waiting room.`  * `Removed by host from waiting room.`  # noqa: E501

        :return: The leave_reason of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._leave_reason

    @leave_reason.setter
    def leave_reason(self, leave_reason):
        """Sets the leave_reason of this InlineResponse20030Participants.

        The reason why the participant left the webinar, where `$name` is the participant's username:  * `$name left the meeting.`  * `$name got disconnected from the meeting.`  * `Host ended the meeting.`  * `Host closed the meeting.`  * `Host started a new meeting.`  * `Network connection error.`  * `Host did not join.`  * `Exceeded free meeting minutes limit.`  * `Removed by host.`  * `Unknown reason.`  * `Leave waiting room.`  * `Removed by host from waiting room.`  # noqa: E501

        :param leave_reason: The leave_reason of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["$name left the webinar.", "$name got disconnected from the webinar.", "Host ended the webinar.", "Host closed the webinar.", "Host started a new webinar.", "Network connection error.", "Host did not join.", "Exceeded free webinar minutes limit.", "Removed by host.", "Unknown reason.", "Leave waiting room.", "Removed by host from waiting room."]  # noqa: E501
        if leave_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `leave_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(leave_reason, allowed_values)
            )

        self._leave_reason = leave_reason

    @property
    def leave_time(self):
        """Gets the leave_time of this InlineResponse20030Participants.  # noqa: E501

        The time when a participant left the webinar. For live webinars, this field will only return if a participant has left the ongoing webinar.  # noqa: E501

        :return: The leave_time of this InlineResponse20030Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this InlineResponse20030Participants.

        The time when a participant left the webinar. For live webinars, this field will only return if a participant has left the ongoing webinar.  # noqa: E501

        :param leave_time: The leave_time of this InlineResponse20030Participants.  # noqa: E501
        :type: datetime
        """

        self._leave_time = leave_time

    @property
    def location(self):
        """Gets the location of this InlineResponse20030Participants.  # noqa: E501

        The participant's location.  # noqa: E501

        :return: The location of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse20030Participants.

        The participant's location.  # noqa: E501

        :param location: The location of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mac_addr(self):
        """Gets the mac_addr of this InlineResponse20030Participants.  # noqa: E501

        The participant's MAC address.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The mac_addr of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._mac_addr

    @mac_addr.setter
    def mac_addr(self, mac_addr):
        """Sets the mac_addr of this InlineResponse20030Participants.

        The participant's MAC address.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param mac_addr: The mac_addr of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._mac_addr = mac_addr

    @property
    def microphone(self):
        """Gets the microphone of this InlineResponse20030Participants.  # noqa: E501

        The type of microphone that the participant used during the webinar.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The microphone of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._microphone

    @microphone.setter
    def microphone(self, microphone):
        """Sets the microphone of this InlineResponse20030Participants.

        The type of microphone that the participant used during the webinar.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param microphone: The microphone of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._microphone = microphone

    @property
    def network_type(self):
        """Gets the network_type of this InlineResponse20030Participants.  # noqa: E501

        The participant's network type.   * `Wired`  * `Wifi`  * `PPP` - Point-to-Point.  * `Cellular` - 3G, 4G, and 5G cellular.  * `Others` - An unknown device.  # noqa: E501

        :return: The network_type of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this InlineResponse20030Participants.

        The participant's network type.   * `Wired`  * `Wifi`  * `PPP` - Point-to-Point.  * `Cellular` - 3G, 4G, and 5G cellular.  * `Others` - An unknown device.  # noqa: E501

        :param network_type: The network_type of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["Wired", "Wifi", "PPP", "Cellular", "Others"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"  # noqa: E501
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def participant_user_id(self):
        """Gets the participant_user_id of this InlineResponse20030Participants.  # noqa: E501

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.  # noqa: E501

        :return: The participant_user_id of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._participant_user_id

    @participant_user_id.setter
    def participant_user_id(self, participant_user_id):
        """Sets the participant_user_id of this InlineResponse20030Participants.

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.  # noqa: E501

        :param participant_user_id: The participant_user_id of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._participant_user_id = participant_user_id

    @property
    def pc_name(self):
        """Gets the pc_name of this InlineResponse20030Participants.  # noqa: E501

        The participant's PC name.  # noqa: E501

        :return: The pc_name of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._pc_name

    @pc_name.setter
    def pc_name(self, pc_name):
        """Sets the pc_name of this InlineResponse20030Participants.

        The participant's PC name.  # noqa: E501

        :param pc_name: The pc_name of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._pc_name = pc_name

    @property
    def recording(self):
        """Gets the recording of this InlineResponse20030Participants.  # noqa: E501

        Whether the recording feature was used during the webinar.  # noqa: E501

        :return: The recording of this InlineResponse20030Participants.  # noqa: E501
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this InlineResponse20030Participants.

        Whether the recording feature was used during the webinar.  # noqa: E501

        :param recording: The recording of this InlineResponse20030Participants.  # noqa: E501
        :type: bool
        """

        self._recording = recording

    @property
    def registrant_id(self):
        """Gets the registrant_id of this InlineResponse20030Participants.  # noqa: E501

        The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.   This field does not return if the `type` query parameter is the `live` value.  # noqa: E501

        :return: The registrant_id of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._registrant_id

    @registrant_id.setter
    def registrant_id(self, registrant_id):
        """Sets the registrant_id of this InlineResponse20030Participants.

        The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.   This field does not return if the `type` query parameter is the `live` value.  # noqa: E501

        :param registrant_id: The registrant_id of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._registrant_id = registrant_id

    @property
    def role(self):
        """Gets the role of this InlineResponse20030Participants.  # noqa: E501

        The participant's role.  * `host` - Host.  * `attendee` - Attendee.  * `panelist` - Panelist.  # noqa: E501

        :return: The role of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InlineResponse20030Participants.

        The participant's role.  * `host` - Host.  * `attendee` - Attendee.  * `panelist` - Panelist.  # noqa: E501

        :param role: The role of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "attendee", "panelist"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def screen_share_quality(self):
        """Gets the screen_share_quality of this InlineResponse20030Participants.  # noqa: E501

        The participant's [screen share quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts).  * `good` - The video is almost flawless and the quality is excellent.  * `fair` - The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` - The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` - The picture is very blurred and often gets stuck.  # noqa: E501

        :return: The screen_share_quality of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._screen_share_quality

    @screen_share_quality.setter
    def screen_share_quality(self, screen_share_quality):
        """Sets the screen_share_quality of this InlineResponse20030Participants.

        The participant's [screen share quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts).  * `good` - The video is almost flawless and the quality is excellent.  * `fair` - The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` - The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` - The picture is very blurred and often gets stuck.  # noqa: E501

        :param screen_share_quality: The screen_share_quality of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "good", "fair", "poor", "bad"]  # noqa: E501
        if screen_share_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `screen_share_quality` ({0}), must be one of {1}"  # noqa: E501
                .format(screen_share_quality, allowed_values)
            )

        self._screen_share_quality = screen_share_quality

    @property
    def share_application(self):
        """Gets the share_application of this InlineResponse20030Participants.  # noqa: E501

        Whether the participant chose to share an iPhone/iPad app during the screenshare.  # noqa: E501

        :return: The share_application of this InlineResponse20030Participants.  # noqa: E501
        :rtype: bool
        """
        return self._share_application

    @share_application.setter
    def share_application(self, share_application):
        """Sets the share_application of this InlineResponse20030Participants.

        Whether the participant chose to share an iPhone/iPad app during the screenshare.  # noqa: E501

        :param share_application: The share_application of this InlineResponse20030Participants.  # noqa: E501
        :type: bool
        """

        self._share_application = share_application

    @property
    def share_desktop(self):
        """Gets the share_desktop of this InlineResponse20030Participants.  # noqa: E501

        Whether the participant chose to share their desktop during the screenshare.  # noqa: E501

        :return: The share_desktop of this InlineResponse20030Participants.  # noqa: E501
        :rtype: bool
        """
        return self._share_desktop

    @share_desktop.setter
    def share_desktop(self, share_desktop):
        """Sets the share_desktop of this InlineResponse20030Participants.

        Whether the participant chose to share their desktop during the screenshare.  # noqa: E501

        :param share_desktop: The share_desktop of this InlineResponse20030Participants.  # noqa: E501
        :type: bool
        """

        self._share_desktop = share_desktop

    @property
    def share_whiteboard(self):
        """Gets the share_whiteboard of this InlineResponse20030Participants.  # noqa: E501

        Whether the participant chose to share their whiteboard during the screenshare.  # noqa: E501

        :return: The share_whiteboard of this InlineResponse20030Participants.  # noqa: E501
        :rtype: bool
        """
        return self._share_whiteboard

    @share_whiteboard.setter
    def share_whiteboard(self, share_whiteboard):
        """Sets the share_whiteboard of this InlineResponse20030Participants.

        Whether the participant chose to share their whiteboard during the screenshare.  # noqa: E501

        :param share_whiteboard: The share_whiteboard of this InlineResponse20030Participants.  # noqa: E501
        :type: bool
        """

        self._share_whiteboard = share_whiteboard

    @property
    def sip_uri(self):
        """Gets the sip_uri of this InlineResponse20030Participants.  # noqa: E501

        The meeting participant's SIP (Session Initiation Protocol) Contact header URI. The API only returns this response when the participant joins a meeting via SIP.  # noqa: E501

        :return: The sip_uri of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._sip_uri

    @sip_uri.setter
    def sip_uri(self, sip_uri):
        """Sets the sip_uri of this InlineResponse20030Participants.

        The meeting participant's SIP (Session Initiation Protocol) Contact header URI. The API only returns this response when the participant joins a meeting via SIP.  # noqa: E501

        :param sip_uri: The sip_uri of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._sip_uri = sip_uri

    @property
    def speaker(self):
        """Gets the speaker of this InlineResponse20030Participants.  # noqa: E501

        The type of speaker that the participant used during the webinar.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The speaker of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._speaker

    @speaker.setter
    def speaker(self, speaker):
        """Sets the speaker of this InlineResponse20030Participants.

        The type of speaker that the participant used during the webinar.   **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param speaker: The speaker of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._speaker = speaker

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20030Participants.  # noqa: E501

        The participant's ID. This value assigned to a participant upon joining a webinar and is only valid for the webinar's duration.  # noqa: E501

        :return: The user_id of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20030Participants.

        The participant's ID. This value assigned to a participant upon joining a webinar and is only valid for the webinar's duration.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20030Participants.  # noqa: E501

        The participant's display name.  # noqa: E501

        :return: The user_name of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20030Participants.

        The participant's display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def version(self):
        """Gets the version of this InlineResponse20030Participants.  # noqa: E501

        The participant's Zoom client version.  # noqa: E501

        :return: The version of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse20030Participants.

        The participant's Zoom client version.  # noqa: E501

        :param version: The version of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def video_quality(self):
        """Gets the video_quality of this InlineResponse20030Participants.  # noqa: E501

        The participant's video quality.  * `good` - The video is almost flawless and the quality is excellent.  * `fair` - The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` - The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` - The picture is very blurred and often gets stuck.  # noqa: E501

        :return: The video_quality of this InlineResponse20030Participants.  # noqa: E501
        :rtype: str
        """
        return self._video_quality

    @video_quality.setter
    def video_quality(self, video_quality):
        """Sets the video_quality of this InlineResponse20030Participants.

        The participant's video quality.  * `good` - The video is almost flawless and the quality is excellent.  * `fair` - The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` - The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` - The picture is very blurred and often gets stuck.  # noqa: E501

        :param video_quality: The video_quality of this InlineResponse20030Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "good", "fair", "poor", "bad"]  # noqa: E501
        if video_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `video_quality` ({0}), must be one of {1}"  # noqa: E501
                .format(video_quality, allowed_values)
            )

        self._video_quality = video_quality

    @property
    def audio_call(self):
        """Gets the audio_call of this InlineResponse20030Participants.  # noqa: E501

        Information about the meeting participant's audio call. Some participants may join the meeting through the phone call or are bound to the audio.  # noqa: E501

        :return: The audio_call of this InlineResponse20030Participants.  # noqa: E501
        :rtype: list[InlineResponse20030AudioCall]
        """
        return self._audio_call

    @audio_call.setter
    def audio_call(self, audio_call):
        """Sets the audio_call of this InlineResponse20030Participants.

        Information about the meeting participant's audio call. Some participants may join the meeting through the phone call or are bound to the audio.  # noqa: E501

        :param audio_call: The audio_call of this InlineResponse20030Participants.  # noqa: E501
        :type: list[InlineResponse20030AudioCall]
        """

        self._audio_call = audio_call

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20030Participants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20030Participants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
