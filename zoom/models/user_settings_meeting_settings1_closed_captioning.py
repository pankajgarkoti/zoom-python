# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSettingsMeetingSettings1ClosedCaptioning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_transcribing': 'bool',
        'enable': 'bool',
        'save_caption': 'bool',
        'third_party_captioning_service': 'bool',
        'view_full_transcript': 'bool'
    }

    attribute_map = {
        'auto_transcribing': 'auto_transcribing',
        'enable': 'enable',
        'save_caption': 'save_caption',
        'third_party_captioning_service': 'third_party_captioning_service',
        'view_full_transcript': 'view_full_transcript'
    }

    def __init__(self, auto_transcribing=None, enable=None, save_caption=None, third_party_captioning_service=None, view_full_transcript=None):  # noqa: E501
        """UserSettingsMeetingSettings1ClosedCaptioning - a model defined in Swagger"""  # noqa: E501
        self._auto_transcribing = None
        self._enable = None
        self._save_caption = None
        self._third_party_captioning_service = None
        self._view_full_transcript = None
        self.discriminator = None
        if auto_transcribing is not None:
            self.auto_transcribing = auto_transcribing
        if enable is not None:
            self.enable = enable
        if save_caption is not None:
            self.save_caption = save_caption
        if third_party_captioning_service is not None:
            self.third_party_captioning_service = third_party_captioning_service
        if view_full_transcript is not None:
            self.view_full_transcript = view_full_transcript

    @property
    def auto_transcribing(self):
        """Gets the auto_transcribing of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501

        Whether to allow a live transcription service to transcribe meetings.  # noqa: E501

        :return: The auto_transcribing of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :rtype: bool
        """
        return self._auto_transcribing

    @auto_transcribing.setter
    def auto_transcribing(self, auto_transcribing):
        """Sets the auto_transcribing of this UserSettingsMeetingSettings1ClosedCaptioning.

        Whether to allow a live transcription service to transcribe meetings.  # noqa: E501

        :param auto_transcribing: The auto_transcribing of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :type: bool
        """

        self._auto_transcribing = auto_transcribing

    @property
    def enable(self):
        """Gets the enable of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501

        Whether to allow the host to type closed captions or assign a participant or 3rd-party service to provide closed captioning.  # noqa: E501

        :return: The enable of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this UserSettingsMeetingSettings1ClosedCaptioning.

        Whether to allow the host to type closed captions or assign a participant or 3rd-party service to provide closed captioning.  # noqa: E501

        :param enable: The enable of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def save_caption(self):
        """Gets the save_caption of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501

        Whether to allow participants to save closed captions or transcripts.  # noqa: E501

        :return: The save_caption of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :rtype: bool
        """
        return self._save_caption

    @save_caption.setter
    def save_caption(self, save_caption):
        """Sets the save_caption of this UserSettingsMeetingSettings1ClosedCaptioning.

        Whether to allow participants to save closed captions or transcripts.  # noqa: E501

        :param save_caption: The save_caption of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :type: bool
        """

        self._save_caption = save_caption

    @property
    def third_party_captioning_service(self):
        """Gets the third_party_captioning_service of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501

        Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.  # noqa: E501

        :return: The third_party_captioning_service of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :rtype: bool
        """
        return self._third_party_captioning_service

    @third_party_captioning_service.setter
    def third_party_captioning_service(self, third_party_captioning_service):
        """Sets the third_party_captioning_service of this UserSettingsMeetingSettings1ClosedCaptioning.

        Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.  # noqa: E501

        :param third_party_captioning_service: The third_party_captioning_service of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :type: bool
        """

        self._third_party_captioning_service = third_party_captioning_service

    @property
    def view_full_transcript(self):
        """Gets the view_full_transcript of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501

        Whether to allow the viewing of full transcripts in the in-meeting side panel.  # noqa: E501

        :return: The view_full_transcript of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :rtype: bool
        """
        return self._view_full_transcript

    @view_full_transcript.setter
    def view_full_transcript(self, view_full_transcript):
        """Sets the view_full_transcript of this UserSettingsMeetingSettings1ClosedCaptioning.

        Whether to allow the viewing of full transcripts in the in-meeting side panel.  # noqa: E501

        :param view_full_transcript: The view_full_transcript of this UserSettingsMeetingSettings1ClosedCaptioning.  # noqa: E501
        :type: bool
        """

        self._view_full_transcript = view_full_transcript

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsMeetingSettings1ClosedCaptioning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsMeetingSettings1ClosedCaptioning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
