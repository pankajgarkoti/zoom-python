# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20016Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_sent': 'int',
        'code_sippet_sent': 'int',
        'email': 'str',
        'files_sent': 'int',
        'giphys_sent': 'int',
        'group_sent': 'int',
        'images_sent': 'int',
        'p2p_sent': 'int',
        'text_sent': 'int',
        'total_sent': 'int',
        'user_id': 'str',
        'user_name': 'str',
        'video_sent': 'int'
    }

    attribute_map = {
        'audio_sent': 'audio_sent',
        'code_sippet_sent': 'code_sippet_sent',
        'email': 'email',
        'files_sent': 'files_sent',
        'giphys_sent': 'giphys_sent',
        'group_sent': 'group_sent',
        'images_sent': 'images_sent',
        'p2p_sent': 'p2p_sent',
        'text_sent': 'text_sent',
        'total_sent': 'total_sent',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'video_sent': 'video_sent'
    }

    def __init__(self, audio_sent=None, code_sippet_sent=None, email=None, files_sent=None, giphys_sent=None, group_sent=None, images_sent=None, p2p_sent=None, text_sent=None, total_sent=None, user_id=None, user_name=None, video_sent=None):  # noqa: E501
        """InlineResponse20016Users - a model defined in Swagger"""  # noqa: E501
        self._audio_sent = None
        self._code_sippet_sent = None
        self._email = None
        self._files_sent = None
        self._giphys_sent = None
        self._group_sent = None
        self._images_sent = None
        self._p2p_sent = None
        self._text_sent = None
        self._total_sent = None
        self._user_id = None
        self._user_name = None
        self._video_sent = None
        self.discriminator = None
        if audio_sent is not None:
            self.audio_sent = audio_sent
        if code_sippet_sent is not None:
            self.code_sippet_sent = code_sippet_sent
        if email is not None:
            self.email = email
        if files_sent is not None:
            self.files_sent = files_sent
        if giphys_sent is not None:
            self.giphys_sent = giphys_sent
        if group_sent is not None:
            self.group_sent = group_sent
        if images_sent is not None:
            self.images_sent = images_sent
        if p2p_sent is not None:
            self.p2p_sent = p2p_sent
        if text_sent is not None:
            self.text_sent = text_sent
        if total_sent is not None:
            self.total_sent = total_sent
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if video_sent is not None:
            self.video_sent = video_sent

    @property
    def audio_sent(self):
        """Gets the audio_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of audio files sent.  # noqa: E501

        :return: The audio_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._audio_sent

    @audio_sent.setter
    def audio_sent(self, audio_sent):
        """Sets the audio_sent of this InlineResponse20016Users.

        The user's total number of audio files sent.  # noqa: E501

        :param audio_sent: The audio_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._audio_sent = audio_sent

    @property
    def code_sippet_sent(self):
        """Gets the code_sippet_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of code snippets sent.  # noqa: E501

        :return: The code_sippet_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._code_sippet_sent

    @code_sippet_sent.setter
    def code_sippet_sent(self, code_sippet_sent):
        """Sets the code_sippet_sent of this InlineResponse20016Users.

        The user's total number of code snippets sent.  # noqa: E501

        :param code_sippet_sent: The code_sippet_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._code_sippet_sent = code_sippet_sent

    @property
    def email(self):
        """Gets the email of this InlineResponse20016Users.  # noqa: E501

        The user's email address.  # noqa: E501

        :return: The email of this InlineResponse20016Users.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20016Users.

        The user's email address.  # noqa: E501

        :param email: The email of this InlineResponse20016Users.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def files_sent(self):
        """Gets the files_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of files sent.  # noqa: E501

        :return: The files_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._files_sent

    @files_sent.setter
    def files_sent(self, files_sent):
        """Sets the files_sent of this InlineResponse20016Users.

        The user's total number of files sent.  # noqa: E501

        :param files_sent: The files_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._files_sent = files_sent

    @property
    def giphys_sent(self):
        """Gets the giphys_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of [GIPHY](https://giphy.com/) images sent.  # noqa: E501

        :return: The giphys_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._giphys_sent

    @giphys_sent.setter
    def giphys_sent(self, giphys_sent):
        """Sets the giphys_sent of this InlineResponse20016Users.

        The user's total number of [GIPHY](https://giphy.com/) images sent.  # noqa: E501

        :param giphys_sent: The giphys_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._giphys_sent = giphys_sent

    @property
    def group_sent(self):
        """Gets the group_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of messages sent in Zoom Chat channels.  # noqa: E501

        :return: The group_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._group_sent

    @group_sent.setter
    def group_sent(self, group_sent):
        """Sets the group_sent of this InlineResponse20016Users.

        The user's total number of messages sent in Zoom Chat channels.  # noqa: E501

        :param group_sent: The group_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._group_sent = group_sent

    @property
    def images_sent(self):
        """Gets the images_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of images sent.  # noqa: E501

        :return: The images_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._images_sent

    @images_sent.setter
    def images_sent(self, images_sent):
        """Sets the images_sent of this InlineResponse20016Users.

        The user's total number of images sent.  # noqa: E501

        :param images_sent: The images_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._images_sent = images_sent

    @property
    def p2p_sent(self):
        """Gets the p2p_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of peer-to-peer (P2P) chat messages sent.  # noqa: E501

        :return: The p2p_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._p2p_sent

    @p2p_sent.setter
    def p2p_sent(self, p2p_sent):
        """Sets the p2p_sent of this InlineResponse20016Users.

        The user's total number of peer-to-peer (P2P) chat messages sent.  # noqa: E501

        :param p2p_sent: The p2p_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._p2p_sent = p2p_sent

    @property
    def text_sent(self):
        """Gets the text_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of text messages sent.  # noqa: E501

        :return: The text_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._text_sent

    @text_sent.setter
    def text_sent(self, text_sent):
        """Sets the text_sent of this InlineResponse20016Users.

        The user's total number of text messages sent.  # noqa: E501

        :param text_sent: The text_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._text_sent = text_sent

    @property
    def total_sent(self):
        """Gets the total_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of messages sent.  # noqa: E501

        :return: The total_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._total_sent

    @total_sent.setter
    def total_sent(self, total_sent):
        """Sets the total_sent of this InlineResponse20016Users.

        The user's total number of messages sent.  # noqa: E501

        :param total_sent: The total_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._total_sent = total_sent

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20016Users.  # noqa: E501

        The user's ID.  # noqa: E501

        :return: The user_id of this InlineResponse20016Users.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20016Users.

        The user's ID.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20016Users.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20016Users.  # noqa: E501

        The user's display name.  # noqa: E501

        :return: The user_name of this InlineResponse20016Users.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20016Users.

        The user's display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20016Users.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def video_sent(self):
        """Gets the video_sent of this InlineResponse20016Users.  # noqa: E501

        The user's total number of video files sent.  # noqa: E501

        :return: The video_sent of this InlineResponse20016Users.  # noqa: E501
        :rtype: int
        """
        return self._video_sent

    @video_sent.setter
    def video_sent(self, video_sent):
        """Sets the video_sent of this InlineResponse20016Users.

        The user's total number of video files sent.  # noqa: E501

        :param video_sent: The video_sent of this InlineResponse20016Users.  # noqa: E501
        :type: int
        """

        self._video_sent = video_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016Users):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
