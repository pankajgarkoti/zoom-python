# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002InMeetingVirtualBackgroundSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_upload_custom': 'bool',
        'allow_videos': 'bool',
        'enable': 'bool',
        'files': 'list[InlineResponse2002InMeetingVirtualBackgroundSettingsFiles]'
    }

    attribute_map = {
        'allow_upload_custom': 'allow_upload_custom',
        'allow_videos': 'allow_videos',
        'enable': 'enable',
        'files': 'files'
    }

    def __init__(self, allow_upload_custom=None, allow_videos=None, enable=None, files=None):  # noqa: E501
        """InlineResponse2002InMeetingVirtualBackgroundSettings - a model defined in Swagger"""  # noqa: E501
        self._allow_upload_custom = None
        self._allow_videos = None
        self._enable = None
        self._files = None
        self.discriminator = None
        if allow_upload_custom is not None:
            self.allow_upload_custom = allow_upload_custom
        if allow_videos is not None:
            self.allow_videos = allow_videos
        if enable is not None:
            self.enable = enable
        if files is not None:
            self.files = files

    @property
    def allow_upload_custom(self):
        """Gets the allow_upload_custom of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501

        Allow users to upload custom backgrounds.  # noqa: E501

        :return: The allow_upload_custom of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_upload_custom

    @allow_upload_custom.setter
    def allow_upload_custom(self, allow_upload_custom):
        """Sets the allow_upload_custom of this InlineResponse2002InMeetingVirtualBackgroundSettings.

        Allow users to upload custom backgrounds.  # noqa: E501

        :param allow_upload_custom: The allow_upload_custom of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :type: bool
        """

        self._allow_upload_custom = allow_upload_custom

    @property
    def allow_videos(self):
        """Gets the allow_videos of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501

        Allow use of videos for virtual backgrounds.  # noqa: E501

        :return: The allow_videos of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_videos

    @allow_videos.setter
    def allow_videos(self, allow_videos):
        """Sets the allow_videos of this InlineResponse2002InMeetingVirtualBackgroundSettings.

        Allow use of videos for virtual backgrounds.  # noqa: E501

        :param allow_videos: The allow_videos of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :type: bool
        """

        self._allow_videos = allow_videos

    @property
    def enable(self):
        """Gets the enable of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501

        Enable virtual background.  # noqa: E501

        :return: The enable of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse2002InMeetingVirtualBackgroundSettings.

        Enable virtual background.  # noqa: E501

        :param enable: The enable of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def files(self):
        """Gets the files of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501


        :return: The files of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :rtype: list[InlineResponse2002InMeetingVirtualBackgroundSettingsFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InlineResponse2002InMeetingVirtualBackgroundSettings.


        :param files: The files of this InlineResponse2002InMeetingVirtualBackgroundSettings.  # noqa: E501
        :type: list[InlineResponse2002InMeetingVirtualBackgroundSettingsFiles]
        """

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002InMeetingVirtualBackgroundSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002InMeetingVirtualBackgroundSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
