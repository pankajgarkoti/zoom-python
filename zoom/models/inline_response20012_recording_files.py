# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012RecordingFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted_time': 'str',
        'download_url': 'str',
        'file_path': 'str',
        'file_size': 'float',
        'file_type': 'str',
        'file_extension': 'str',
        'id': 'str',
        'meeting_id': 'str',
        'play_url': 'str',
        'recording_end': 'str',
        'recording_start': 'str',
        'recording_type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'deleted_time': 'deleted_time',
        'download_url': 'download_url',
        'file_path': 'file_path',
        'file_size': 'file_size',
        'file_type': 'file_type',
        'file_extension': 'file_extension',
        'id': 'id',
        'meeting_id': 'meeting_id',
        'play_url': 'play_url',
        'recording_end': 'recording_end',
        'recording_start': 'recording_start',
        'recording_type': 'recording_type',
        'status': 'status'
    }

    def __init__(self, deleted_time=None, download_url=None, file_path=None, file_size=None, file_type=None, file_extension=None, id=None, meeting_id=None, play_url=None, recording_end=None, recording_start=None, recording_type=None, status=None):  # noqa: E501
        """InlineResponse20012RecordingFiles - a model defined in Swagger"""  # noqa: E501
        self._deleted_time = None
        self._download_url = None
        self._file_path = None
        self._file_size = None
        self._file_type = None
        self._file_extension = None
        self._id = None
        self._meeting_id = None
        self._play_url = None
        self._recording_end = None
        self._recording_start = None
        self._recording_type = None
        self._status = None
        self.discriminator = None
        if deleted_time is not None:
            self.deleted_time = deleted_time
        if download_url is not None:
            self.download_url = download_url
        if file_path is not None:
            self.file_path = file_path
        if file_size is not None:
            self.file_size = file_size
        if file_type is not None:
            self.file_type = file_type
        if file_extension is not None:
            self.file_extension = file_extension
        if id is not None:
            self.id = id
        if meeting_id is not None:
            self.meeting_id = meeting_id
        if play_url is not None:
            self.play_url = play_url
        if recording_end is not None:
            self.recording_end = recording_end
        if recording_start is not None:
            self.recording_start = recording_start
        if recording_type is not None:
            self.recording_type = recording_type
        if status is not None:
            self.status = status

    @property
    def deleted_time(self):
        """Gets the deleted_time of this InlineResponse20012RecordingFiles.  # noqa: E501

        The time when recording was deleted. Returned in the response only for trash query.  # noqa: E501

        :return: The deleted_time of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._deleted_time

    @deleted_time.setter
    def deleted_time(self, deleted_time):
        """Sets the deleted_time of this InlineResponse20012RecordingFiles.

        The time when recording was deleted. Returned in the response only for trash query.  # noqa: E501

        :param deleted_time: The deleted_time of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._deleted_time = deleted_time

    @property
    def download_url(self):
        """Gets the download_url of this InlineResponse20012RecordingFiles.  # noqa: E501

        The URL to download the recording.   **OAuth apps**   If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file, and set the access_token as a Bearer token in the Authorization header.   `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.   **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.  # noqa: E501

        :return: The download_url of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this InlineResponse20012RecordingFiles.

        The URL to download the recording.   **OAuth apps**   If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file, and set the access_token as a Bearer token in the Authorization header.   `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.   **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.  # noqa: E501

        :param download_url: The download_url of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def file_path(self):
        """Gets the file_path of this InlineResponse20012RecordingFiles.  # noqa: E501

        The file path to the On-Premise account recording.   **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.  # noqa: E501

        :return: The file_path of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this InlineResponse20012RecordingFiles.

        The file path to the On-Premise account recording.   **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.  # noqa: E501

        :param file_path: The file_path of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def file_size(self):
        """Gets the file_size of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording file size.  # noqa: E501

        :return: The file_size of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this InlineResponse20012RecordingFiles.

        The recording file size.  # noqa: E501

        :param file_size: The file_size of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: float
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """Gets the file_type of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording file type.     `MP4` - Video file of the recording.    `M4A` Audio-only file of the recording.    `TIMELINE` - Timestamp file of the recording in JSON file format. To get a timeline file, the &quot;Add a timestamp to the recording&quot; setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.      `TRANSCRIPT` - Transcription file of the recording in VTT format.     `CHAT` - A TXT file containing in-meeting chat messages that were sent during the meeting.    `CC` - File containing closed captions of the recording in VTT file format.    `CSV` - File containing polling data in CSV format.        A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:      `id`, `status`, `file_size`, `recording_type`, and `play_url`.    `SUMMARY` - Summary file of the recording in JSON file format.  # noqa: E501

        :return: The file_type of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this InlineResponse20012RecordingFiles.

        The recording file type.     `MP4` - Video file of the recording.    `M4A` Audio-only file of the recording.    `TIMELINE` - Timestamp file of the recording in JSON file format. To get a timeline file, the &quot;Add a timestamp to the recording&quot; setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.      `TRANSCRIPT` - Transcription file of the recording in VTT format.     `CHAT` - A TXT file containing in-meeting chat messages that were sent during the meeting.    `CC` - File containing closed captions of the recording in VTT file format.    `CSV` - File containing polling data in CSV format.        A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:      `id`, `status`, `file_size`, `recording_type`, and `play_url`.    `SUMMARY` - Summary file of the recording in JSON file format.  # noqa: E501

        :param file_type: The file_type of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["MP4", "M4A", "CHAT", "TRANSCRIPT", "CSV", "TB", "CC", "CHAT_MESSAGE", "SUMMARY"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def file_extension(self):
        """Gets the file_extension of this InlineResponse20012RecordingFiles.  # noqa: E501

        The file extension type of the recording file.  # noqa: E501

        :return: The file_extension of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this InlineResponse20012RecordingFiles.

        The file extension type of the recording file.  # noqa: E501

        :param file_extension: The file_extension of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["MP4", "M4A", "TXT", "VTT", "CSV", "JSON", "JPG"]  # noqa: E501
        if file_extension not in allowed_values:
            raise ValueError(
                "Invalid value for `file_extension` ({0}), must be one of {1}"  # noqa: E501
                .format(file_extension, allowed_values)
            )

        self._file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording file ID. Included in the response of general query.  # noqa: E501

        :return: The id of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20012RecordingFiles.

        The recording file ID. Included in the response of general query.  # noqa: E501

        :param id: The id of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meeting_id(self):
        """Gets the meeting_id of this InlineResponse20012RecordingFiles.  # noqa: E501

        The meeting ID.   # noqa: E501

        :return: The meeting_id of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this InlineResponse20012RecordingFiles.

        The meeting ID.   # noqa: E501

        :param meeting_id: The meeting_id of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._meeting_id = meeting_id

    @property
    def play_url(self):
        """Gets the play_url of this InlineResponse20012RecordingFiles.  # noqa: E501

        The URL to play a recording file.  # noqa: E501

        :return: The play_url of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._play_url

    @play_url.setter
    def play_url(self, play_url):
        """Sets the play_url of this InlineResponse20012RecordingFiles.

        The URL to play a recording file.  # noqa: E501

        :param play_url: The play_url of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._play_url = play_url

    @property
    def recording_end(self):
        """Gets the recording_end of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording end time. Response in general query.  # noqa: E501

        :return: The recording_end of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._recording_end

    @recording_end.setter
    def recording_end(self, recording_end):
        """Sets the recording_end of this InlineResponse20012RecordingFiles.

        The recording end time. Response in general query.  # noqa: E501

        :param recording_end: The recording_end of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._recording_end = recording_end

    @property
    def recording_start(self):
        """Gets the recording_start of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording start time.  # noqa: E501

        :return: The recording_start of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._recording_start

    @recording_start.setter
    def recording_start(self, recording_start):
        """Sets the recording_start of this InlineResponse20012RecordingFiles.

        The recording start time.  # noqa: E501

        :param recording_start: The recording_start of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """

        self._recording_start = recording_start

    @property
    def recording_type(self):
        """Gets the recording_type of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording type.    `shared_screen_with_speaker_view(CC)`    `shared_screen_with_speaker_view`    `shared_screen_with_gallery_view`    `speaker_view`    `gallery_view`    `shared_screen`    `audio_only`    `audio_transcript`    `chat_file`    `active_speaker`    `poll`    `timeline`    `closed_caption`    `audio_interpretation`    `summary`    `summary_next_steps`    `summary_smart_chapters`    `sign_interpretation`    `production_studio`  # noqa: E501

        :return: The recording_type of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._recording_type

    @recording_type.setter
    def recording_type(self, recording_type):
        """Sets the recording_type of this InlineResponse20012RecordingFiles.

        The recording type.    `shared_screen_with_speaker_view(CC)`    `shared_screen_with_speaker_view`    `shared_screen_with_gallery_view`    `speaker_view`    `gallery_view`    `shared_screen`    `audio_only`    `audio_transcript`    `chat_file`    `active_speaker`    `poll`    `timeline`    `closed_caption`    `audio_interpretation`    `summary`    `summary_next_steps`    `summary_smart_chapters`    `sign_interpretation`    `production_studio`  # noqa: E501

        :param recording_type: The recording_type of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["shared_screen_with_speaker_view(CC)", "shared_screen_with_speaker_view", "shared_screen_with_gallery_view", "active_speaker", "gallery_view", "shared_screen", "audio_only", "audio_transcript", "chat_file", "poll", "host_video", "closed_caption", "timeline", "thumbnail", "audio_interpretation", "summary", "summary_next_steps", "summary_smart_chapters", "sign_interpretation", "production_studio"]  # noqa: E501
        if recording_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recording_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recording_type, allowed_values)
            )

        self._recording_type = recording_type

    @property
    def status(self):
        """Gets the status of this InlineResponse20012RecordingFiles.  # noqa: E501

        The recording status.  # noqa: E501

        :return: The status of this InlineResponse20012RecordingFiles.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20012RecordingFiles.

        The recording status.  # noqa: E501

        :param status: The status of this InlineResponse20012RecordingFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012RecordingFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012RecordingFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
