# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InformationBarriersPoliciesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_group_id': 'str',
        'id': 'str',
        'policy_name': 'str',
        'settings': 'InformationBarrierspoliciesSettings',
        'status': 'int',
        'to_group_id': 'str',
        'type': 'int'
    }

    attribute_map = {
        'assigned_group_id': 'assigned_group_id',
        'id': 'id',
        'policy_name': 'policy_name',
        'settings': 'settings',
        'status': 'status',
        'to_group_id': 'to_group_id',
        'type': 'type'
    }

    def __init__(self, assigned_group_id=None, id=None, policy_name=None, settings=None, status=None, to_group_id=None, type=TypeEnum._0):  # noqa: E501
        """InformationBarriersPoliciesBody - a model defined in Swagger"""  # noqa: E501
        self._assigned_group_id = None
        self._id = None
        self._policy_name = None
        self._settings = None
        self._status = None
        self._to_group_id = None
        self._type = None
        self.discriminator = None
        self.assigned_group_id = assigned_group_id
        self.id = id
        self.policy_name = policy_name
        self.settings = settings
        self.status = status
        self.to_group_id = to_group_id
        self.type = type

    @property
    def assigned_group_id(self):
        """Gets the assigned_group_id of this InformationBarriersPoliciesBody.  # noqa: E501

        The assigner group's (Group 1) ID.  # noqa: E501

        :return: The assigned_group_id of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: str
        """
        return self._assigned_group_id

    @assigned_group_id.setter
    def assigned_group_id(self, assigned_group_id):
        """Sets the assigned_group_id of this InformationBarriersPoliciesBody.

        The assigner group's (Group 1) ID.  # noqa: E501

        :param assigned_group_id: The assigned_group_id of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: str
        """
        if assigned_group_id is None:
            raise ValueError("Invalid value for `assigned_group_id`, must not be `None`")  # noqa: E501

        self._assigned_group_id = assigned_group_id

    @property
    def id(self):
        """Gets the id of this InformationBarriersPoliciesBody.  # noqa: E501

        The Information Barriers policy's ID.  # noqa: E501

        :return: The id of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InformationBarriersPoliciesBody.

        The Information Barriers policy's ID.  # noqa: E501

        :param id: The id of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def policy_name(self):
        """Gets the policy_name of this InformationBarriersPoliciesBody.  # noqa: E501

        The Information Barriers policy's name.  # noqa: E501

        :return: The policy_name of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this InformationBarriersPoliciesBody.

        The Information Barriers policy's name.  # noqa: E501

        :param policy_name: The policy_name of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")  # noqa: E501

        self._policy_name = policy_name

    @property
    def settings(self):
        """Gets the settings of this InformationBarriersPoliciesBody.  # noqa: E501


        :return: The settings of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: InformationBarrierspoliciesSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this InformationBarriersPoliciesBody.


        :param settings: The settings of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: InformationBarrierspoliciesSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def status(self):
        """Gets the status of this InformationBarriersPoliciesBody.  # noqa: E501

        The Information Barriers policy's status.  * `0` &mdash; Disabled.  * `1` &mdash; Enabled.  # noqa: E501

        :return: The status of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InformationBarriersPoliciesBody.

        The Information Barriers policy's status.  * `0` &mdash; Disabled.  * `1` &mdash; Enabled.  # noqa: E501

        :param status: The status of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def to_group_id(self):
        """Gets the to_group_id of this InformationBarriersPoliciesBody.  # noqa: E501

        The assignee group's (Group 2) ID.  # noqa: E501

        :return: The to_group_id of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: str
        """
        return self._to_group_id

    @to_group_id.setter
    def to_group_id(self, to_group_id):
        """Sets the to_group_id of this InformationBarriersPoliciesBody.

        The assignee group's (Group 2) ID.  # noqa: E501

        :param to_group_id: The to_group_id of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: str
        """
        if to_group_id is None:
            raise ValueError("Invalid value for `to_group_id`, must not be `None`")  # noqa: E501

        self._to_group_id = to_group_id

    @property
    def type(self):
        """Gets the type of this InformationBarriersPoliciesBody.  # noqa: E501

        The Information Barriers policy's type of `settings` restrictions.  * `0` &mdash; A [hard or soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) exists, but users in Group 1 and Group 2 can chat with each other.  * `1` &mdash; A [hard or soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) exists and only users in Group 1 can chat with users in Group 2.  * `2` &mdash; No blocks exist, but only users in Group 1 can chat with users in Group 2.  * `3` &mdash; No blocks exist and users in Group 1 and Group 2 can chat with each other.   This field only supports `0`.  # noqa: E501

        :return: The type of this InformationBarriersPoliciesBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InformationBarriersPoliciesBody.

        The Information Barriers policy's type of `settings` restrictions.  * `0` &mdash; A [hard or soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) exists, but users in Group 1 and Group 2 can chat with each other.  * `1` &mdash; A [hard or soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) exists and only users in Group 1 can chat with users in Group 2.  * `2` &mdash; No blocks exist, but only users in Group 1 can chat with users in Group 2.  * `3` &mdash; No blocks exist and users in Group 1 and Group 2 can chat with each other.   This field only supports `0`.  # noqa: E501

        :param type: The type of this InformationBarriersPoliciesBody.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InformationBarriersPoliciesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InformationBarriersPoliciesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
