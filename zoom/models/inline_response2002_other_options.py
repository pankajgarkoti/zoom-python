# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002OtherOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_auto_active_users': 'bool',
        'allow_users_contact_support_via_chat': 'bool',
        'allow_users_enter_and_share_pronouns': 'bool',
        'blur_snapshot': 'bool',
        'display_meetings_scheduled_for_others': 'bool',
        'meeting_qos_and_mos': 'int',
        'show_one_user_meeting_on_dashboard': 'bool',
        'use_cdn': 'str',
        'webinar_registration_options': 'AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions',
        'email_in_attendee_report_for_meeting': 'bool'
    }

    attribute_map = {
        'allow_auto_active_users': 'allow_auto_active_users',
        'allow_users_contact_support_via_chat': 'allow_users_contact_support_via_chat',
        'allow_users_enter_and_share_pronouns': 'allow_users_enter_and_share_pronouns',
        'blur_snapshot': 'blur_snapshot',
        'display_meetings_scheduled_for_others': 'display_meetings_scheduled_for_others',
        'meeting_qos_and_mos': 'meeting_qos_and_mos',
        'show_one_user_meeting_on_dashboard': 'show_one_user_meeting_on_dashboard',
        'use_cdn': 'use_cdn',
        'webinar_registration_options': 'webinar_registration_options',
        'email_in_attendee_report_for_meeting': 'email_in_attendee_report_for_meeting'
    }

    def __init__(self, allow_auto_active_users=None, allow_users_contact_support_via_chat=None, allow_users_enter_and_share_pronouns=None, blur_snapshot=None, display_meetings_scheduled_for_others=None, meeting_qos_and_mos=None, show_one_user_meeting_on_dashboard=None, use_cdn=None, webinar_registration_options=None, email_in_attendee_report_for_meeting=None):  # noqa: E501
        """InlineResponse2002OtherOptions - a model defined in Swagger"""  # noqa: E501
        self._allow_auto_active_users = None
        self._allow_users_contact_support_via_chat = None
        self._allow_users_enter_and_share_pronouns = None
        self._blur_snapshot = None
        self._display_meetings_scheduled_for_others = None
        self._meeting_qos_and_mos = None
        self._show_one_user_meeting_on_dashboard = None
        self._use_cdn = None
        self._webinar_registration_options = None
        self._email_in_attendee_report_for_meeting = None
        self.discriminator = None
        if allow_auto_active_users is not None:
            self.allow_auto_active_users = allow_auto_active_users
        if allow_users_contact_support_via_chat is not None:
            self.allow_users_contact_support_via_chat = allow_users_contact_support_via_chat
        if allow_users_enter_and_share_pronouns is not None:
            self.allow_users_enter_and_share_pronouns = allow_users_enter_and_share_pronouns
        if blur_snapshot is not None:
            self.blur_snapshot = blur_snapshot
        if display_meetings_scheduled_for_others is not None:
            self.display_meetings_scheduled_for_others = display_meetings_scheduled_for_others
        if meeting_qos_and_mos is not None:
            self.meeting_qos_and_mos = meeting_qos_and_mos
        if show_one_user_meeting_on_dashboard is not None:
            self.show_one_user_meeting_on_dashboard = show_one_user_meeting_on_dashboard
        if use_cdn is not None:
            self.use_cdn = use_cdn
        if webinar_registration_options is not None:
            self.webinar_registration_options = webinar_registration_options
        if email_in_attendee_report_for_meeting is not None:
            self.email_in_attendee_report_for_meeting = email_in_attendee_report_for_meeting

    @property
    def allow_auto_active_users(self):
        """Gets the allow_auto_active_users of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, administrators can activate users with a single default passcode when adding users. This activates added users immediately without waiting for them to set their own passcode.  # noqa: E501

        :return: The allow_auto_active_users of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_active_users

    @allow_auto_active_users.setter
    def allow_auto_active_users(self, allow_auto_active_users):
        """Sets the allow_auto_active_users of this InlineResponse2002OtherOptions.

        If true, administrators can activate users with a single default passcode when adding users. This activates added users immediately without waiting for them to set their own passcode.  # noqa: E501

        :param allow_auto_active_users: The allow_auto_active_users of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._allow_auto_active_users = allow_auto_active_users

    @property
    def allow_users_contact_support_via_chat(self):
        """Gets the allow_users_contact_support_via_chat of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, displays the Zoom Help badge on the bottom-right of the page.  # noqa: E501

        :return: The allow_users_contact_support_via_chat of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_users_contact_support_via_chat

    @allow_users_contact_support_via_chat.setter
    def allow_users_contact_support_via_chat(self, allow_users_contact_support_via_chat):
        """Sets the allow_users_contact_support_via_chat of this InlineResponse2002OtherOptions.

        If true, displays the Zoom Help badge on the bottom-right of the page.  # noqa: E501

        :param allow_users_contact_support_via_chat: The allow_users_contact_support_via_chat of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._allow_users_contact_support_via_chat = allow_users_contact_support_via_chat

    @property
    def allow_users_enter_and_share_pronouns(self):
        """Gets the allow_users_enter_and_share_pronouns of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, users can add pronouns to their profile cards and share them during meetings and webinars.  # noqa: E501

        :return: The allow_users_enter_and_share_pronouns of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_users_enter_and_share_pronouns

    @allow_users_enter_and_share_pronouns.setter
    def allow_users_enter_and_share_pronouns(self, allow_users_enter_and_share_pronouns):
        """Sets the allow_users_enter_and_share_pronouns of this InlineResponse2002OtherOptions.

        If true, users can add pronouns to their profile cards and share them during meetings and webinars.  # noqa: E501

        :param allow_users_enter_and_share_pronouns: The allow_users_enter_and_share_pronouns of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._allow_users_enter_and_share_pronouns = allow_users_enter_and_share_pronouns

    @property
    def blur_snapshot(self):
        """Gets the blur_snapshot of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, iOS blurs the screenshot in the task switcher when multiple apps are open. Android hides the screenshot in the system-level list of recent apps.  # noqa: E501

        :return: The blur_snapshot of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._blur_snapshot

    @blur_snapshot.setter
    def blur_snapshot(self, blur_snapshot):
        """Sets the blur_snapshot of this InlineResponse2002OtherOptions.

        If true, iOS blurs the screenshot in the task switcher when multiple apps are open. Android hides the screenshot in the system-level list of recent apps.  # noqa: E501

        :param blur_snapshot: The blur_snapshot of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._blur_snapshot = blur_snapshot

    @property
    def display_meetings_scheduled_for_others(self):
        """Gets the display_meetings_scheduled_for_others of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, a user with [scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege) can view other users' meetings.  # noqa: E501

        :return: The display_meetings_scheduled_for_others of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._display_meetings_scheduled_for_others

    @display_meetings_scheduled_for_others.setter
    def display_meetings_scheduled_for_others(self, display_meetings_scheduled_for_others):
        """Sets the display_meetings_scheduled_for_others of this InlineResponse2002OtherOptions.

        If true, a user with [scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege) can view other users' meetings.  # noqa: E501

        :param display_meetings_scheduled_for_others: The display_meetings_scheduled_for_others of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._display_meetings_scheduled_for_others = display_meetings_scheduled_for_others

    @property
    def meeting_qos_and_mos(self):
        """Gets the meeting_qos_and_mos of this InlineResponse2002OtherOptions.  # noqa: E501

        The dashboard meeting [quality scores and network alerts](https://support.zoom.us/hc/en-us/articles/360061244651) setting.  * `0` 0 Do not enable meeting quality scores and network alerts on the dashboard.  * `1` - Display the meeting quality score and network alerts on the dashboard.  * `2` - Use custom thresholds for quality scores and network alerts. * `3` - Display the meeting quality score and network alerts on the dashboard and use custom thresholds for quality scores and network alerts.  # noqa: E501

        :return: The meeting_qos_and_mos of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: int
        """
        return self._meeting_qos_and_mos

    @meeting_qos_and_mos.setter
    def meeting_qos_and_mos(self, meeting_qos_and_mos):
        """Sets the meeting_qos_and_mos of this InlineResponse2002OtherOptions.

        The dashboard meeting [quality scores and network alerts](https://support.zoom.us/hc/en-us/articles/360061244651) setting.  * `0` 0 Do not enable meeting quality scores and network alerts on the dashboard.  * `1` - Display the meeting quality score and network alerts on the dashboard.  * `2` - Use custom thresholds for quality scores and network alerts. * `3` - Display the meeting quality score and network alerts on the dashboard and use custom thresholds for quality scores and network alerts.  # noqa: E501

        :param meeting_qos_and_mos: The meeting_qos_and_mos of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if meeting_qos_and_mos not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_qos_and_mos` ({0}), must be one of {1}"  # noqa: E501
                .format(meeting_qos_and_mos, allowed_values)
            )

        self._meeting_qos_and_mos = meeting_qos_and_mos

    @property
    def show_one_user_meeting_on_dashboard(self):
        """Gets the show_one_user_meeting_on_dashboard of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, meetings with only one person will display on the dashboard and in reports.  # noqa: E501

        :return: The show_one_user_meeting_on_dashboard of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._show_one_user_meeting_on_dashboard

    @show_one_user_meeting_on_dashboard.setter
    def show_one_user_meeting_on_dashboard(self, show_one_user_meeting_on_dashboard):
        """Sets the show_one_user_meeting_on_dashboard of this InlineResponse2002OtherOptions.

        If true, meetings with only one person will display on the dashboard and in reports.  # noqa: E501

        :param show_one_user_meeting_on_dashboard: The show_one_user_meeting_on_dashboard of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._show_one_user_meeting_on_dashboard = show_one_user_meeting_on_dashboard

    @property
    def use_cdn(self):
        """Gets the use_cdn of this InlineResponse2002OtherOptions.  # noqa: E501

        Allow connections to different CDNs (content delivery networks) for a better web browsing experience. All users in your organization will use the selected CDN to access static resources.  * `none` - Do not use a CDN.  * `default` - Use the Amazon CloudFront CDN for users **except** Chinese Mainland users. Chinese Mainland users will use the Wangsu CDN (China).  * `wangsu` - Use the Wangsu CDN for all users.  # noqa: E501

        :return: The use_cdn of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: str
        """
        return self._use_cdn

    @use_cdn.setter
    def use_cdn(self, use_cdn):
        """Sets the use_cdn of this InlineResponse2002OtherOptions.

        Allow connections to different CDNs (content delivery networks) for a better web browsing experience. All users in your organization will use the selected CDN to access static resources.  * `none` - Do not use a CDN.  * `default` - Use the Amazon CloudFront CDN for users **except** Chinese Mainland users. Chinese Mainland users will use the Wangsu CDN (China).  * `wangsu` - Use the Wangsu CDN for all users.  # noqa: E501

        :param use_cdn: The use_cdn of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "default", "wangsu"]  # noqa: E501
        if use_cdn not in allowed_values:
            raise ValueError(
                "Invalid value for `use_cdn` ({0}), must be one of {1}"  # noqa: E501
                .format(use_cdn, allowed_values)
            )

        self._use_cdn = use_cdn

    @property
    def webinar_registration_options(self):
        """Gets the webinar_registration_options of this InlineResponse2002OtherOptions.  # noqa: E501


        :return: The webinar_registration_options of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions
        """
        return self._webinar_registration_options

    @webinar_registration_options.setter
    def webinar_registration_options(self, webinar_registration_options):
        """Sets the webinar_registration_options of this InlineResponse2002OtherOptions.


        :param webinar_registration_options: The webinar_registration_options of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions
        """

        self._webinar_registration_options = webinar_registration_options

    @property
    def email_in_attendee_report_for_meeting(self):
        """Gets the email_in_attendee_report_for_meeting of this InlineResponse2002OtherOptions.  # noqa: E501

        If true, include authenticated guests' email addresses in attendee reports for meetings.  # noqa: E501

        :return: The email_in_attendee_report_for_meeting of this InlineResponse2002OtherOptions.  # noqa: E501
        :rtype: bool
        """
        return self._email_in_attendee_report_for_meeting

    @email_in_attendee_report_for_meeting.setter
    def email_in_attendee_report_for_meeting(self, email_in_attendee_report_for_meeting):
        """Sets the email_in_attendee_report_for_meeting of this InlineResponse2002OtherOptions.

        If true, include authenticated guests' email addresses in attendee reports for meetings.  # noqa: E501

        :param email_in_attendee_report_for_meeting: The email_in_attendee_report_for_meeting of this InlineResponse2002OtherOptions.  # noqa: E501
        :type: bool
        """

        self._email_in_attendee_report_for_meeting = email_in_attendee_report_for_meeting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002OtherOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002OtherOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
