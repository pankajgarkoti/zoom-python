# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSettingsFeatureSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concurrent_meeting': 'str',
        'large_meeting': 'bool',
        'large_meeting_capacity': 'int',
        'meeting_capacity': 'int',
        'webinar': 'bool',
        'webinar_capacity': 'int',
        'zoom_events': 'bool',
        'zoom_events_capacity': 'int',
        'zoom_phone': 'bool',
        'zoom_iq_for_sales': 'bool',
        'zoom_whiteboard': 'bool',
        'zoom_whiteboard_plus': 'bool',
        'zoom_translated_captions': 'bool',
        'zoom_customer_managed_key': 'bool',
        'zoom_spots': 'bool'
    }

    attribute_map = {
        'concurrent_meeting': 'concurrent_meeting',
        'large_meeting': 'large_meeting',
        'large_meeting_capacity': 'large_meeting_capacity',
        'meeting_capacity': 'meeting_capacity',
        'webinar': 'webinar',
        'webinar_capacity': 'webinar_capacity',
        'zoom_events': 'zoom_events',
        'zoom_events_capacity': 'zoom_events_capacity',
        'zoom_phone': 'zoom_phone',
        'zoom_iq_for_sales': 'zoom_iq_for_sales',
        'zoom_whiteboard': 'zoom_whiteboard',
        'zoom_whiteboard_plus': 'zoom_whiteboard_plus',
        'zoom_translated_captions': 'zoom_translated_captions',
        'zoom_customer_managed_key': 'zoom_customer_managed_key',
        'zoom_spots': 'zoom_spots'
    }

    def __init__(self, concurrent_meeting=None, large_meeting=None, large_meeting_capacity=None, meeting_capacity=None, webinar=None, webinar_capacity=None, zoom_events=None, zoom_events_capacity=None, zoom_phone=None, zoom_iq_for_sales=None, zoom_whiteboard=None, zoom_whiteboard_plus=None, zoom_translated_captions=None, zoom_customer_managed_key=None, zoom_spots=None):  # noqa: E501
        """UserSettingsFeatureSettings - a model defined in Swagger"""  # noqa: E501
        self._concurrent_meeting = None
        self._large_meeting = None
        self._large_meeting_capacity = None
        self._meeting_capacity = None
        self._webinar = None
        self._webinar_capacity = None
        self._zoom_events = None
        self._zoom_events_capacity = None
        self._zoom_phone = None
        self._zoom_iq_for_sales = None
        self._zoom_whiteboard = None
        self._zoom_whiteboard_plus = None
        self._zoom_translated_captions = None
        self._zoom_customer_managed_key = None
        self._zoom_spots = None
        self.discriminator = None
        if concurrent_meeting is not None:
            self.concurrent_meeting = concurrent_meeting
        if large_meeting is not None:
            self.large_meeting = large_meeting
        if large_meeting_capacity is not None:
            self.large_meeting_capacity = large_meeting_capacity
        if meeting_capacity is not None:
            self.meeting_capacity = meeting_capacity
        if webinar is not None:
            self.webinar = webinar
        if webinar_capacity is not None:
            self.webinar_capacity = webinar_capacity
        if zoom_events is not None:
            self.zoom_events = zoom_events
        if zoom_events_capacity is not None:
            self.zoom_events_capacity = zoom_events_capacity
        if zoom_phone is not None:
            self.zoom_phone = zoom_phone
        if zoom_iq_for_sales is not None:
            self.zoom_iq_for_sales = zoom_iq_for_sales
        if zoom_whiteboard is not None:
            self.zoom_whiteboard = zoom_whiteboard
        if zoom_whiteboard_plus is not None:
            self.zoom_whiteboard_plus = zoom_whiteboard_plus
        if zoom_translated_captions is not None:
            self.zoom_translated_captions = zoom_translated_captions
        if zoom_customer_managed_key is not None:
            self.zoom_customer_managed_key = zoom_customer_managed_key
        if zoom_spots is not None:
            self.zoom_spots = zoom_spots

    @property
    def concurrent_meeting(self):
        """Gets the concurrent_meeting of this UserSettingsFeatureSettings.  # noqa: E501

        The user's assigned [Concurrent Meeting](https://support.zoom.us/hc/en-us/articles/206122046) type:  * `Basic`  * `Plus`  * `None`    **Note:** This feature requires a Concurrent Meeting Basic or Plus plan subscription.  # noqa: E501

        :return: The concurrent_meeting of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: str
        """
        return self._concurrent_meeting

    @concurrent_meeting.setter
    def concurrent_meeting(self, concurrent_meeting):
        """Sets the concurrent_meeting of this UserSettingsFeatureSettings.

        The user's assigned [Concurrent Meeting](https://support.zoom.us/hc/en-us/articles/206122046) type:  * `Basic`  * `Plus`  * `None`    **Note:** This feature requires a Concurrent Meeting Basic or Plus plan subscription.  # noqa: E501

        :param concurrent_meeting: The concurrent_meeting of this UserSettingsFeatureSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["Basic", "Plus", "None"]  # noqa: E501
        if concurrent_meeting not in allowed_values:
            raise ValueError(
                "Invalid value for `concurrent_meeting` ({0}), must be one of {1}"  # noqa: E501
                .format(concurrent_meeting, allowed_values)
            )

        self._concurrent_meeting = concurrent_meeting

    @property
    def large_meeting(self):
        """Gets the large_meeting of this UserSettingsFeatureSettings.  # noqa: E501

        Enable [large meeting](https://support.zoom.us/hc/en-us/articles/201362823-What-is-a-Large-Meeting-) feature for the user.  # noqa: E501

        :return: The large_meeting of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._large_meeting

    @large_meeting.setter
    def large_meeting(self, large_meeting):
        """Sets the large_meeting of this UserSettingsFeatureSettings.

        Enable [large meeting](https://support.zoom.us/hc/en-us/articles/201362823-What-is-a-Large-Meeting-) feature for the user.  # noqa: E501

        :param large_meeting: The large_meeting of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._large_meeting = large_meeting

    @property
    def large_meeting_capacity(self):
        """Gets the large_meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501

        Set the meeting capacity for the user if the user has **Large meeting** feature enabled. The value for the field can be either 500 or 1000.  # noqa: E501

        :return: The large_meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: int
        """
        return self._large_meeting_capacity

    @large_meeting_capacity.setter
    def large_meeting_capacity(self, large_meeting_capacity):
        """Sets the large_meeting_capacity of this UserSettingsFeatureSettings.

        Set the meeting capacity for the user if the user has **Large meeting** feature enabled. The value for the field can be either 500 or 1000.  # noqa: E501

        :param large_meeting_capacity: The large_meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :type: int
        """

        self._large_meeting_capacity = large_meeting_capacity

    @property
    def meeting_capacity(self):
        """Gets the meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501

        Set a user's meeting capacity. User's meeting capacity denotes the maximum number of participants that can join a meeting scheduled by the user.  # noqa: E501

        :return: The meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: int
        """
        return self._meeting_capacity

    @meeting_capacity.setter
    def meeting_capacity(self, meeting_capacity):
        """Sets the meeting_capacity of this UserSettingsFeatureSettings.

        Set a user's meeting capacity. User's meeting capacity denotes the maximum number of participants that can join a meeting scheduled by the user.  # noqa: E501

        :param meeting_capacity: The meeting_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :type: int
        """

        self._meeting_capacity = meeting_capacity

    @property
    def webinar(self):
        """Gets the webinar of this UserSettingsFeatureSettings.  # noqa: E501

        Enable Webinar feature for the user.  # noqa: E501

        :return: The webinar of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._webinar

    @webinar.setter
    def webinar(self, webinar):
        """Sets the webinar of this UserSettingsFeatureSettings.

        Enable Webinar feature for the user.  # noqa: E501

        :param webinar: The webinar of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._webinar = webinar

    @property
    def webinar_capacity(self):
        """Gets the webinar_capacity of this UserSettingsFeatureSettings.  # noqa: E501

        The user's webinar capacity. This only applies to users with the [**Webinar**](https://support.zoom.us/hc/en-us/articles/200917029-Getting-started-with-webinar) feature enabled:  * `100`  * `500`  * `501`  * `1000`  * `1001`  * `3000`  * `5000`  * `10000`  # noqa: E501

        :return: The webinar_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: int
        """
        return self._webinar_capacity

    @webinar_capacity.setter
    def webinar_capacity(self, webinar_capacity):
        """Sets the webinar_capacity of this UserSettingsFeatureSettings.

        The user's webinar capacity. This only applies to users with the [**Webinar**](https://support.zoom.us/hc/en-us/articles/200917029-Getting-started-with-webinar) feature enabled:  * `100`  * `500`  * `501`  * `1000`  * `1001`  * `3000`  * `5000`  * `10000`  # noqa: E501

        :param webinar_capacity: The webinar_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :type: int
        """
        allowed_values = [100, 500, 501, 1000, 1001, 3000, 5000, 10000]  # noqa: E501
        if webinar_capacity not in allowed_values:
            raise ValueError(
                "Invalid value for `webinar_capacity` ({0}), must be one of {1}"  # noqa: E501
                .format(webinar_capacity, allowed_values)
            )

        self._webinar_capacity = webinar_capacity

    @property
    def zoom_events(self):
        """Gets the zoom_events of this UserSettingsFeatureSettings.  # noqa: E501

        Whether to enable the Zoom Events feature for the user.  # noqa: E501

        :return: The zoom_events of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_events

    @zoom_events.setter
    def zoom_events(self, zoom_events):
        """Sets the zoom_events of this UserSettingsFeatureSettings.

        Whether to enable the Zoom Events feature for the user.  # noqa: E501

        :param zoom_events: The zoom_events of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_events = zoom_events

    @property
    def zoom_events_capacity(self):
        """Gets the zoom_events_capacity of this UserSettingsFeatureSettings.  # noqa: E501

        The user's Zoom Events plan capacity: `500`, `1000`, `3000`, `5000`, `10000`, `20000`, `30000`, or `50000`.  # noqa: E501

        :return: The zoom_events_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: int
        """
        return self._zoom_events_capacity

    @zoom_events_capacity.setter
    def zoom_events_capacity(self, zoom_events_capacity):
        """Sets the zoom_events_capacity of this UserSettingsFeatureSettings.

        The user's Zoom Events plan capacity: `500`, `1000`, `3000`, `5000`, `10000`, `20000`, `30000`, or `50000`.  # noqa: E501

        :param zoom_events_capacity: The zoom_events_capacity of this UserSettingsFeatureSettings.  # noqa: E501
        :type: int
        """
        allowed_values = [500, 1000, 3000, 5000, 10000, 20000, 30000, 50000]  # noqa: E501
        if zoom_events_capacity not in allowed_values:
            raise ValueError(
                "Invalid value for `zoom_events_capacity` ({0}), must be one of {1}"  # noqa: E501
                .format(zoom_events_capacity, allowed_values)
            )

        self._zoom_events_capacity = zoom_events_capacity

    @property
    def zoom_phone(self):
        """Gets the zoom_phone of this UserSettingsFeatureSettings.  # noqa: E501

        Zoom phone feature.  # noqa: E501

        :return: The zoom_phone of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_phone

    @zoom_phone.setter
    def zoom_phone(self, zoom_phone):
        """Sets the zoom_phone of this UserSettingsFeatureSettings.

        Zoom phone feature.  # noqa: E501

        :param zoom_phone: The zoom_phone of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_phone = zoom_phone

    @property
    def zoom_iq_for_sales(self):
        """Gets the zoom_iq_for_sales of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  # noqa: E501

        :return: The zoom_iq_for_sales of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_iq_for_sales

    @zoom_iq_for_sales.setter
    def zoom_iq_for_sales(self, zoom_iq_for_sales):
        """Sets the zoom_iq_for_sales of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  # noqa: E501

        :param zoom_iq_for_sales: The zoom_iq_for_sales of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_iq_for_sales = zoom_iq_for_sales

    @property
    def zoom_whiteboard(self):
        """Gets the zoom_whiteboard of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Whiteboard license.  # noqa: E501

        :return: The zoom_whiteboard of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_whiteboard

    @zoom_whiteboard.setter
    def zoom_whiteboard(self, zoom_whiteboard):
        """Sets the zoom_whiteboard of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Whiteboard license.  # noqa: E501

        :param zoom_whiteboard: The zoom_whiteboard of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_whiteboard = zoom_whiteboard

    @property
    def zoom_whiteboard_plus(self):
        """Gets the zoom_whiteboard_plus of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Whiteboard Plus license.  # noqa: E501

        :return: The zoom_whiteboard_plus of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_whiteboard_plus

    @zoom_whiteboard_plus.setter
    def zoom_whiteboard_plus(self, zoom_whiteboard_plus):
        """Sets the zoom_whiteboard_plus of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Whiteboard Plus license.  # noqa: E501

        :param zoom_whiteboard_plus: The zoom_whiteboard_plus of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_whiteboard_plus = zoom_whiteboard_plus

    @property
    def zoom_translated_captions(self):
        """Gets the zoom_translated_captions of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Translated Captions license.  # noqa: E501

        :return: The zoom_translated_captions of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_translated_captions

    @zoom_translated_captions.setter
    def zoom_translated_captions(self, zoom_translated_captions):
        """Sets the zoom_translated_captions of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Translated Captions license.  # noqa: E501

        :param zoom_translated_captions: The zoom_translated_captions of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_translated_captions = zoom_translated_captions

    @property
    def zoom_customer_managed_key(self):
        """Gets the zoom_customer_managed_key of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Customer Managed Key license.  # noqa: E501

        :return: The zoom_customer_managed_key of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_customer_managed_key

    @zoom_customer_managed_key.setter
    def zoom_customer_managed_key(self, zoom_customer_managed_key):
        """Sets the zoom_customer_managed_key of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Customer Managed Key license.  # noqa: E501

        :param zoom_customer_managed_key: The zoom_customer_managed_key of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_customer_managed_key = zoom_customer_managed_key

    @property
    def zoom_spots(self):
        """Gets the zoom_spots of this UserSettingsFeatureSettings.  # noqa: E501

        Whether the user has a Zoom Spots license.  # noqa: E501

        :return: The zoom_spots of this UserSettingsFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_spots

    @zoom_spots.setter
    def zoom_spots(self, zoom_spots):
        """Sets the zoom_spots of this UserSettingsFeatureSettings.

        Whether the user has a Zoom Spots license.  # noqa: E501

        :param zoom_spots: The zoom_spots of this UserSettingsFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._zoom_spots = zoom_spots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsFeatureSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsFeatureSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
