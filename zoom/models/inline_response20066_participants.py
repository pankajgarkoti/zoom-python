# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20066Participants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_key': 'str',
        'duration': 'int',
        'failover': 'bool',
        'id': 'str',
        'join_time': 'datetime',
        'leave_time': 'datetime',
        'name': 'str',
        'registrant_id': 'str',
        'status': 'str',
        'user_email': 'str',
        'user_id': 'str',
        'bo_mtg_id': 'str',
        'participant_user_id': 'str'
    }

    attribute_map = {
        'customer_key': 'customer_key',
        'duration': 'duration',
        'failover': 'failover',
        'id': 'id',
        'join_time': 'join_time',
        'leave_time': 'leave_time',
        'name': 'name',
        'registrant_id': 'registrant_id',
        'status': 'status',
        'user_email': 'user_email',
        'user_id': 'user_id',
        'bo_mtg_id': 'bo_mtg_id',
        'participant_user_id': 'participant_user_id'
    }

    def __init__(self, customer_key=None, duration=None, failover=None, id=None, join_time=None, leave_time=None, name=None, registrant_id=None, status=None, user_email=None, user_id=None, bo_mtg_id=None, participant_user_id=None):  # noqa: E501
        """InlineResponse20066Participants - a model defined in Swagger"""  # noqa: E501
        self._customer_key = None
        self._duration = None
        self._failover = None
        self._id = None
        self._join_time = None
        self._leave_time = None
        self._name = None
        self._registrant_id = None
        self._status = None
        self._user_email = None
        self._user_id = None
        self._bo_mtg_id = None
        self._participant_user_id = None
        self.discriminator = None
        if customer_key is not None:
            self.customer_key = customer_key
        if duration is not None:
            self.duration = duration
        if failover is not None:
            self.failover = failover
        if id is not None:
            self.id = id
        if join_time is not None:
            self.join_time = join_time
        if leave_time is not None:
            self.leave_time = leave_time
        if name is not None:
            self.name = name
        if registrant_id is not None:
            self.registrant_id = registrant_id
        if status is not None:
            self.status = status
        if user_email is not None:
            self.user_email = user_email
        if user_id is not None:
            self.user_id = user_id
        if bo_mtg_id is not None:
            self.bo_mtg_id = bo_mtg_id
        if participant_user_id is not None:
            self.participant_user_id = participant_user_id

    @property
    def customer_key(self):
        """Gets the customer_key of this InlineResponse20066Participants.  # noqa: E501

        The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.  # noqa: E501

        :return: The customer_key of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._customer_key

    @customer_key.setter
    def customer_key(self, customer_key):
        """Sets the customer_key of this InlineResponse20066Participants.

        The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.  # noqa: E501

        :param customer_key: The customer_key of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._customer_key = customer_key

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20066Participants.  # noqa: E501

        Participant duration.  # noqa: E501

        :return: The duration of this InlineResponse20066Participants.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20066Participants.

        Participant duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20066Participants.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def failover(self):
        """Gets the failover of this InlineResponse20066Participants.  # noqa: E501

        Indicates if failover happened during the meeting.  # noqa: E501

        :return: The failover of this InlineResponse20066Participants.  # noqa: E501
        :rtype: bool
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this InlineResponse20066Participants.

        Indicates if failover happened during the meeting.  # noqa: E501

        :param failover: The failover of this InlineResponse20066Participants.  # noqa: E501
        :type: bool
        """

        self._failover = failover

    @property
    def id(self):
        """Gets the id of this InlineResponse20066Participants.  # noqa: E501

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.  # noqa: E501

        :return: The id of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20066Participants.

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.  # noqa: E501

        :param id: The id of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def join_time(self):
        """Gets the join_time of this InlineResponse20066Participants.  # noqa: E501

        Participant join time.  # noqa: E501

        :return: The join_time of this InlineResponse20066Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this InlineResponse20066Participants.

        Participant join time.  # noqa: E501

        :param join_time: The join_time of this InlineResponse20066Participants.  # noqa: E501
        :type: datetime
        """

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this InlineResponse20066Participants.  # noqa: E501

        Participant leave time.  # noqa: E501

        :return: The leave_time of this InlineResponse20066Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this InlineResponse20066Participants.

        Participant leave time.  # noqa: E501

        :param leave_time: The leave_time of this InlineResponse20066Participants.  # noqa: E501
        :type: datetime
        """

        self._leave_time = leave_time

    @property
    def name(self):
        """Gets the name of this InlineResponse20066Participants.  # noqa: E501

        Participant display name.  This returns an empty string value if the account calling the API is a BAA account.  # noqa: E501

        :return: The name of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20066Participants.

        Participant display name.  This returns an empty string value if the account calling the API is a BAA account.  # noqa: E501

        :param name: The name of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registrant_id(self):
        """Gets the registrant_id of this InlineResponse20066Participants.  # noqa: E501

        Unique identifier of the registrant. This field is only returned if you entered &quot;registrant_id&quot; as the value of `include_fields` query parameter.  # noqa: E501

        :return: The registrant_id of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._registrant_id

    @registrant_id.setter
    def registrant_id(self, registrant_id):
        """Sets the registrant_id of this InlineResponse20066Participants.

        Unique identifier of the registrant. This field is only returned if you entered &quot;registrant_id&quot; as the value of `include_fields` query parameter.  # noqa: E501

        :param registrant_id: The registrant_id of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._registrant_id = registrant_id

    @property
    def status(self):
        """Gets the status of this InlineResponse20066Participants.  # noqa: E501

        The participant's status.  * `in_meeting` - In a meeting.  * `in_waiting_room` - In a waiting room.  # noqa: E501

        :return: The status of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20066Participants.

        The participant's status.  * `in_meeting` - In a meeting.  * `in_waiting_room` - In a waiting room.  # noqa: E501

        :param status: The status of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_meeting", "in_waiting_room"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_email(self):
        """Gets the user_email of this InlineResponse20066Participants.  # noqa: E501

        Participant email.  If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details. This returns an empty string value if the account calling the API is a BAA account.  # noqa: E501

        :return: The user_email of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this InlineResponse20066Participants.

        Participant email.  If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details. This returns an empty string value if the account calling the API is a BAA account.  # noqa: E501

        :param user_email: The user_email of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20066Participants.  # noqa: E501

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :return: The user_id of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20066Participants.

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def bo_mtg_id(self):
        """Gets the bo_mtg_id of this InlineResponse20066Participants.  # noqa: E501

        The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.  # noqa: E501

        :return: The bo_mtg_id of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._bo_mtg_id

    @bo_mtg_id.setter
    def bo_mtg_id(self, bo_mtg_id):
        """Sets the bo_mtg_id of this InlineResponse20066Participants.

        The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.  # noqa: E501

        :param bo_mtg_id: The bo_mtg_id of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._bo_mtg_id = bo_mtg_id

    @property
    def participant_user_id(self):
        """Gets the participant_user_id of this InlineResponse20066Participants.  # noqa: E501

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.  # noqa: E501

        :return: The participant_user_id of this InlineResponse20066Participants.  # noqa: E501
        :rtype: str
        """
        return self._participant_user_id

    @participant_user_id.setter
    def participant_user_id(self, participant_user_id):
        """Sets the participant_user_id of this InlineResponse20066Participants.

        The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.  # noqa: E501

        :param participant_user_id: The participant_user_id of this InlineResponse20066Participants.  # noqa: E501
        :type: str
        """

        self._participant_user_id = participant_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20066Participants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20066Participants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
