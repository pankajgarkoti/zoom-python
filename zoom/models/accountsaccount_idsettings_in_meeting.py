# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsInMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_guest_join': 'bool',
        'allow_host_to_enable_focus_mode': 'bool',
        'allow_live_streaming': 'bool',
        'allow_users_to_delete_messages_in_meeting_chat': 'bool',
        'allow_participants_chat_with': 'int',
        'allow_participants_to_rename': 'bool',
        'allow_show_zoom_windows': 'bool',
        'allow_users_save_chats': 'int',
        'annotation': 'bool',
        'anonymous_question_answer': 'bool',
        'attendee_on_hold': 'bool',
        'attention_mode_focus_mode': 'bool',
        'auto_answer': 'bool',
        'auto_saving_chat': 'bool',
        'breakout_room': 'bool',
        'breakout_room_schedule': 'bool',
        'chat': 'bool',
        'meeting_question_answer': 'bool',
        'closed_caption': 'bool',
        'closed_captioning': 'AccountsaccountIdsettingsInMeetingClosedCaptioning',
        'co_host': 'bool',
        'custom_data_center_regions': 'bool',
        'custom_live_streaming_service': 'bool',
        'custom_service_instructions': 'str',
        'meeting_data_transit_and_residency_method': 'str',
        'data_center_regions': 'list[str]',
        'disable_screen_sharing_for_host_meetings': 'bool',
        'disable_screen_sharing_for_in_meeting_guests': 'bool',
        'dscp_audio': 'int',
        'dscp_marking': 'bool',
        'dscp_video': 'int',
        'dscp_dual': 'bool',
        'e2e_encryption': 'bool',
        'entry_exit_chime': 'str',
        'far_end_camera_control': 'bool',
        'feedback': 'bool',
        'file_transfer': 'bool',
        'group_hd': 'bool',
        'webinar_group_hd': 'bool',
        'join_from_desktop': 'bool',
        'join_from_mobile': 'bool',
        'auto_generated_translation': 'AccountsaccountIdsettingsInMeetingAutoGeneratedTranslation',
        'language_interpretation': 'AccountsaccountIdsettingsInMeetingLanguageInterpretation',
        'sign_language_interpretation': 'AccountsaccountIdsettingsInMeetingSignLanguageInterpretation',
        'live_streaming_facebook': 'bool',
        'live_streaming_youtube': 'bool',
        'manual_captioning': 'AccountsaccountIdsettingsInMeetingManualCaptioning',
        'meeting_polling': 'AccountsaccountIdsettingsInMeetingMeetingPolling',
        'meeting_reactions': 'bool',
        'meeting_reactions_emojis': 'str',
        'allow_host_panelists_to_use_audible_clap': 'bool',
        'webinar_reactions': 'bool',
        'meeting_survey': 'bool',
        'original_audio': 'bool',
        'p2p_connetion': 'bool',
        'p2p_ports': 'bool',
        'polling': 'bool',
        'ports_range': 'str',
        'post_meeting_feedback': 'bool',
        'private_chat': 'bool',
        'record_play_own_voice': 'bool',
        'remote_control': 'bool',
        'non_verbal_feedback': 'bool',
        'remote_support': 'bool',
        'request_permission_to_unmute_participants': 'bool',
        'screen_sharing': 'bool',
        'sending_default_email_invites': 'bool',
        'show_a_join_from_your_browser_link': 'bool',
        'show_meeting_control_toolbar': 'bool',
        'slide_control': 'bool',
        'stereo_audio': 'bool',
        'use_html_format_email': 'bool',
        'virtual_background': 'bool',
        'virtual_background_settings': 'AccountsaccountIdsettingsInMeetingVirtualBackgroundSettings',
        'watermark': 'bool',
        'webinar_chat': 'AccountsaccountIdsettingsInMeetingWebinarChat',
        'webinar_live_streaming': 'AccountsaccountIdsettingsInMeetingWebinarLiveStreaming',
        'webinar_polling': 'AccountsaccountIdsettingsInMeetingWebinarPolling',
        'webinar_question_answer': 'bool',
        'webinar_survey': 'bool',
        'whiteboard': 'bool',
        'who_can_share_screen': 'str',
        'who_can_share_screen_when_someone_is_sharing': 'str',
        'participants_share_simultaneously': 'str',
        'workplace_by_facebook': 'bool',
        'transfer_meetings_between_devices': 'bool'
    }

    attribute_map = {
        'alert_guest_join': 'alert_guest_join',
        'allow_host_to_enable_focus_mode': 'allow_host_to_enable_focus_mode',
        'allow_live_streaming': 'allow_live_streaming',
        'allow_users_to_delete_messages_in_meeting_chat': 'allow_users_to_delete_messages_in_meeting_chat',
        'allow_participants_chat_with': 'allow_participants_chat_with',
        'allow_participants_to_rename': 'allow_participants_to_rename',
        'allow_show_zoom_windows': 'allow_show_zoom_windows',
        'allow_users_save_chats': 'allow_users_save_chats',
        'annotation': 'annotation',
        'anonymous_question_answer': 'anonymous_question_answer',
        'attendee_on_hold': 'attendee_on_hold',
        'attention_mode_focus_mode': 'attention_mode_focus_mode',
        'auto_answer': 'auto_answer',
        'auto_saving_chat': 'auto_saving_chat',
        'breakout_room': 'breakout_room',
        'breakout_room_schedule': 'breakout_room_schedule',
        'chat': 'chat',
        'meeting_question_answer': 'meeting_question_answer',
        'closed_caption': 'closed_caption',
        'closed_captioning': 'closed_captioning',
        'co_host': 'co_host',
        'custom_data_center_regions': 'custom_data_center_regions',
        'custom_live_streaming_service': 'custom_live_streaming_service',
        'custom_service_instructions': 'custom_service_instructions',
        'meeting_data_transit_and_residency_method': 'meeting_data_transit_and_residency_method',
        'data_center_regions': 'data_center_regions',
        'disable_screen_sharing_for_host_meetings': 'disable_screen_sharing_for_host_meetings',
        'disable_screen_sharing_for_in_meeting_guests': 'disable_screen_sharing_for_in_meeting_guests',
        'dscp_audio': 'dscp_audio',
        'dscp_marking': 'dscp_marking',
        'dscp_video': 'dscp_video',
        'dscp_dual': 'dscp_dual',
        'e2e_encryption': 'e2e_encryption',
        'entry_exit_chime': 'entry_exit_chime',
        'far_end_camera_control': 'far_end_camera_control',
        'feedback': 'feedback',
        'file_transfer': 'file_transfer',
        'group_hd': 'group_hd',
        'webinar_group_hd': 'webinar_group_hd',
        'join_from_desktop': 'join_from_desktop',
        'join_from_mobile': 'join_from_mobile',
        'auto_generated_translation': 'auto_generated_translation',
        'language_interpretation': 'language_interpretation',
        'sign_language_interpretation': 'sign_language_interpretation',
        'live_streaming_facebook': 'live_streaming_facebook',
        'live_streaming_youtube': 'live_streaming_youtube',
        'manual_captioning': 'manual_captioning',
        'meeting_polling': 'meeting_polling',
        'meeting_reactions': 'meeting_reactions',
        'meeting_reactions_emojis': 'meeting_reactions_emojis',
        'allow_host_panelists_to_use_audible_clap': 'allow_host_panelists_to_use_audible_clap',
        'webinar_reactions': 'webinar_reactions',
        'meeting_survey': 'meeting_survey',
        'original_audio': 'original_audio',
        'p2p_connetion': 'p2p_connetion',
        'p2p_ports': 'p2p_ports',
        'polling': 'polling',
        'ports_range': 'ports_range',
        'post_meeting_feedback': 'post_meeting_feedback',
        'private_chat': 'private_chat',
        'record_play_own_voice': 'record_play_own_voice',
        'remote_control': 'remote_control',
        'non_verbal_feedback': 'non_verbal_feedback',
        'remote_support': 'remote_support',
        'request_permission_to_unmute_participants': 'request_permission_to_unmute_participants',
        'screen_sharing': 'screen_sharing',
        'sending_default_email_invites': 'sending_default_email_invites',
        'show_a_join_from_your_browser_link': 'show_a_join_from_your_browser_link',
        'show_meeting_control_toolbar': 'show_meeting_control_toolbar',
        'slide_control': 'slide_control',
        'stereo_audio': 'stereo_audio',
        'use_html_format_email': 'use_html_format_email',
        'virtual_background': 'virtual_background',
        'virtual_background_settings': 'virtual_background_settings',
        'watermark': 'watermark',
        'webinar_chat': 'webinar_chat',
        'webinar_live_streaming': 'webinar_live_streaming',
        'webinar_polling': 'webinar_polling',
        'webinar_question_answer': 'webinar_question_answer',
        'webinar_survey': 'webinar_survey',
        'whiteboard': 'whiteboard',
        'who_can_share_screen': 'who_can_share_screen',
        'who_can_share_screen_when_someone_is_sharing': 'who_can_share_screen_when_someone_is_sharing',
        'participants_share_simultaneously': 'participants_share_simultaneously',
        'workplace_by_facebook': 'workplace_by_facebook',
        'transfer_meetings_between_devices': 'transfer_meetings_between_devices'
    }

    def __init__(self, alert_guest_join=None, allow_host_to_enable_focus_mode=None, allow_live_streaming=None, allow_users_to_delete_messages_in_meeting_chat=None, allow_participants_chat_with=None, allow_participants_to_rename=None, allow_show_zoom_windows=None, allow_users_save_chats=None, annotation=None, anonymous_question_answer=None, attendee_on_hold=False, attention_mode_focus_mode=False, auto_answer=None, auto_saving_chat=None, breakout_room=None, breakout_room_schedule=None, chat=None, meeting_question_answer=None, closed_caption=None, closed_captioning=None, co_host=None, custom_data_center_regions=None, custom_live_streaming_service=None, custom_service_instructions=None, meeting_data_transit_and_residency_method=None, data_center_regions=None, disable_screen_sharing_for_host_meetings=None, disable_screen_sharing_for_in_meeting_guests=None, dscp_audio=56, dscp_marking=None, dscp_video=40, dscp_dual=None, e2e_encryption=None, entry_exit_chime=None, far_end_camera_control=None, feedback=None, file_transfer=None, group_hd=None, webinar_group_hd=None, join_from_desktop=None, join_from_mobile=None, auto_generated_translation=None, language_interpretation=None, sign_language_interpretation=None, live_streaming_facebook=None, live_streaming_youtube=None, manual_captioning=None, meeting_polling=None, meeting_reactions=None, meeting_reactions_emojis=None, allow_host_panelists_to_use_audible_clap=None, webinar_reactions=None, meeting_survey=None, original_audio=None, p2p_connetion=None, p2p_ports=None, polling=None, ports_range='', post_meeting_feedback=None, private_chat=None, record_play_own_voice=None, remote_control=None, non_verbal_feedback=False, remote_support=False, request_permission_to_unmute_participants=None, screen_sharing=None, sending_default_email_invites=None, show_a_join_from_your_browser_link=None, show_meeting_control_toolbar=None, slide_control=None, stereo_audio=None, use_html_format_email=None, virtual_background=None, virtual_background_settings=None, watermark=None, webinar_chat=None, webinar_live_streaming=None, webinar_polling=None, webinar_question_answer=None, webinar_survey=None, whiteboard=None, who_can_share_screen=None, who_can_share_screen_when_someone_is_sharing=None, participants_share_simultaneously=None, workplace_by_facebook=None, transfer_meetings_between_devices=None):  # noqa: E501
        """AccountsaccountIdsettingsInMeeting - a model defined in Swagger"""  # noqa: E501
        self._alert_guest_join = None
        self._allow_host_to_enable_focus_mode = None
        self._allow_live_streaming = None
        self._allow_users_to_delete_messages_in_meeting_chat = None
        self._allow_participants_chat_with = None
        self._allow_participants_to_rename = None
        self._allow_show_zoom_windows = None
        self._allow_users_save_chats = None
        self._annotation = None
        self._anonymous_question_answer = None
        self._attendee_on_hold = None
        self._attention_mode_focus_mode = None
        self._auto_answer = None
        self._auto_saving_chat = None
        self._breakout_room = None
        self._breakout_room_schedule = None
        self._chat = None
        self._meeting_question_answer = None
        self._closed_caption = None
        self._closed_captioning = None
        self._co_host = None
        self._custom_data_center_regions = None
        self._custom_live_streaming_service = None
        self._custom_service_instructions = None
        self._meeting_data_transit_and_residency_method = None
        self._data_center_regions = None
        self._disable_screen_sharing_for_host_meetings = None
        self._disable_screen_sharing_for_in_meeting_guests = None
        self._dscp_audio = None
        self._dscp_marking = None
        self._dscp_video = None
        self._dscp_dual = None
        self._e2e_encryption = None
        self._entry_exit_chime = None
        self._far_end_camera_control = None
        self._feedback = None
        self._file_transfer = None
        self._group_hd = None
        self._webinar_group_hd = None
        self._join_from_desktop = None
        self._join_from_mobile = None
        self._auto_generated_translation = None
        self._language_interpretation = None
        self._sign_language_interpretation = None
        self._live_streaming_facebook = None
        self._live_streaming_youtube = None
        self._manual_captioning = None
        self._meeting_polling = None
        self._meeting_reactions = None
        self._meeting_reactions_emojis = None
        self._allow_host_panelists_to_use_audible_clap = None
        self._webinar_reactions = None
        self._meeting_survey = None
        self._original_audio = None
        self._p2p_connetion = None
        self._p2p_ports = None
        self._polling = None
        self._ports_range = None
        self._post_meeting_feedback = None
        self._private_chat = None
        self._record_play_own_voice = None
        self._remote_control = None
        self._non_verbal_feedback = None
        self._remote_support = None
        self._request_permission_to_unmute_participants = None
        self._screen_sharing = None
        self._sending_default_email_invites = None
        self._show_a_join_from_your_browser_link = None
        self._show_meeting_control_toolbar = None
        self._slide_control = None
        self._stereo_audio = None
        self._use_html_format_email = None
        self._virtual_background = None
        self._virtual_background_settings = None
        self._watermark = None
        self._webinar_chat = None
        self._webinar_live_streaming = None
        self._webinar_polling = None
        self._webinar_question_answer = None
        self._webinar_survey = None
        self._whiteboard = None
        self._who_can_share_screen = None
        self._who_can_share_screen_when_someone_is_sharing = None
        self._participants_share_simultaneously = None
        self._workplace_by_facebook = None
        self._transfer_meetings_between_devices = None
        self.discriminator = None
        if alert_guest_join is not None:
            self.alert_guest_join = alert_guest_join
        if allow_host_to_enable_focus_mode is not None:
            self.allow_host_to_enable_focus_mode = allow_host_to_enable_focus_mode
        if allow_live_streaming is not None:
            self.allow_live_streaming = allow_live_streaming
        if allow_users_to_delete_messages_in_meeting_chat is not None:
            self.allow_users_to_delete_messages_in_meeting_chat = allow_users_to_delete_messages_in_meeting_chat
        if allow_participants_chat_with is not None:
            self.allow_participants_chat_with = allow_participants_chat_with
        if allow_participants_to_rename is not None:
            self.allow_participants_to_rename = allow_participants_to_rename
        if allow_show_zoom_windows is not None:
            self.allow_show_zoom_windows = allow_show_zoom_windows
        if allow_users_save_chats is not None:
            self.allow_users_save_chats = allow_users_save_chats
        if annotation is not None:
            self.annotation = annotation
        if anonymous_question_answer is not None:
            self.anonymous_question_answer = anonymous_question_answer
        if attendee_on_hold is not None:
            self.attendee_on_hold = attendee_on_hold
        if attention_mode_focus_mode is not None:
            self.attention_mode_focus_mode = attention_mode_focus_mode
        if auto_answer is not None:
            self.auto_answer = auto_answer
        if auto_saving_chat is not None:
            self.auto_saving_chat = auto_saving_chat
        if breakout_room is not None:
            self.breakout_room = breakout_room
        if breakout_room_schedule is not None:
            self.breakout_room_schedule = breakout_room_schedule
        if chat is not None:
            self.chat = chat
        if meeting_question_answer is not None:
            self.meeting_question_answer = meeting_question_answer
        if closed_caption is not None:
            self.closed_caption = closed_caption
        if closed_captioning is not None:
            self.closed_captioning = closed_captioning
        if co_host is not None:
            self.co_host = co_host
        if custom_data_center_regions is not None:
            self.custom_data_center_regions = custom_data_center_regions
        if custom_live_streaming_service is not None:
            self.custom_live_streaming_service = custom_live_streaming_service
        if custom_service_instructions is not None:
            self.custom_service_instructions = custom_service_instructions
        if meeting_data_transit_and_residency_method is not None:
            self.meeting_data_transit_and_residency_method = meeting_data_transit_and_residency_method
        if data_center_regions is not None:
            self.data_center_regions = data_center_regions
        if disable_screen_sharing_for_host_meetings is not None:
            self.disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings
        if disable_screen_sharing_for_in_meeting_guests is not None:
            self.disable_screen_sharing_for_in_meeting_guests = disable_screen_sharing_for_in_meeting_guests
        if dscp_audio is not None:
            self.dscp_audio = dscp_audio
        if dscp_marking is not None:
            self.dscp_marking = dscp_marking
        if dscp_video is not None:
            self.dscp_video = dscp_video
        if dscp_dual is not None:
            self.dscp_dual = dscp_dual
        if e2e_encryption is not None:
            self.e2e_encryption = e2e_encryption
        if entry_exit_chime is not None:
            self.entry_exit_chime = entry_exit_chime
        if far_end_camera_control is not None:
            self.far_end_camera_control = far_end_camera_control
        if feedback is not None:
            self.feedback = feedback
        if file_transfer is not None:
            self.file_transfer = file_transfer
        if group_hd is not None:
            self.group_hd = group_hd
        if webinar_group_hd is not None:
            self.webinar_group_hd = webinar_group_hd
        if join_from_desktop is not None:
            self.join_from_desktop = join_from_desktop
        if join_from_mobile is not None:
            self.join_from_mobile = join_from_mobile
        if auto_generated_translation is not None:
            self.auto_generated_translation = auto_generated_translation
        if language_interpretation is not None:
            self.language_interpretation = language_interpretation
        if sign_language_interpretation is not None:
            self.sign_language_interpretation = sign_language_interpretation
        if live_streaming_facebook is not None:
            self.live_streaming_facebook = live_streaming_facebook
        if live_streaming_youtube is not None:
            self.live_streaming_youtube = live_streaming_youtube
        if manual_captioning is not None:
            self.manual_captioning = manual_captioning
        if meeting_polling is not None:
            self.meeting_polling = meeting_polling
        if meeting_reactions is not None:
            self.meeting_reactions = meeting_reactions
        if meeting_reactions_emojis is not None:
            self.meeting_reactions_emojis = meeting_reactions_emojis
        if allow_host_panelists_to_use_audible_clap is not None:
            self.allow_host_panelists_to_use_audible_clap = allow_host_panelists_to_use_audible_clap
        if webinar_reactions is not None:
            self.webinar_reactions = webinar_reactions
        if meeting_survey is not None:
            self.meeting_survey = meeting_survey
        if original_audio is not None:
            self.original_audio = original_audio
        if p2p_connetion is not None:
            self.p2p_connetion = p2p_connetion
        if p2p_ports is not None:
            self.p2p_ports = p2p_ports
        if polling is not None:
            self.polling = polling
        if ports_range is not None:
            self.ports_range = ports_range
        if post_meeting_feedback is not None:
            self.post_meeting_feedback = post_meeting_feedback
        if private_chat is not None:
            self.private_chat = private_chat
        if record_play_own_voice is not None:
            self.record_play_own_voice = record_play_own_voice
        if remote_control is not None:
            self.remote_control = remote_control
        if non_verbal_feedback is not None:
            self.non_verbal_feedback = non_verbal_feedback
        if remote_support is not None:
            self.remote_support = remote_support
        if request_permission_to_unmute_participants is not None:
            self.request_permission_to_unmute_participants = request_permission_to_unmute_participants
        if screen_sharing is not None:
            self.screen_sharing = screen_sharing
        if sending_default_email_invites is not None:
            self.sending_default_email_invites = sending_default_email_invites
        if show_a_join_from_your_browser_link is not None:
            self.show_a_join_from_your_browser_link = show_a_join_from_your_browser_link
        if show_meeting_control_toolbar is not None:
            self.show_meeting_control_toolbar = show_meeting_control_toolbar
        if slide_control is not None:
            self.slide_control = slide_control
        if stereo_audio is not None:
            self.stereo_audio = stereo_audio
        if use_html_format_email is not None:
            self.use_html_format_email = use_html_format_email
        if virtual_background is not None:
            self.virtual_background = virtual_background
        if virtual_background_settings is not None:
            self.virtual_background_settings = virtual_background_settings
        if watermark is not None:
            self.watermark = watermark
        if webinar_chat is not None:
            self.webinar_chat = webinar_chat
        if webinar_live_streaming is not None:
            self.webinar_live_streaming = webinar_live_streaming
        if webinar_polling is not None:
            self.webinar_polling = webinar_polling
        if webinar_question_answer is not None:
            self.webinar_question_answer = webinar_question_answer
        if webinar_survey is not None:
            self.webinar_survey = webinar_survey
        if whiteboard is not None:
            self.whiteboard = whiteboard
        if who_can_share_screen is not None:
            self.who_can_share_screen = who_can_share_screen
        if who_can_share_screen_when_someone_is_sharing is not None:
            self.who_can_share_screen_when_someone_is_sharing = who_can_share_screen_when_someone_is_sharing
        if participants_share_simultaneously is not None:
            self.participants_share_simultaneously = participants_share_simultaneously
        if workplace_by_facebook is not None:
            self.workplace_by_facebook = workplace_by_facebook
        if transfer_meetings_between_devices is not None:
            self.transfer_meetings_between_devices = transfer_meetings_between_devices

    @property
    def alert_guest_join(self):
        """Gets the alert_guest_join of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable [guest participant](https://support.zoom.us/hc/en-us/articles/115004791123-Identifying-guests-in-the-meeting-webinar) alerts.  # noqa: E501

        :return: The alert_guest_join of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._alert_guest_join

    @alert_guest_join.setter
    def alert_guest_join(self, alert_guest_join):
        """Sets the alert_guest_join of this AccountsaccountIdsettingsInMeeting.

        Whether to enable [guest participant](https://support.zoom.us/hc/en-us/articles/115004791123-Identifying-guests-in-the-meeting-webinar) alerts.  # noqa: E501

        :param alert_guest_join: The alert_guest_join of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._alert_guest_join = alert_guest_join

    @property
    def allow_host_to_enable_focus_mode(self):
        """Gets the allow_host_to_enable_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether the host can enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults to `null`.  # noqa: E501

        :return: The allow_host_to_enable_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_to_enable_focus_mode

    @allow_host_to_enable_focus_mode.setter
    def allow_host_to_enable_focus_mode(self, allow_host_to_enable_focus_mode):
        """Sets the allow_host_to_enable_focus_mode of this AccountsaccountIdsettingsInMeeting.

        Whether the host can enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults to `null`.  # noqa: E501

        :param allow_host_to_enable_focus_mode: The allow_host_to_enable_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_host_to_enable_focus_mode = allow_host_to_enable_focus_mode

    @property
    def allow_live_streaming(self):
        """Gets the allow_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow livestreaming.  # noqa: E501

        :return: The allow_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_live_streaming

    @allow_live_streaming.setter
    def allow_live_streaming(self, allow_live_streaming):
        """Sets the allow_live_streaming of this AccountsaccountIdsettingsInMeeting.

        Whether to allow livestreaming.  # noqa: E501

        :param allow_live_streaming: The allow_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_live_streaming = allow_live_streaming

    @property
    def allow_users_to_delete_messages_in_meeting_chat(self):
        """Gets the allow_users_to_delete_messages_in_meeting_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        If the value of this field is set to `true`,  allow users to delete messages in the in-meeting chat.   # noqa: E501

        :return: The allow_users_to_delete_messages_in_meeting_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_users_to_delete_messages_in_meeting_chat

    @allow_users_to_delete_messages_in_meeting_chat.setter
    def allow_users_to_delete_messages_in_meeting_chat(self, allow_users_to_delete_messages_in_meeting_chat):
        """Sets the allow_users_to_delete_messages_in_meeting_chat of this AccountsaccountIdsettingsInMeeting.

        If the value of this field is set to `true`,  allow users to delete messages in the in-meeting chat.   # noqa: E501

        :param allow_users_to_delete_messages_in_meeting_chat: The allow_users_to_delete_messages_in_meeting_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_users_to_delete_messages_in_meeting_chat = allow_users_to_delete_messages_in_meeting_chat

    @property
    def allow_participants_chat_with(self):
        """Gets the allow_participants_chat_with of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow participants to only chat with certain groups. * `1` - The participant cannot use chat.  * `2` - Host and co-hosts only.   * `3` - The participant can chat with other participants publicly.  * `4` - The participant can chat with other participants publicly and privately.    **Note:** This setting is only available with client versions 5.7.3 and above.  # noqa: E501

        :return: The allow_participants_chat_with of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: int
        """
        return self._allow_participants_chat_with

    @allow_participants_chat_with.setter
    def allow_participants_chat_with(self, allow_participants_chat_with):
        """Sets the allow_participants_chat_with of this AccountsaccountIdsettingsInMeeting.

        Whether to allow participants to only chat with certain groups. * `1` - The participant cannot use chat.  * `2` - Host and co-hosts only.   * `3` - The participant can chat with other participants publicly.  * `4` - The participant can chat with other participants publicly and privately.    **Note:** This setting is only available with client versions 5.7.3 and above.  # noqa: E501

        :param allow_participants_chat_with: The allow_participants_chat_with of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if allow_participants_chat_with not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_participants_chat_with` ({0}), must be one of {1}"  # noqa: E501
                .format(allow_participants_chat_with, allowed_values)
            )

        self._allow_participants_chat_with = allow_participants_chat_with

    @property
    def allow_participants_to_rename(self):
        """Gets the allow_participants_to_rename of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow meeting participants to rename themselves during a meeting.  # noqa: E501

        :return: The allow_participants_to_rename of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_participants_to_rename

    @allow_participants_to_rename.setter
    def allow_participants_to_rename(self, allow_participants_to_rename):
        """Sets the allow_participants_to_rename of this AccountsaccountIdsettingsInMeeting.

        Whether to allow meeting participants to rename themselves during a meeting.  # noqa: E501

        :param allow_participants_to_rename: The allow_participants_to_rename of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_participants_to_rename = allow_participants_to_rename

    @property
    def allow_show_zoom_windows(self):
        """Gets the allow_show_zoom_windows of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Show Zoom windows during screen share**](https://support.zoom.us/hc/en-us/articles/360061383571-Showing-Zoom-windows-during-screen-share) feature.  # noqa: E501

        :return: The allow_show_zoom_windows of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_show_zoom_windows

    @allow_show_zoom_windows.setter
    def allow_show_zoom_windows(self, allow_show_zoom_windows):
        """Sets the allow_show_zoom_windows of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Show Zoom windows during screen share**](https://support.zoom.us/hc/en-us/articles/360061383571-Showing-Zoom-windows-during-screen-share) feature.  # noqa: E501

        :param allow_show_zoom_windows: The allow_show_zoom_windows of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_show_zoom_windows = allow_show_zoom_windows

    @property
    def allow_users_save_chats(self):
        """Gets the allow_users_save_chats of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow participants to save meeting chats. * `1` - Participants cannot save meeting chats.  * `2` - Participants can only save host and co-host meeting chats.  * `3` - Participants can save all meeting chats.  # noqa: E501

        :return: The allow_users_save_chats of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: int
        """
        return self._allow_users_save_chats

    @allow_users_save_chats.setter
    def allow_users_save_chats(self, allow_users_save_chats):
        """Sets the allow_users_save_chats of this AccountsaccountIdsettingsInMeeting.

        Whether to allow participants to save meeting chats. * `1` - Participants cannot save meeting chats.  * `2` - Participants can only save host and co-host meeting chats.  * `3` - Participants can save all meeting chats.  # noqa: E501

        :param allow_users_save_chats: The allow_users_save_chats of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if allow_users_save_chats not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_users_save_chats` ({0}), must be one of {1}"  # noqa: E501
                .format(allow_users_save_chats, allowed_values)
            )

        self._allow_users_save_chats = allow_users_save_chats

    @property
    def annotation(self):
        """Gets the annotation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow meeting participants to use the [annotation tools](https://support.zoom.us/hc/en-us/articles/115005706806).  # noqa: E501

        :return: The annotation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this AccountsaccountIdsettingsInMeeting.

        Whether to allow meeting participants to use the [annotation tools](https://support.zoom.us/hc/en-us/articles/115005706806).  # noqa: E501

        :param annotation: The annotation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._annotation = annotation

    @property
    def anonymous_question_answer(self):
        """Gets the anonymous_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable anonymous Q&amp;A.  # noqa: E501

        :return: The anonymous_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous_question_answer

    @anonymous_question_answer.setter
    def anonymous_question_answer(self, anonymous_question_answer):
        """Sets the anonymous_question_answer of this AccountsaccountIdsettingsInMeeting.

        Whether to enable anonymous Q&amp;A.  # noqa: E501

        :param anonymous_question_answer: The anonymous_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._anonymous_question_answer = anonymous_question_answer

    @property
    def attendee_on_hold(self):
        """Gets the attendee_on_hold of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow the host to put an attendee on hold. This value defaults to `false`. **This field has been deprecated and is no longer supported.**  # noqa: E501

        :return: The attendee_on_hold of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._attendee_on_hold

    @attendee_on_hold.setter
    def attendee_on_hold(self, attendee_on_hold):
        """Sets the attendee_on_hold of this AccountsaccountIdsettingsInMeeting.

        Whether to allow the host to put an attendee on hold. This value defaults to `false`. **This field has been deprecated and is no longer supported.**  # noqa: E501

        :param attendee_on_hold: The attendee_on_hold of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._attendee_on_hold = attendee_on_hold

    @property
    def attention_mode_focus_mode(self):
        """Gets the attention_mode_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode). When enabled, this feature only displays the host and co-hosts' video and profile pictures during a meeting.    This value defaults to `false`.  # noqa: E501

        :return: The attention_mode_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._attention_mode_focus_mode

    @attention_mode_focus_mode.setter
    def attention_mode_focus_mode(self, attention_mode_focus_mode):
        """Sets the attention_mode_focus_mode of this AccountsaccountIdsettingsInMeeting.

        Whether to enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode). When enabled, this feature only displays the host and co-hosts' video and profile pictures during a meeting.    This value defaults to `false`.  # noqa: E501

        :param attention_mode_focus_mode: The attention_mode_focus_mode of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._attention_mode_focus_mode = attention_mode_focus_mode

    @property
    def auto_answer(self):
        """Gets the auto_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Auto-answer group in chat**](https://support.zoom.us/hc/en-us/articles/203736135-Auto-answering-invitations-to-meetings) setting. Calls from these group members will be answered automatically.  # noqa: E501

        :return: The auto_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_answer

    @auto_answer.setter
    def auto_answer(self, auto_answer):
        """Sets the auto_answer of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Auto-answer group in chat**](https://support.zoom.us/hc/en-us/articles/203736135-Auto-answering-invitations-to-meetings) setting. Calls from these group members will be answered automatically.  # noqa: E501

        :param auto_answer: The auto_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_answer = auto_answer

    @property
    def auto_saving_chat(self):
        """Gets the auto_saving_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to automatically save all in-meeting chats.  # noqa: E501

        :return: The auto_saving_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_saving_chat

    @auto_saving_chat.setter
    def auto_saving_chat(self, auto_saving_chat):
        """Sets the auto_saving_chat of this AccountsaccountIdsettingsInMeeting.

        Whether to automatically save all in-meeting chats.  # noqa: E501

        :param auto_saving_chat: The auto_saving_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_saving_chat = auto_saving_chat

    @property
    def breakout_room(self):
        """Gets the breakout_room of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow the meeting host to split meeting participants into separate breakout rooms.  # noqa: E501

        :return: The breakout_room of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._breakout_room

    @breakout_room.setter
    def breakout_room(self, breakout_room):
        """Sets the breakout_room of this AccountsaccountIdsettingsInMeeting.

        Whether to allow the meeting host to split meeting participants into separate breakout rooms.  # noqa: E501

        :param breakout_room: The breakout_room of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._breakout_room = breakout_room

    @property
    def breakout_room_schedule(self):
        """Gets the breakout_room_schedule of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether the host can assign participants to breakout rooms when scheduling. This feature is **only** available in version 4.5.0 or higher.  # noqa: E501

        :return: The breakout_room_schedule of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._breakout_room_schedule

    @breakout_room_schedule.setter
    def breakout_room_schedule(self, breakout_room_schedule):
        """Sets the breakout_room_schedule of this AccountsaccountIdsettingsInMeeting.

        Whether the host can assign participants to breakout rooms when scheduling. This feature is **only** available in version 4.5.0 or higher.  # noqa: E501

        :param breakout_room_schedule: The breakout_room_schedule of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._breakout_room_schedule = breakout_room_schedule

    @property
    def chat(self):
        """Gets the chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable chat during meeting for all participants.  # noqa: E501

        :return: The chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this AccountsaccountIdsettingsInMeeting.

        Whether to enable chat during meeting for all participants.  # noqa: E501

        :param chat: The chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._chat = chat

    @property
    def meeting_question_answer(self):
        """Gets the meeting_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Allow participants to ask questions for the host and participants to answer.  # noqa: E501

        :return: The meeting_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_question_answer

    @meeting_question_answer.setter
    def meeting_question_answer(self, meeting_question_answer):
        """Sets the meeting_question_answer of this AccountsaccountIdsettingsInMeeting.

        Allow participants to ask questions for the host and participants to answer.  # noqa: E501

        :param meeting_question_answer: The meeting_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_question_answer = meeting_question_answer

    @property
    def closed_caption(self):
        """Gets the closed_caption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable closed captions.  # noqa: E501

        :return: The closed_caption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._closed_caption

    @closed_caption.setter
    def closed_caption(self, closed_caption):
        """Sets the closed_caption of this AccountsaccountIdsettingsInMeeting.

        Whether to enable closed captions.  # noqa: E501

        :param closed_caption: The closed_caption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._closed_caption = closed_caption

    @property
    def closed_captioning(self):
        """Gets the closed_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The closed_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingClosedCaptioning
        """
        return self._closed_captioning

    @closed_captioning.setter
    def closed_captioning(self, closed_captioning):
        """Sets the closed_captioning of this AccountsaccountIdsettingsInMeeting.


        :param closed_captioning: The closed_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingClosedCaptioning
        """

        self._closed_captioning = closed_captioning

    @property
    def co_host(self):
        """Gets the co_host of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow the host to add co-hosts.  # noqa: E501

        :return: The co_host of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._co_host

    @co_host.setter
    def co_host(self, co_host):
        """Sets the co_host of this AccountsaccountIdsettingsInMeeting.

        Whether to allow the host to add co-hosts.  # noqa: E501

        :param co_host: The co_host of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._co_host = co_host

    @property
    def custom_data_center_regions(self):
        """Gets the custom_data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to use custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-meetings-webinars).  * `true` - Users can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting real-time meeting traffic. The data center regions can be provided in the `data_center_regions` field.  * `false` - Only use the default data center regions.  # noqa: E501

        :return: The custom_data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._custom_data_center_regions

    @custom_data_center_regions.setter
    def custom_data_center_regions(self, custom_data_center_regions):
        """Sets the custom_data_center_regions of this AccountsaccountIdsettingsInMeeting.

        Whether to use custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-meetings-webinars).  * `true` - Users can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting real-time meeting traffic. The data center regions can be provided in the `data_center_regions` field.  * `false` - Only use the default data center regions.  # noqa: E501

        :param custom_data_center_regions: The custom_data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._custom_data_center_regions = custom_data_center_regions

    @property
    def custom_live_streaming_service(self):
        """Gets the custom_live_streaming_service of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow custom livestreaming.  # noqa: E501

        :return: The custom_live_streaming_service of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._custom_live_streaming_service

    @custom_live_streaming_service.setter
    def custom_live_streaming_service(self, custom_live_streaming_service):
        """Sets the custom_live_streaming_service of this AccountsaccountIdsettingsInMeeting.

        Whether to allow custom livestreaming.  # noqa: E501

        :param custom_live_streaming_service: The custom_live_streaming_service of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._custom_live_streaming_service = custom_live_streaming_service

    @property
    def custom_service_instructions(self):
        """Gets the custom_service_instructions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        The specific instructions to configure a custom livestream.  # noqa: E501

        :return: The custom_service_instructions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._custom_service_instructions

    @custom_service_instructions.setter
    def custom_service_instructions(self, custom_service_instructions):
        """Sets the custom_service_instructions of this AccountsaccountIdsettingsInMeeting.

        The specific instructions to configure a custom livestream.  # noqa: E501

        :param custom_service_instructions: The custom_service_instructions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """

        self._custom_service_instructions = custom_service_instructions

    @property
    def meeting_data_transit_and_residency_method(self):
        """Gets the meeting_data_transit_and_residency_method of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Select meeting data transit and residency method for meeting hosts and participants.    `cloud` - Zoom Cloud.    `On-Prem` - On-Prem (Zoom Meeting Connector, only applicable for licensed users).  # noqa: E501

        :return: The meeting_data_transit_and_residency_method of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._meeting_data_transit_and_residency_method

    @meeting_data_transit_and_residency_method.setter
    def meeting_data_transit_and_residency_method(self, meeting_data_transit_and_residency_method):
        """Sets the meeting_data_transit_and_residency_method of this AccountsaccountIdsettingsInMeeting.

        Select meeting data transit and residency method for meeting hosts and participants.    `cloud` - Zoom Cloud.    `On-Prem` - On-Prem (Zoom Meeting Connector, only applicable for licensed users).  # noqa: E501

        :param meeting_data_transit_and_residency_method: The meeting_data_transit_and_residency_method of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["cloud", "On-Prem"]  # noqa: E501
        if meeting_data_transit_and_residency_method not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_data_transit_and_residency_method` ({0}), must be one of {1}"  # noqa: E501
                .format(meeting_data_transit_and_residency_method, allowed_values)
            )

        self._meeting_data_transit_and_residency_method = meeting_data_transit_and_residency_method

    @property
    def data_center_regions(self):
        """Gets the data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following [data center regions](https://support.zoom.us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to.  * `AU` - Australia. * `LA` - Latin America.  * `CA` - Canada.  * `CN` - China.  * `DE` - Germany.  * `HK` - Hong Kong SAR.  * `IN` - India.  * `IE` - Ireland.  * `TY` - Japan.  * `MX` - Mexico.  * `NL` - Netherlands.  * `SG` - Singapore.  * `US` - United States.  # noqa: E501

        :return: The data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_center_regions

    @data_center_regions.setter
    def data_center_regions(self, data_center_regions):
        """Sets the data_center_regions of this AccountsaccountIdsettingsInMeeting.

        If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following [data center regions](https://support.zoom.us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to.  * `AU` - Australia. * `LA` - Latin America.  * `CA` - Canada.  * `CN` - China.  * `DE` - Germany.  * `HK` - Hong Kong SAR.  * `IN` - India.  * `IE` - Ireland.  * `TY` - Japan.  * `MX` - Mexico.  * `NL` - Netherlands.  * `SG` - Singapore.  * `US` - United States.  # noqa: E501

        :param data_center_regions: The data_center_regions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AU", "LA", "CA", "CN", "DE", "HK", "IN", "IE", "TY", "MX", "NL", "SG", "US"]  # noqa: E501
        if not set(data_center_regions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_center_regions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(data_center_regions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._data_center_regions = data_center_regions

    @property
    def disable_screen_sharing_for_host_meetings(self):
        """Gets the disable_screen_sharing_for_host_meetings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the **Disable desktop screen sharing for meetings you host** setting.  # noqa: E501

        :return: The disable_screen_sharing_for_host_meetings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._disable_screen_sharing_for_host_meetings

    @disable_screen_sharing_for_host_meetings.setter
    def disable_screen_sharing_for_host_meetings(self, disable_screen_sharing_for_host_meetings):
        """Sets the disable_screen_sharing_for_host_meetings of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the **Disable desktop screen sharing for meetings you host** setting.  # noqa: E501

        :param disable_screen_sharing_for_host_meetings: The disable_screen_sharing_for_host_meetings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings

    @property
    def disable_screen_sharing_for_in_meeting_guests(self):
        """Gets the disable_screen_sharing_for_in_meeting_guests of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the **Disable screen sharing when guests are in the meeting** setting.  # noqa: E501

        :return: The disable_screen_sharing_for_in_meeting_guests of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._disable_screen_sharing_for_in_meeting_guests

    @disable_screen_sharing_for_in_meeting_guests.setter
    def disable_screen_sharing_for_in_meeting_guests(self, disable_screen_sharing_for_in_meeting_guests):
        """Sets the disable_screen_sharing_for_in_meeting_guests of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the **Disable screen sharing when guests are in the meeting** setting.  # noqa: E501

        :param disable_screen_sharing_for_in_meeting_guests: The disable_screen_sharing_for_in_meeting_guests of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._disable_screen_sharing_for_in_meeting_guests = disable_screen_sharing_for_in_meeting_guests

    @property
    def dscp_audio(self):
        """Gets the dscp_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        The DSCP audio marking value. This value defaults to `56`.  # noqa: E501

        :return: The dscp_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: int
        """
        return self._dscp_audio

    @dscp_audio.setter
    def dscp_audio(self, dscp_audio):
        """Sets the dscp_audio of this AccountsaccountIdsettingsInMeeting.

        The DSCP audio marking value. This value defaults to `56`.  # noqa: E501

        :param dscp_audio: The dscp_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: int
        """

        self._dscp_audio = dscp_audio

    @property
    def dscp_marking(self):
        """Gets the dscp_marking of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable [differentiated services code point (DSCP)](https://en.wikipedia.org/wiki/Differentiated_services) marking.  # noqa: E501

        :return: The dscp_marking of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._dscp_marking

    @dscp_marking.setter
    def dscp_marking(self, dscp_marking):
        """Sets the dscp_marking of this AccountsaccountIdsettingsInMeeting.

        Whether to enable [differentiated services code point (DSCP)](https://en.wikipedia.org/wiki/Differentiated_services) marking.  # noqa: E501

        :param dscp_marking: The dscp_marking of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._dscp_marking = dscp_marking

    @property
    def dscp_video(self):
        """Gets the dscp_video of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        The DSCP video marking value. This value defaults to `40`.  # noqa: E501

        :return: The dscp_video of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: int
        """
        return self._dscp_video

    @dscp_video.setter
    def dscp_video(self, dscp_video):
        """Sets the dscp_video of this AccountsaccountIdsettingsInMeeting.

        The DSCP video marking value. This value defaults to `40`.  # noqa: E501

        :param dscp_video: The dscp_video of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: int
        """

        self._dscp_video = dscp_video

    @property
    def dscp_dual(self):
        """Gets the dscp_dual of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to use the differentiated services code point classifiers ('dscp_video', 'dscp_audio') in the dual way (incoming and outgoing).  # noqa: E501

        :return: The dscp_dual of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._dscp_dual

    @dscp_dual.setter
    def dscp_dual(self, dscp_dual):
        """Sets the dscp_dual of this AccountsaccountIdsettingsInMeeting.

        Whether to use the differentiated services code point classifiers ('dscp_video', 'dscp_audio') in the dual way (incoming and outgoing).  # noqa: E501

        :param dscp_dual: The dscp_dual of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._dscp_dual = dscp_dual

    @property
    def e2e_encryption(self):
        """Gets the e2e_encryption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to require [AES encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) for meetings.  # noqa: E501

        :return: The e2e_encryption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._e2e_encryption

    @e2e_encryption.setter
    def e2e_encryption(self, e2e_encryption):
        """Sets the e2e_encryption of this AccountsaccountIdsettingsInMeeting.

        Whether to require [AES encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) for meetings.  # noqa: E501

        :param e2e_encryption: The e2e_encryption of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._e2e_encryption = e2e_encryption

    @property
    def entry_exit_chime(self):
        """Gets the entry_exit_chime of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        When to play the meeting entry or exit sound notification.  * `host` - Only when the host joins or leaves.  * `all` - When any participant joins or leaves.  * `none` - Disable the entry/exit sound notification.  # noqa: E501

        :return: The entry_exit_chime of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._entry_exit_chime

    @entry_exit_chime.setter
    def entry_exit_chime(self, entry_exit_chime):
        """Sets the entry_exit_chime of this AccountsaccountIdsettingsInMeeting.

        When to play the meeting entry or exit sound notification.  * `host` - Only when the host joins or leaves.  * `all` - When any participant joins or leaves.  * `none` - Disable the entry/exit sound notification.  # noqa: E501

        :param entry_exit_chime: The entry_exit_chime of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all", "none"]  # noqa: E501
        if entry_exit_chime not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_exit_chime` ({0}), must be one of {1}"  # noqa: E501
                .format(entry_exit_chime, allowed_values)
            )

        self._entry_exit_chime = entry_exit_chime

    @property
    def far_end_camera_control(self):
        """Gets the far_end_camera_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow another user to take control of the user's camera.  # noqa: E501

        :return: The far_end_camera_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._far_end_camera_control

    @far_end_camera_control.setter
    def far_end_camera_control(self, far_end_camera_control):
        """Sets the far_end_camera_control of this AccountsaccountIdsettingsInMeeting.

        Whether to allow another user to take control of the user's camera.  # noqa: E501

        :param far_end_camera_control: The far_end_camera_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._far_end_camera_control = far_end_camera_control

    @property
    def feedback(self):
        """Gets the feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Feedback to Zoom**](https://support.zoom.us/hc/en-us/articles/115005838023-Feedback-to-Zoom) setting.  # noqa: E501

        :return: The feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Feedback to Zoom**](https://support.zoom.us/hc/en-us/articles/115005838023-Feedback-to-Zoom) setting.  # noqa: E501

        :param feedback: The feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._feedback = feedback

    @property
    def file_transfer(self):
        """Gets the file_transfer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Send files via meeting chat**](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting.  # noqa: E501

        :return: The file_transfer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._file_transfer

    @file_transfer.setter
    def file_transfer(self, file_transfer):
        """Sets the file_transfer of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Send files via meeting chat**](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting.  # noqa: E501

        :param file_transfer: The file_transfer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._file_transfer = file_transfer

    @property
    def group_hd(self):
        """Gets the group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable group HD video in Meeting.  # noqa: E501

        :return: The group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._group_hd

    @group_hd.setter
    def group_hd(self, group_hd):
        """Sets the group_hd of this AccountsaccountIdsettingsInMeeting.

        Whether to enable group HD video in Meeting.  # noqa: E501

        :param group_hd: The group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._group_hd = group_hd

    @property
    def webinar_group_hd(self):
        """Gets the webinar_group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable group HD video in Webinar.  # noqa: E501

        :return: The webinar_group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_group_hd

    @webinar_group_hd.setter
    def webinar_group_hd(self, webinar_group_hd):
        """Sets the webinar_group_hd of this AccountsaccountIdsettingsInMeeting.

        Whether to enable group HD video in Webinar.  # noqa: E501

        :param webinar_group_hd: The webinar_group_hd of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_group_hd = webinar_group_hd

    @property
    def join_from_desktop(self):
        """Gets the join_from_desktop of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.  # noqa: E501

        :return: The join_from_desktop of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._join_from_desktop

    @join_from_desktop.setter
    def join_from_desktop(self, join_from_desktop):
        """Sets the join_from_desktop of this AccountsaccountIdsettingsInMeeting.

        Whether to allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.  # noqa: E501

        :param join_from_desktop: The join_from_desktop of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._join_from_desktop = join_from_desktop

    @property
    def join_from_mobile(self):
        """Gets the join_from_mobile of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.  # noqa: E501

        :return: The join_from_mobile of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._join_from_mobile

    @join_from_mobile.setter
    def join_from_mobile(self, join_from_mobile):
        """Sets the join_from_mobile of this AccountsaccountIdsettingsInMeeting.

        Whether to allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.  # noqa: E501

        :param join_from_mobile: The join_from_mobile of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._join_from_mobile = join_from_mobile

    @property
    def auto_generated_translation(self):
        """Gets the auto_generated_translation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The auto_generated_translation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingAutoGeneratedTranslation
        """
        return self._auto_generated_translation

    @auto_generated_translation.setter
    def auto_generated_translation(self, auto_generated_translation):
        """Sets the auto_generated_translation of this AccountsaccountIdsettingsInMeeting.


        :param auto_generated_translation: The auto_generated_translation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingAutoGeneratedTranslation
        """

        self._auto_generated_translation = auto_generated_translation

    @property
    def language_interpretation(self):
        """Gets the language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingLanguageInterpretation
        """
        return self._language_interpretation

    @language_interpretation.setter
    def language_interpretation(self, language_interpretation):
        """Sets the language_interpretation of this AccountsaccountIdsettingsInMeeting.


        :param language_interpretation: The language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingLanguageInterpretation
        """

        self._language_interpretation = language_interpretation

    @property
    def sign_language_interpretation(self):
        """Gets the sign_language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The sign_language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingSignLanguageInterpretation
        """
        return self._sign_language_interpretation

    @sign_language_interpretation.setter
    def sign_language_interpretation(self, sign_language_interpretation):
        """Sets the sign_language_interpretation of this AccountsaccountIdsettingsInMeeting.


        :param sign_language_interpretation: The sign_language_interpretation of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingSignLanguageInterpretation
        """

        self._sign_language_interpretation = sign_language_interpretation

    @property
    def live_streaming_facebook(self):
        """Gets the live_streaming_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow Facebook livestreaming.  # noqa: E501

        :return: The live_streaming_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._live_streaming_facebook

    @live_streaming_facebook.setter
    def live_streaming_facebook(self, live_streaming_facebook):
        """Sets the live_streaming_facebook of this AccountsaccountIdsettingsInMeeting.

        Whether to allow Facebook livestreaming.  # noqa: E501

        :param live_streaming_facebook: The live_streaming_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._live_streaming_facebook = live_streaming_facebook

    @property
    def live_streaming_youtube(self):
        """Gets the live_streaming_youtube of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow YouTube livestreaming.  # noqa: E501

        :return: The live_streaming_youtube of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._live_streaming_youtube

    @live_streaming_youtube.setter
    def live_streaming_youtube(self, live_streaming_youtube):
        """Sets the live_streaming_youtube of this AccountsaccountIdsettingsInMeeting.

        Whether to allow YouTube livestreaming.  # noqa: E501

        :param live_streaming_youtube: The live_streaming_youtube of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._live_streaming_youtube = live_streaming_youtube

    @property
    def manual_captioning(self):
        """Gets the manual_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The manual_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingManualCaptioning
        """
        return self._manual_captioning

    @manual_captioning.setter
    def manual_captioning(self, manual_captioning):
        """Sets the manual_captioning of this AccountsaccountIdsettingsInMeeting.


        :param manual_captioning: The manual_captioning of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingManualCaptioning
        """

        self._manual_captioning = manual_captioning

    @property
    def meeting_polling(self):
        """Gets the meeting_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The meeting_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingMeetingPolling
        """
        return self._meeting_polling

    @meeting_polling.setter
    def meeting_polling(self, meeting_polling):
        """Sets the meeting_polling of this AccountsaccountIdsettingsInMeeting.


        :param meeting_polling: The meeting_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingMeetingPolling
        """

        self._meeting_polling = meeting_polling

    @property
    def meeting_reactions(self):
        """Gets the meeting_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.  # noqa: E501

        :return: The meeting_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_reactions

    @meeting_reactions.setter
    def meeting_reactions(self, meeting_reactions):
        """Sets the meeting_reactions of this AccountsaccountIdsettingsInMeeting.

        Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.  # noqa: E501

        :param meeting_reactions: The meeting_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_reactions = meeting_reactions

    @property
    def meeting_reactions_emojis(self):
        """Gets the meeting_reactions_emojis of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Choose from the following meeting reaction options. * `all` - All emojis: Allow meeting participants to use any emoji available in Zoom chat as a reaction in a meeting. * `selected` - Selected emojis: Allow meeting participants to use the 6 standard meeting reaction emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada, Celebration)   # noqa: E501

        :return: The meeting_reactions_emojis of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._meeting_reactions_emojis

    @meeting_reactions_emojis.setter
    def meeting_reactions_emojis(self, meeting_reactions_emojis):
        """Sets the meeting_reactions_emojis of this AccountsaccountIdsettingsInMeeting.

        Choose from the following meeting reaction options. * `all` - All emojis: Allow meeting participants to use any emoji available in Zoom chat as a reaction in a meeting. * `selected` - Selected emojis: Allow meeting participants to use the 6 standard meeting reaction emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada, Celebration)   # noqa: E501

        :param meeting_reactions_emojis: The meeting_reactions_emojis of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if meeting_reactions_emojis not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_reactions_emojis` ({0}), must be one of {1}"  # noqa: E501
                .format(meeting_reactions_emojis, allowed_values)
            )

        self._meeting_reactions_emojis = meeting_reactions_emojis

    @property
    def allow_host_panelists_to_use_audible_clap(self):
        """Gets the allow_host_panelists_to_use_audible_clap of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow host and panelist to use audible clap.  # noqa: E501

        :return: The allow_host_panelists_to_use_audible_clap of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_panelists_to_use_audible_clap

    @allow_host_panelists_to_use_audible_clap.setter
    def allow_host_panelists_to_use_audible_clap(self, allow_host_panelists_to_use_audible_clap):
        """Sets the allow_host_panelists_to_use_audible_clap of this AccountsaccountIdsettingsInMeeting.

        Whether to allow host and panelist to use audible clap.  # noqa: E501

        :param allow_host_panelists_to_use_audible_clap: The allow_host_panelists_to_use_audible_clap of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_host_panelists_to_use_audible_clap = allow_host_panelists_to_use_audible_clap

    @property
    def webinar_reactions(self):
        """Gets the webinar_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Set this field to true to use [webinar reactions](https://support.zoom.us/hc/en-us/articles/4803536268429).  # noqa: E501

        :return: The webinar_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_reactions

    @webinar_reactions.setter
    def webinar_reactions(self, webinar_reactions):
        """Sets the webinar_reactions of this AccountsaccountIdsettingsInMeeting.

        Set this field to true to use [webinar reactions](https://support.zoom.us/hc/en-us/articles/4803536268429).  # noqa: E501

        :param webinar_reactions: The webinar_reactions of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_reactions = webinar_reactions

    @property
    def meeting_survey(self):
        """Gets the meeting_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow the host to present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.  # noqa: E501

        :return: The meeting_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_survey

    @meeting_survey.setter
    def meeting_survey(self, meeting_survey):
        """Sets the meeting_survey of this AccountsaccountIdsettingsInMeeting.

        Whether to allow the host to present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.  # noqa: E501

        :param meeting_survey: The meeting_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_survey = meeting_survey

    @property
    def original_audio(self):
        """Gets the original_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow users to select original sound in their client settings.  # noqa: E501

        :return: The original_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._original_audio

    @original_audio.setter
    def original_audio(self, original_audio):
        """Sets the original_audio of this AccountsaccountIdsettingsInMeeting.

        Whether to allow users to select original sound in their client settings.  # noqa: E501

        :param original_audio: The original_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._original_audio = original_audio

    @property
    def p2p_connetion(self):
        """Gets the p2p_connetion of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Peer to Peer connection while only 2 people are in a meeting**](https://support.zoom.us/hc/en-us/articles/360061410851-Enabling-Peer-to-Peer-connection-for-2-people-in-a-meeting) setting.  # noqa: E501

        :return: The p2p_connetion of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._p2p_connetion

    @p2p_connetion.setter
    def p2p_connetion(self, p2p_connetion):
        """Sets the p2p_connetion of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Peer to Peer connection while only 2 people are in a meeting**](https://support.zoom.us/hc/en-us/articles/360061410851-Enabling-Peer-to-Peer-connection-for-2-people-in-a-meeting) setting.  # noqa: E501

        :param p2p_connetion: The p2p_connetion of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._p2p_connetion = p2p_connetion

    @property
    def p2p_ports(self):
        """Gets the p2p_ports of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the **Listening ports range** setting.  # noqa: E501

        :return: The p2p_ports of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._p2p_ports

    @p2p_ports.setter
    def p2p_ports(self, p2p_ports):
        """Sets the p2p_ports of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the **Listening ports range** setting.  # noqa: E501

        :param p2p_ports: The p2p_ports of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._p2p_ports = p2p_ports

    @property
    def polling(self):
        """Gets the polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to add polls to the meeting controls.  # noqa: E501

        :return: The polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._polling

    @polling.setter
    def polling(self, polling):
        """Sets the polling of this AccountsaccountIdsettingsInMeeting.

        Whether to add polls to the meeting controls.  # noqa: E501

        :param polling: The polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._polling = polling

    @property
    def ports_range(self):
        """Gets the ports_range of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        When the `p2p_ports` value is `true`, the value is a semi-colon list of the peer to peer listening ports range between `1` to `65535`. This value defaults to an empty string.  # noqa: E501

        :return: The ports_range of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._ports_range

    @ports_range.setter
    def ports_range(self, ports_range):
        """Sets the ports_range of this AccountsaccountIdsettingsInMeeting.

        When the `p2p_ports` value is `true`, the value is a semi-colon list of the peer to peer listening ports range between `1` to `65535`. This value defaults to an empty string.  # noqa: E501

        :param ports_range: The ports_range of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """

        self._ports_range = ports_range

    @property
    def post_meeting_feedback(self):
        """Gets the post_meeting_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.  # noqa: E501

        :return: The post_meeting_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._post_meeting_feedback

    @post_meeting_feedback.setter
    def post_meeting_feedback(self, post_meeting_feedback):
        """Sets the post_meeting_feedback of this AccountsaccountIdsettingsInMeeting.

        Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.  # noqa: E501

        :param post_meeting_feedback: The post_meeting_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._post_meeting_feedback = post_meeting_feedback

    @property
    def private_chat(self):
        """Gets the private_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to [enable private chat](https://support.zoom.us/hc/en-us/articles/360060835932-Enabling-and-disabling-private-chat) between participants during meetings.  # noqa: E501

        :return: The private_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._private_chat

    @private_chat.setter
    def private_chat(self, private_chat):
        """Sets the private_chat of this AccountsaccountIdsettingsInMeeting.

        Whether to [enable private chat](https://support.zoom.us/hc/en-us/articles/360060835932-Enabling-and-disabling-private-chat) between participants during meetings.  # noqa: E501

        :param private_chat: The private_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._private_chat = private_chat

    @property
    def record_play_own_voice(self):
        """Gets the record_play_own_voice of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to let the user record and play their own voice.  # noqa: E501

        :return: The record_play_own_voice of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._record_play_own_voice

    @record_play_own_voice.setter
    def record_play_own_voice(self, record_play_own_voice):
        """Sets the record_play_own_voice of this AccountsaccountIdsettingsInMeeting.

        Whether to let the user record and play their own voice.  # noqa: E501

        :param record_play_own_voice: The record_play_own_voice of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._record_play_own_voice = record_play_own_voice

    @property
    def remote_control(self):
        """Gets the remote_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Remote control**](https://support.zoom.us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.  # noqa: E501

        :return: The remote_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_control

    @remote_control.setter
    def remote_control(self, remote_control):
        """Sets the remote_control of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Remote control**](https://support.zoom.us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.  # noqa: E501

        :param remote_control: The remote_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_control = remote_control

    @property
    def non_verbal_feedback(self):
        """Gets the non_verbal_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Non-verbal feedback**](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions-) setting.  This value defaults to `false`.  # noqa: E501

        :return: The non_verbal_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._non_verbal_feedback

    @non_verbal_feedback.setter
    def non_verbal_feedback(self, non_verbal_feedback):
        """Sets the non_verbal_feedback of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Non-verbal feedback**](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions-) setting.  This value defaults to `false`.  # noqa: E501

        :param non_verbal_feedback: The non_verbal_feedback of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._non_verbal_feedback = non_verbal_feedback

    @property
    def remote_support(self):
        """Gets the remote_support of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Remote support**](https://support.zoom.us/hc/en-us/articles/360060951012-Enabling-remote-support) setting. This value defaults to `false`.  # noqa: E501

        :return: The remote_support of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_support

    @remote_support.setter
    def remote_support(self, remote_support):
        """Sets the remote_support of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Remote support**](https://support.zoom.us/hc/en-us/articles/360060951012-Enabling-remote-support) setting. This value defaults to `false`.  # noqa: E501

        :param remote_support: The remote_support of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_support = remote_support

    @property
    def request_permission_to_unmute_participants(self):
        """Gets the request_permission_to_unmute_participants of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting) setting.  # noqa: E501

        :return: The request_permission_to_unmute_participants of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._request_permission_to_unmute_participants

    @request_permission_to_unmute_participants.setter
    def request_permission_to_unmute_participants(self, request_permission_to_unmute_participants):
        """Sets the request_permission_to_unmute_participants of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting) setting.  # noqa: E501

        :param request_permission_to_unmute_participants: The request_permission_to_unmute_participants of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._request_permission_to_unmute_participants = request_permission_to_unmute_participants

    @property
    def screen_sharing(self):
        """Gets the screen_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow hosts and participants to share their screen or content during meetings.  # noqa: E501

        :return: The screen_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._screen_sharing

    @screen_sharing.setter
    def screen_sharing(self, screen_sharing):
        """Sets the screen_sharing of this AccountsaccountIdsettingsInMeeting.

        Whether to allow hosts and participants to share their screen or content during meetings.  # noqa: E501

        :param screen_sharing: The screen_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._screen_sharing = screen_sharing

    @property
    def sending_default_email_invites(self):
        """Gets the sending_default_email_invites of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Only show default email when sending email invites**](https://support.zoom.us/hc/en-us/articles/360061433531-Showing-default-email-when-sending-email-invites) setting.  # noqa: E501

        :return: The sending_default_email_invites of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._sending_default_email_invites

    @sending_default_email_invites.setter
    def sending_default_email_invites(self, sending_default_email_invites):
        """Sets the sending_default_email_invites of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Only show default email when sending email invites**](https://support.zoom.us/hc/en-us/articles/360061433531-Showing-default-email-when-sending-email-invites) setting.  # noqa: E501

        :param sending_default_email_invites: The sending_default_email_invites of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._sending_default_email_invites = sending_default_email_invites

    @property
    def show_a_join_from_your_browser_link(self):
        """Gets the show_a_join_from_your_browser_link of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.  # noqa: E501

        :return: The show_a_join_from_your_browser_link of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_a_join_from_your_browser_link

    @show_a_join_from_your_browser_link.setter
    def show_a_join_from_your_browser_link(self, show_a_join_from_your_browser_link):
        """Sets the show_a_join_from_your_browser_link of this AccountsaccountIdsettingsInMeeting.

        Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.  # noqa: E501

        :param show_a_join_from_your_browser_link: The show_a_join_from_your_browser_link of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._show_a_join_from_your_browser_link = show_a_join_from_your_browser_link

    @property
    def show_meeting_control_toolbar(self):
        """Gets the show_meeting_control_toolbar of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to display the in-meeting control toolbar.  # noqa: E501

        :return: The show_meeting_control_toolbar of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_meeting_control_toolbar

    @show_meeting_control_toolbar.setter
    def show_meeting_control_toolbar(self, show_meeting_control_toolbar):
        """Sets the show_meeting_control_toolbar of this AccountsaccountIdsettingsInMeeting.

        Whether to display the in-meeting control toolbar.  # noqa: E501

        :param show_meeting_control_toolbar: The show_meeting_control_toolbar of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._show_meeting_control_toolbar = show_meeting_control_toolbar

    @property
    def slide_control(self):
        """Gets the slide_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.  # noqa: E501

        :return: The slide_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._slide_control

    @slide_control.setter
    def slide_control(self, slide_control):
        """Sets the slide_control of this AccountsaccountIdsettingsInMeeting.

        Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.  # noqa: E501

        :param slide_control: The slide_control of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._slide_control = slide_control

    @property
    def stereo_audio(self):
        """Gets the stereo_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow users to select stereo audio in their client settings.  # noqa: E501

        :return: The stereo_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._stereo_audio

    @stereo_audio.setter
    def stereo_audio(self, stereo_audio):
        """Sets the stereo_audio of this AccountsaccountIdsettingsInMeeting.

        Whether to allow users to select stereo audio in their client settings.  # noqa: E501

        :param stereo_audio: The stereo_audio of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._stereo_audio = stereo_audio

    @property
    def use_html_format_email(self):
        """Gets the use_html_format_email of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the use of HTML-formatted emails for the Outlook plugin.  # noqa: E501

        :return: The use_html_format_email of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._use_html_format_email

    @use_html_format_email.setter
    def use_html_format_email(self, use_html_format_email):
        """Sets the use_html_format_email of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the use of HTML-formatted emails for the Outlook plugin.  # noqa: E501

        :param use_html_format_email: The use_html_format_email of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._use_html_format_email = use_html_format_email

    @property
    def virtual_background(self):
        """Gets the virtual_background of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable Virtual Backgrounds.  # noqa: E501

        :return: The virtual_background of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._virtual_background

    @virtual_background.setter
    def virtual_background(self, virtual_background):
        """Sets the virtual_background of this AccountsaccountIdsettingsInMeeting.

        Whether to enable Virtual Backgrounds.  # noqa: E501

        :param virtual_background: The virtual_background of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._virtual_background = virtual_background

    @property
    def virtual_background_settings(self):
        """Gets the virtual_background_settings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The virtual_background_settings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingVirtualBackgroundSettings
        """
        return self._virtual_background_settings

    @virtual_background_settings.setter
    def virtual_background_settings(self, virtual_background_settings):
        """Sets the virtual_background_settings of this AccountsaccountIdsettingsInMeeting.


        :param virtual_background_settings: The virtual_background_settings of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingVirtualBackgroundSettings
        """

        self._virtual_background_settings = virtual_background_settings

    @property
    def watermark(self):
        """Gets the watermark of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to include a [watermark](https://support.zoom.us/hc/en-us/articles/209605273-Adding-an-image-watermark) when viewing a shared screen.  # noqa: E501

        :return: The watermark of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this AccountsaccountIdsettingsInMeeting.

        Whether to include a [watermark](https://support.zoom.us/hc/en-us/articles/209605273-Adding-an-image-watermark) when viewing a shared screen.  # noqa: E501

        :param watermark: The watermark of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._watermark = watermark

    @property
    def webinar_chat(self):
        """Gets the webinar_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The webinar_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingWebinarChat
        """
        return self._webinar_chat

    @webinar_chat.setter
    def webinar_chat(self, webinar_chat):
        """Sets the webinar_chat of this AccountsaccountIdsettingsInMeeting.


        :param webinar_chat: The webinar_chat of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingWebinarChat
        """

        self._webinar_chat = webinar_chat

    @property
    def webinar_live_streaming(self):
        """Gets the webinar_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The webinar_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingWebinarLiveStreaming
        """
        return self._webinar_live_streaming

    @webinar_live_streaming.setter
    def webinar_live_streaming(self, webinar_live_streaming):
        """Sets the webinar_live_streaming of this AccountsaccountIdsettingsInMeeting.


        :param webinar_live_streaming: The webinar_live_streaming of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingWebinarLiveStreaming
        """

        self._webinar_live_streaming = webinar_live_streaming

    @property
    def webinar_polling(self):
        """Gets the webinar_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501


        :return: The webinar_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsInMeetingWebinarPolling
        """
        return self._webinar_polling

    @webinar_polling.setter
    def webinar_polling(self, webinar_polling):
        """Sets the webinar_polling of this AccountsaccountIdsettingsInMeeting.


        :param webinar_polling: The webinar_polling of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsInMeetingWebinarPolling
        """

        self._webinar_polling = webinar_polling

    @property
    def webinar_question_answer(self):
        """Gets the webinar_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether attendees can ask the host and panelists questions in the webinar.  # noqa: E501

        :return: The webinar_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_question_answer

    @webinar_question_answer.setter
    def webinar_question_answer(self, webinar_question_answer):
        """Sets the webinar_question_answer of this AccountsaccountIdsettingsInMeeting.

        Whether attendees can ask the host and panelists questions in the webinar.  # noqa: E501

        :param webinar_question_answer: The webinar_question_answer of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_question_answer = webinar_question_answer

    @property
    def webinar_survey(self):
        """Gets the webinar_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow the host to present surveys to attendees once a webinar has ended.  # noqa: E501

        :return: The webinar_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_survey

    @webinar_survey.setter
    def webinar_survey(self, webinar_survey):
        """Sets the webinar_survey of this AccountsaccountIdsettingsInMeeting.

        Whether to allow the host to present surveys to attendees once a webinar has ended.  # noqa: E501

        :param webinar_survey: The webinar_survey of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_survey = webinar_survey

    @property
    def whiteboard(self):
        """Gets the whiteboard of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to enable the [**Zoom Whiteboard**](https://support.zoom.us/hc/en-us/articles/4410916881421) feature.  # noqa: E501

        :return: The whiteboard of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._whiteboard

    @whiteboard.setter
    def whiteboard(self, whiteboard):
        """Sets the whiteboard of this AccountsaccountIdsettingsInMeeting.

        Whether to enable the [**Zoom Whiteboard**](https://support.zoom.us/hc/en-us/articles/4410916881421) feature.  # noqa: E501

        :param whiteboard: The whiteboard of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._whiteboard = whiteboard

    @property
    def who_can_share_screen(self):
        """Gets the who_can_share_screen of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        The type of user who can share their screen or content during meetings.  * `host` - Only hosts can screen share.  * `all` - Both hosts and participants can screen share.  # noqa: E501

        :return: The who_can_share_screen of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._who_can_share_screen

    @who_can_share_screen.setter
    def who_can_share_screen(self, who_can_share_screen):
        """Sets the who_can_share_screen of this AccountsaccountIdsettingsInMeeting.

        The type of user who can share their screen or content during meetings.  * `host` - Only hosts can screen share.  * `all` - Both hosts and participants can screen share.  # noqa: E501

        :param who_can_share_screen: The who_can_share_screen of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all"]  # noqa: E501
        if who_can_share_screen not in allowed_values:
            raise ValueError(
                "Invalid value for `who_can_share_screen` ({0}), must be one of {1}"  # noqa: E501
                .format(who_can_share_screen, allowed_values)
            )

        self._who_can_share_screen = who_can_share_screen

    @property
    def who_can_share_screen_when_someone_is_sharing(self):
        """Gets the who_can_share_screen_when_someone_is_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        The type of user that can begin sharing their screen when someone else in the meeting is sharing their screen.  * `host` - Only hosts can screen share when someone else is sharing.  * `all` - Both hosts and participants can screen share when someone else is sharing.  # noqa: E501

        :return: The who_can_share_screen_when_someone_is_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._who_can_share_screen_when_someone_is_sharing

    @who_can_share_screen_when_someone_is_sharing.setter
    def who_can_share_screen_when_someone_is_sharing(self, who_can_share_screen_when_someone_is_sharing):
        """Sets the who_can_share_screen_when_someone_is_sharing of this AccountsaccountIdsettingsInMeeting.

        The type of user that can begin sharing their screen when someone else in the meeting is sharing their screen.  * `host` - Only hosts can screen share when someone else is sharing.  * `all` - Both hosts and participants can screen share when someone else is sharing.  # noqa: E501

        :param who_can_share_screen_when_someone_is_sharing: The who_can_share_screen_when_someone_is_sharing of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all"]  # noqa: E501
        if who_can_share_screen_when_someone_is_sharing not in allowed_values:
            raise ValueError(
                "Invalid value for `who_can_share_screen_when_someone_is_sharing` ({0}), must be one of {1}"  # noqa: E501
                .format(who_can_share_screen_when_someone_is_sharing, allowed_values)
            )

        self._who_can_share_screen_when_someone_is_sharing = who_can_share_screen_when_someone_is_sharing

    @property
    def participants_share_simultaneously(self):
        """Gets the participants_share_simultaneously of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Indicates how many participants can share at the same time. The value can be one of the following:     `one`: Only one participant can share at a time .     `multiple`: Multiple participants can share simultaneously (dual monitors recommended).  # noqa: E501

        :return: The participants_share_simultaneously of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._participants_share_simultaneously

    @participants_share_simultaneously.setter
    def participants_share_simultaneously(self, participants_share_simultaneously):
        """Sets the participants_share_simultaneously of this AccountsaccountIdsettingsInMeeting.

        Indicates how many participants can share at the same time. The value can be one of the following:     `one`: Only one participant can share at a time .     `multiple`: Multiple participants can share simultaneously (dual monitors recommended).  # noqa: E501

        :param participants_share_simultaneously: The participants_share_simultaneously of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["multiple", "one"]  # noqa: E501
        if participants_share_simultaneously not in allowed_values:
            raise ValueError(
                "Invalid value for `participants_share_simultaneously` ({0}), must be one of {1}"  # noqa: E501
                .format(participants_share_simultaneously, allowed_values)
            )

        self._participants_share_simultaneously = participants_share_simultaneously

    @property
    def workplace_by_facebook(self):
        """Gets the workplace_by_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Whether to allow Workplace by Facebook livestreaming.  # noqa: E501

        :return: The workplace_by_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._workplace_by_facebook

    @workplace_by_facebook.setter
    def workplace_by_facebook(self, workplace_by_facebook):
        """Sets the workplace_by_facebook of this AccountsaccountIdsettingsInMeeting.

        Whether to allow Workplace by Facebook livestreaming.  # noqa: E501

        :param workplace_by_facebook: The workplace_by_facebook of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._workplace_by_facebook = workplace_by_facebook

    @property
    def transfer_meetings_between_devices(self):
        """Gets the transfer_meetings_between_devices of this AccountsaccountIdsettingsInMeeting.  # noqa: E501

        Users can move to a new device without leaving the meeting they're in.  # noqa: E501

        :return: The transfer_meetings_between_devices of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_meetings_between_devices

    @transfer_meetings_between_devices.setter
    def transfer_meetings_between_devices(self, transfer_meetings_between_devices):
        """Sets the transfer_meetings_between_devices of this AccountsaccountIdsettingsInMeeting.

        Users can move to a new device without leaving the meeting they're in.  # noqa: E501

        :param transfer_meetings_between_devices: The transfer_meetings_between_devices of this AccountsaccountIdsettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._transfer_meetings_between_devices = transfer_meetings_between_devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsInMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsInMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
