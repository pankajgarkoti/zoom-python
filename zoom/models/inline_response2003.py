# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'AccountsaccountIdsettingsregistrationOptions',
        'questions': 'list[AccountsaccountIdsettingsregistrationQuestions]',
        'approve_type': 'int',
        'custom_questions': 'list[AccountsaccountIdsettingsregistrationCustomQuestions]'
    }

    attribute_map = {
        'options': 'options',
        'questions': 'questions',
        'approve_type': 'approve_type',
        'custom_questions': 'custom_questions'
    }

    def __init__(self, options=None, questions=None, approve_type=None, custom_questions=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._options = None
        self._questions = None
        self._approve_type = None
        self._custom_questions = None
        self.discriminator = None
        if options is not None:
            self.options = options
        if questions is not None:
            self.questions = questions
        if approve_type is not None:
            self.approve_type = approve_type
        if custom_questions is not None:
            self.custom_questions = custom_questions

    @property
    def options(self):
        """Gets the options of this InlineResponse2003.  # noqa: E501


        :return: The options of this InlineResponse2003.  # noqa: E501
        :rtype: AccountsaccountIdsettingsregistrationOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this InlineResponse2003.


        :param options: The options of this InlineResponse2003.  # noqa: E501
        :type: AccountsaccountIdsettingsregistrationOptions
        """

        self._options = options

    @property
    def questions(self):
        """Gets the questions of this InlineResponse2003.  # noqa: E501

        Array of Registrant Questions.  # noqa: E501

        :return: The questions of this InlineResponse2003.  # noqa: E501
        :rtype: list[AccountsaccountIdsettingsregistrationQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this InlineResponse2003.

        Array of Registrant Questions.  # noqa: E501

        :param questions: The questions of this InlineResponse2003.  # noqa: E501
        :type: list[AccountsaccountIdsettingsregistrationQuestions]
        """

        self._questions = questions

    @property
    def approve_type(self):
        """Gets the approve_type of this InlineResponse2003.  # noqa: E501

        Approval type for the registration.  # noqa: E501

        :return: The approve_type of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._approve_type

    @approve_type.setter
    def approve_type(self, approve_type):
        """Sets the approve_type of this InlineResponse2003.

        Approval type for the registration.  # noqa: E501

        :param approve_type: The approve_type of this InlineResponse2003.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if approve_type not in allowed_values:
            raise ValueError(
                "Invalid value for `approve_type` ({0}), must be one of {1}"  # noqa: E501
                .format(approve_type, allowed_values)
            )

        self._approve_type = approve_type

    @property
    def custom_questions(self):
        """Gets the custom_questions of this InlineResponse2003.  # noqa: E501

        Array of Registrant Custom Questions  # noqa: E501

        :return: The custom_questions of this InlineResponse2003.  # noqa: E501
        :rtype: list[AccountsaccountIdsettingsregistrationCustomQuestions]
        """
        return self._custom_questions

    @custom_questions.setter
    def custom_questions(self, custom_questions):
        """Sets the custom_questions of this InlineResponse2003.

        Array of Registrant Custom Questions  # noqa: E501

        :param custom_questions: The custom_questions of this InlineResponse2003.  # noqa: E501
        :type: list[AccountsaccountIdsettingsregistrationCustomQuestions]
        """

        self._custom_questions = custom_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
