# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsChatChatEmojis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'emojis_option': 'str'
    }

    attribute_map = {
        'enable': 'enable',
        'emojis_option': 'emojis_option'
    }

    def __init__(self, enable=None, emojis_option=None):  # noqa: E501
        """AccountsaccountIdsettingsChatChatEmojis - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._emojis_option = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if emojis_option is not None:
            self.emojis_option = emojis_option

    @property
    def enable(self):
        """Gets the enable of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501

        Allow users to use the emoji library in direct messages or group conversations. Choose between allowing users to use any emoji in the library, or choose to allow only pre-selected emojis. If the setting is disabled, users can still use keyboard shortcuts to add emojis. Users can change their emoji skin tone in Settings.  # noqa: E501

        :return: The enable of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AccountsaccountIdsettingsChatChatEmojis.

        Allow users to use the emoji library in direct messages or group conversations. Choose between allowing users to use any emoji in the library, or choose to allow only pre-selected emojis. If the setting is disabled, users can still use keyboard shortcuts to add emojis. Users can change their emoji skin tone in Settings.  # noqa: E501

        :param enable: The enable of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def emojis_option(self):
        """Gets the emojis_option of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501


        :return: The emojis_option of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501
        :rtype: str
        """
        return self._emojis_option

    @emojis_option.setter
    def emojis_option(self, emojis_option):
        """Sets the emojis_option of this AccountsaccountIdsettingsChatChatEmojis.


        :param emojis_option: The emojis_option of this AccountsaccountIdsettingsChatChatEmojis.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if emojis_option not in allowed_values:
            raise ValueError(
                "Invalid value for `emojis_option` ({0}), must be one of {1}"  # noqa: E501
                .format(emojis_option, allowed_values)
            )

        self._emojis_option = emojis_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsChatChatEmojis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsChatChatEmojis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
