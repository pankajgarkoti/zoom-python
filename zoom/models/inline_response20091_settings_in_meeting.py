# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20091SettingsInMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_exit_chime': 'str',
        'feedback': 'bool',
        'polling': 'bool',
        'post_meeting_feedback': 'bool',
        'screen_sharing': 'bool',
        'who_can_share_screen': 'str',
        'who_can_share_screen_when_someone_is_sharing': 'str',
        'disable_screen_sharing_for_host_meetings': 'bool',
        'annotation': 'bool',
        'whiteboard': 'bool',
        'remote_control': 'bool',
        'non_verbal_feedback': 'bool',
        'allow_participants_to_rename': 'bool',
        'breakout_room': 'bool',
        'remote_support': 'bool',
        'manual_captioning': 'InlineResponse20091SettingsInMeetingManualCaptioning',
        'closed_captioning': 'InlineResponse20091SettingsInMeetingClosedCaptioning'
    }

    attribute_map = {
        'entry_exit_chime': 'entry_exit_chime',
        'feedback': 'feedback',
        'polling': 'polling',
        'post_meeting_feedback': 'post_meeting_feedback',
        'screen_sharing': 'screen_sharing',
        'who_can_share_screen': 'who_can_share_screen',
        'who_can_share_screen_when_someone_is_sharing': 'who_can_share_screen_when_someone_is_sharing',
        'disable_screen_sharing_for_host_meetings': 'disable_screen_sharing_for_host_meetings',
        'annotation': 'annotation',
        'whiteboard': 'whiteboard',
        'remote_control': 'remote_control',
        'non_verbal_feedback': 'non_verbal_feedback',
        'allow_participants_to_rename': 'allow_participants_to_rename',
        'breakout_room': 'breakout_room',
        'remote_support': 'remote_support',
        'manual_captioning': 'manual_captioning',
        'closed_captioning': 'closed_captioning'
    }

    def __init__(self, entry_exit_chime=None, feedback=None, polling=None, post_meeting_feedback=None, screen_sharing=None, who_can_share_screen=None, who_can_share_screen_when_someone_is_sharing=None, disable_screen_sharing_for_host_meetings=None, annotation=None, whiteboard=None, remote_control=None, non_verbal_feedback=None, allow_participants_to_rename=None, breakout_room=None, remote_support=None, manual_captioning=None, closed_captioning=None):  # noqa: E501
        """InlineResponse20091SettingsInMeeting - a model defined in Swagger"""  # noqa: E501
        self._entry_exit_chime = None
        self._feedback = None
        self._polling = None
        self._post_meeting_feedback = None
        self._screen_sharing = None
        self._who_can_share_screen = None
        self._who_can_share_screen_when_someone_is_sharing = None
        self._disable_screen_sharing_for_host_meetings = None
        self._annotation = None
        self._whiteboard = None
        self._remote_control = None
        self._non_verbal_feedback = None
        self._allow_participants_to_rename = None
        self._breakout_room = None
        self._remote_support = None
        self._manual_captioning = None
        self._closed_captioning = None
        self.discriminator = None
        if entry_exit_chime is not None:
            self.entry_exit_chime = entry_exit_chime
        if feedback is not None:
            self.feedback = feedback
        if polling is not None:
            self.polling = polling
        if post_meeting_feedback is not None:
            self.post_meeting_feedback = post_meeting_feedback
        if screen_sharing is not None:
            self.screen_sharing = screen_sharing
        if who_can_share_screen is not None:
            self.who_can_share_screen = who_can_share_screen
        if who_can_share_screen_when_someone_is_sharing is not None:
            self.who_can_share_screen_when_someone_is_sharing = who_can_share_screen_when_someone_is_sharing
        if disable_screen_sharing_for_host_meetings is not None:
            self.disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings
        if annotation is not None:
            self.annotation = annotation
        if whiteboard is not None:
            self.whiteboard = whiteboard
        if remote_control is not None:
            self.remote_control = remote_control
        if non_verbal_feedback is not None:
            self.non_verbal_feedback = non_verbal_feedback
        if allow_participants_to_rename is not None:
            self.allow_participants_to_rename = allow_participants_to_rename
        if breakout_room is not None:
            self.breakout_room = breakout_room
        if remote_support is not None:
            self.remote_support = remote_support
        if manual_captioning is not None:
            self.manual_captioning = manual_captioning
        if closed_captioning is not None:
            self.closed_captioning = closed_captioning

    @property
    def entry_exit_chime(self):
        """Gets the entry_exit_chime of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Play sound when participants join or leave.    `host` - Heard by host only.    `all` - Heard by host and all attendees.    `none` - Disable.  # noqa: E501

        :return: The entry_exit_chime of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._entry_exit_chime

    @entry_exit_chime.setter
    def entry_exit_chime(self, entry_exit_chime):
        """Sets the entry_exit_chime of this InlineResponse20091SettingsInMeeting.

        Play sound when participants join or leave.    `host` - Heard by host only.    `all` - Heard by host and all attendees.    `none` - Disable.  # noqa: E501

        :param entry_exit_chime: The entry_exit_chime of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all", "none"]  # noqa: E501
        if entry_exit_chime not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_exit_chime` ({0}), must be one of {1}"  # noqa: E501
                .format(entry_exit_chime, allowed_values)
            )

        self._entry_exit_chime = entry_exit_chime

    @property
    def feedback(self):
        """Gets the feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Add a **Feedback** tab to the Windows Settings or Mac Preferences dialog. Enable users to provide feedback to Zoom at the end of the meeting.  # noqa: E501

        :return: The feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this InlineResponse20091SettingsInMeeting.

        Add a **Feedback** tab to the Windows Settings or Mac Preferences dialog. Enable users to provide feedback to Zoom at the end of the meeting.  # noqa: E501

        :param feedback: The feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._feedback = feedback

    @property
    def polling(self):
        """Gets the polling of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Add 'Polls' to the meeting controls. This allows the host to survey the attendees.  # noqa: E501

        :return: The polling of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._polling

    @polling.setter
    def polling(self, polling):
        """Sets the polling of this InlineResponse20091SettingsInMeeting.

        Add 'Polls' to the meeting controls. This allows the host to survey the attendees.  # noqa: E501

        :param polling: The polling of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._polling = polling

    @property
    def post_meeting_feedback(self):
        """Gets the post_meeting_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.  # noqa: E501

        :return: The post_meeting_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._post_meeting_feedback

    @post_meeting_feedback.setter
    def post_meeting_feedback(self, post_meeting_feedback):
        """Sets the post_meeting_feedback of this InlineResponse20091SettingsInMeeting.

        Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.  # noqa: E501

        :param post_meeting_feedback: The post_meeting_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._post_meeting_feedback = post_meeting_feedback

    @property
    def screen_sharing(self):
        """Gets the screen_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Whether to allow hosts and participants to share their screen or content during meetings.  # noqa: E501

        :return: The screen_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._screen_sharing

    @screen_sharing.setter
    def screen_sharing(self, screen_sharing):
        """Sets the screen_sharing of this InlineResponse20091SettingsInMeeting.

        Whether to allow hosts and participants to share their screen or content during meetings.  # noqa: E501

        :param screen_sharing: The screen_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._screen_sharing = screen_sharing

    @property
    def who_can_share_screen(self):
        """Gets the who_can_share_screen of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        The type of user who can share their screen or content during meetings.  * `host` - Only hosts can screen share.  * `all` - Both hosts and participants can screen share.  # noqa: E501

        :return: The who_can_share_screen of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._who_can_share_screen

    @who_can_share_screen.setter
    def who_can_share_screen(self, who_can_share_screen):
        """Sets the who_can_share_screen of this InlineResponse20091SettingsInMeeting.

        The type of user who can share their screen or content during meetings.  * `host` - Only hosts can screen share.  * `all` - Both hosts and participants can screen share.  # noqa: E501

        :param who_can_share_screen: The who_can_share_screen of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all"]  # noqa: E501
        if who_can_share_screen not in allowed_values:
            raise ValueError(
                "Invalid value for `who_can_share_screen` ({0}), must be one of {1}"  # noqa: E501
                .format(who_can_share_screen, allowed_values)
            )

        self._who_can_share_screen = who_can_share_screen

    @property
    def who_can_share_screen_when_someone_is_sharing(self):
        """Gets the who_can_share_screen_when_someone_is_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:     `host`: Only a host can share the screen when someone else is sharing.     `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.   # noqa: E501

        :return: The who_can_share_screen_when_someone_is_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._who_can_share_screen_when_someone_is_sharing

    @who_can_share_screen_when_someone_is_sharing.setter
    def who_can_share_screen_when_someone_is_sharing(self, who_can_share_screen_when_someone_is_sharing):
        """Sets the who_can_share_screen_when_someone_is_sharing of this InlineResponse20091SettingsInMeeting.

        Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:     `host`: Only a host can share the screen when someone else is sharing.     `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.   # noqa: E501

        :param who_can_share_screen_when_someone_is_sharing: The who_can_share_screen_when_someone_is_sharing of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all"]  # noqa: E501
        if who_can_share_screen_when_someone_is_sharing not in allowed_values:
            raise ValueError(
                "Invalid value for `who_can_share_screen_when_someone_is_sharing` ({0}), must be one of {1}"  # noqa: E501
                .format(who_can_share_screen_when_someone_is_sharing, allowed_values)
            )

        self._who_can_share_screen_when_someone_is_sharing = who_can_share_screen_when_someone_is_sharing

    @property
    def disable_screen_sharing_for_host_meetings(self):
        """Gets the disable_screen_sharing_for_host_meetings of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.  # noqa: E501

        :return: The disable_screen_sharing_for_host_meetings of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._disable_screen_sharing_for_host_meetings

    @disable_screen_sharing_for_host_meetings.setter
    def disable_screen_sharing_for_host_meetings(self, disable_screen_sharing_for_host_meetings):
        """Sets the disable_screen_sharing_for_host_meetings of this InlineResponse20091SettingsInMeeting.

        Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.  # noqa: E501

        :param disable_screen_sharing_for_host_meetings: The disable_screen_sharing_for_host_meetings of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings

    @property
    def annotation(self):
        """Gets the annotation of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Allow participants to use annotation tools to add information to shared screens.  # noqa: E501

        :return: The annotation of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this InlineResponse20091SettingsInMeeting.

        Allow participants to use annotation tools to add information to shared screens.  # noqa: E501

        :param annotation: The annotation of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._annotation = annotation

    @property
    def whiteboard(self):
        """Gets the whiteboard of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Allow participants to share a whiteboard that includes annotation tools.  # noqa: E501

        :return: The whiteboard of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._whiteboard

    @whiteboard.setter
    def whiteboard(self, whiteboard):
        """Sets the whiteboard of this InlineResponse20091SettingsInMeeting.

        Allow participants to share a whiteboard that includes annotation tools.  # noqa: E501

        :param whiteboard: The whiteboard of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._whiteboard = whiteboard

    @property
    def remote_control(self):
        """Gets the remote_control of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Whether to enable the [**Remote control**](https://support.zoom.us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.  # noqa: E501

        :return: The remote_control of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_control

    @remote_control.setter
    def remote_control(self, remote_control):
        """Sets the remote_control of this InlineResponse20091SettingsInMeeting.

        Whether to enable the [**Remote control**](https://support.zoom.us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.  # noqa: E501

        :param remote_control: The remote_control of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_control = remote_control

    @property
    def non_verbal_feedback(self):
        """Gets the non_verbal_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Allow participants in a meeting to provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.  # noqa: E501

        :return: The non_verbal_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._non_verbal_feedback

    @non_verbal_feedback.setter
    def non_verbal_feedback(self, non_verbal_feedback):
        """Sets the non_verbal_feedback of this InlineResponse20091SettingsInMeeting.

        Allow participants in a meeting to provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.  # noqa: E501

        :param non_verbal_feedback: The non_verbal_feedback of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._non_verbal_feedback = non_verbal_feedback

    @property
    def allow_participants_to_rename(self):
        """Gets the allow_participants_to_rename of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        If the value of this field is set to `true`, meeting participants and webinar panelists are allowed to rename themselves during a meeting or a webinar.   # noqa: E501

        :return: The allow_participants_to_rename of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_participants_to_rename

    @allow_participants_to_rename.setter
    def allow_participants_to_rename(self, allow_participants_to_rename):
        """Sets the allow_participants_to_rename of this InlineResponse20091SettingsInMeeting.

        If the value of this field is set to `true`, meeting participants and webinar panelists are allowed to rename themselves during a meeting or a webinar.   # noqa: E501

        :param allow_participants_to_rename: The allow_participants_to_rename of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_participants_to_rename = allow_participants_to_rename

    @property
    def breakout_room(self):
        """Gets the breakout_room of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Allow the meeting host to split meeting participants into separate breakout rooms.  # noqa: E501

        :return: The breakout_room of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._breakout_room

    @breakout_room.setter
    def breakout_room(self, breakout_room):
        """Sets the breakout_room of this InlineResponse20091SettingsInMeeting.

        Allow the meeting host to split meeting participants into separate breakout rooms.  # noqa: E501

        :param breakout_room: The breakout_room of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._breakout_room = breakout_room

    @property
    def remote_support(self):
        """Gets the remote_support of this InlineResponse20091SettingsInMeeting.  # noqa: E501

        Allow meeting host to provide 1:1 remote support to another participant.  # noqa: E501

        :return: The remote_support of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_support

    @remote_support.setter
    def remote_support(self, remote_support):
        """Sets the remote_support of this InlineResponse20091SettingsInMeeting.

        Allow meeting host to provide 1:1 remote support to another participant.  # noqa: E501

        :param remote_support: The remote_support of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_support = remote_support

    @property
    def manual_captioning(self):
        """Gets the manual_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501


        :return: The manual_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: InlineResponse20091SettingsInMeetingManualCaptioning
        """
        return self._manual_captioning

    @manual_captioning.setter
    def manual_captioning(self, manual_captioning):
        """Sets the manual_captioning of this InlineResponse20091SettingsInMeeting.


        :param manual_captioning: The manual_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: InlineResponse20091SettingsInMeetingManualCaptioning
        """

        self._manual_captioning = manual_captioning

    @property
    def closed_captioning(self):
        """Gets the closed_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501


        :return: The closed_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :rtype: InlineResponse20091SettingsInMeetingClosedCaptioning
        """
        return self._closed_captioning

    @closed_captioning.setter
    def closed_captioning(self, closed_captioning):
        """Sets the closed_captioning of this InlineResponse20091SettingsInMeeting.


        :param closed_captioning: The closed_captioning of this InlineResponse20091SettingsInMeeting.  # noqa: E501
        :type: InlineResponse20091SettingsInMeetingClosedCaptioning
        """

        self._closed_captioning = closed_captioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20091SettingsInMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20091SettingsInMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
