# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupsgroupIdsettingsMeetingSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_security': 'bool',
        'block_user_domain': 'bool',
        'block_user_domain_list': 'list[str]',
        'chat_etiquette_tool': 'GroupsgroupIdsettingsChatChatEtiquetteTool',
        'embed_password_in_join_link': 'bool',
        'encryption_type': 'str',
        'end_to_end_encrypted_meetings': 'bool',
        'meeting_password': 'bool',
        'meeting_password_requirement': 'GroupsgroupIdsettingsMeetingSecurityMeetingPasswordRequirement',
        'only_authenticated_can_join_from_webclient': 'bool',
        'phone_password': 'bool',
        'pmi_password': 'bool',
        'require_password_for_scheduled_meeting': 'bool',
        'require_password_for_scheduled_webinar': 'bool',
        'waiting_room': 'bool',
        'waiting_room_settings': 'GroupsgroupIdsettingsMeetingSecurityWaitingRoomSettings',
        'webinar_password': 'bool'
    }

    attribute_map = {
        'auto_security': 'auto_security',
        'block_user_domain': 'block_user_domain',
        'block_user_domain_list': 'block_user_domain_list',
        'chat_etiquette_tool': 'chat_etiquette_tool',
        'embed_password_in_join_link': 'embed_password_in_join_link',
        'encryption_type': 'encryption_type',
        'end_to_end_encrypted_meetings': 'end_to_end_encrypted_meetings',
        'meeting_password': 'meeting_password',
        'meeting_password_requirement': 'meeting_password_requirement',
        'only_authenticated_can_join_from_webclient': 'only_authenticated_can_join_from_webclient',
        'phone_password': 'phone_password',
        'pmi_password': 'pmi_password',
        'require_password_for_scheduled_meeting': 'require_password_for_scheduled_meeting',
        'require_password_for_scheduled_webinar': 'require_password_for_scheduled_webinar',
        'waiting_room': 'waiting_room',
        'waiting_room_settings': 'waiting_room_settings',
        'webinar_password': 'webinar_password'
    }

    def __init__(self, auto_security=None, block_user_domain=None, block_user_domain_list=None, chat_etiquette_tool=None, embed_password_in_join_link=None, encryption_type=None, end_to_end_encrypted_meetings=None, meeting_password=None, meeting_password_requirement=None, only_authenticated_can_join_from_webclient=None, phone_password=None, pmi_password=None, require_password_for_scheduled_meeting=None, require_password_for_scheduled_webinar=None, waiting_room=None, waiting_room_settings=None, webinar_password=None):  # noqa: E501
        """GroupsgroupIdsettingsMeetingSecurity - a model defined in Swagger"""  # noqa: E501
        self._auto_security = None
        self._block_user_domain = None
        self._block_user_domain_list = None
        self._chat_etiquette_tool = None
        self._embed_password_in_join_link = None
        self._encryption_type = None
        self._end_to_end_encrypted_meetings = None
        self._meeting_password = None
        self._meeting_password_requirement = None
        self._only_authenticated_can_join_from_webclient = None
        self._phone_password = None
        self._pmi_password = None
        self._require_password_for_scheduled_meeting = None
        self._require_password_for_scheduled_webinar = None
        self._waiting_room = None
        self._waiting_room_settings = None
        self._webinar_password = None
        self.discriminator = None
        if auto_security is not None:
            self.auto_security = auto_security
        if block_user_domain is not None:
            self.block_user_domain = block_user_domain
        if block_user_domain_list is not None:
            self.block_user_domain_list = block_user_domain_list
        if chat_etiquette_tool is not None:
            self.chat_etiquette_tool = chat_etiquette_tool
        if embed_password_in_join_link is not None:
            self.embed_password_in_join_link = embed_password_in_join_link
        if encryption_type is not None:
            self.encryption_type = encryption_type
        if end_to_end_encrypted_meetings is not None:
            self.end_to_end_encrypted_meetings = end_to_end_encrypted_meetings
        if meeting_password is not None:
            self.meeting_password = meeting_password
        if meeting_password_requirement is not None:
            self.meeting_password_requirement = meeting_password_requirement
        if only_authenticated_can_join_from_webclient is not None:
            self.only_authenticated_can_join_from_webclient = only_authenticated_can_join_from_webclient
        if phone_password is not None:
            self.phone_password = phone_password
        if pmi_password is not None:
            self.pmi_password = pmi_password
        if require_password_for_scheduled_meeting is not None:
            self.require_password_for_scheduled_meeting = require_password_for_scheduled_meeting
        if require_password_for_scheduled_webinar is not None:
            self.require_password_for_scheduled_webinar = require_password_for_scheduled_webinar
        if waiting_room is not None:
            self.waiting_room = waiting_room
        if waiting_room_settings is not None:
            self.waiting_room_settings = waiting_room_settings
        if webinar_password is not None:
            self.webinar_password = webinar_password

    @property
    def auto_security(self):
        """Gets the auto_security of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to require that all meetings are secured with at least one security option.    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts.  # noqa: E501

        :return: The auto_security of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_security

    @auto_security.setter
    def auto_security(self, auto_security):
        """Sets the auto_security of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to require that all meetings are secured with at least one security option.    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts.  # noqa: E501

        :param auto_security: The auto_security of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._auto_security = auto_security

    @property
    def block_user_domain(self):
        """Gets the block_user_domain of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to block users in specific domains from joining meetings and webinars.  # noqa: E501

        :return: The block_user_domain of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._block_user_domain

    @block_user_domain.setter
    def block_user_domain(self, block_user_domain):
        """Sets the block_user_domain of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to block users in specific domains from joining meetings and webinars.  # noqa: E501

        :param block_user_domain: The block_user_domain of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._block_user_domain = block_user_domain

    @property
    def block_user_domain_list(self):
        """Gets the block_user_domain_list of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        The domain to block, up to 20 domains. For example, the `*.example.com` domain.  # noqa: E501

        :return: The block_user_domain_list of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: list[str]
        """
        return self._block_user_domain_list

    @block_user_domain_list.setter
    def block_user_domain_list(self, block_user_domain_list):
        """Sets the block_user_domain_list of this GroupsgroupIdsettingsMeetingSecurity.

        The domain to block, up to 20 domains. For example, the `*.example.com` domain.  # noqa: E501

        :param block_user_domain_list: The block_user_domain_list of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: list[str]
        """

        self._block_user_domain_list = block_user_domain_list

    @property
    def chat_etiquette_tool(self):
        """Gets the chat_etiquette_tool of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501


        :return: The chat_etiquette_tool of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: GroupsgroupIdsettingsChatChatEtiquetteTool
        """
        return self._chat_etiquette_tool

    @chat_etiquette_tool.setter
    def chat_etiquette_tool(self, chat_etiquette_tool):
        """Sets the chat_etiquette_tool of this GroupsgroupIdsettingsMeetingSecurity.


        :param chat_etiquette_tool: The chat_etiquette_tool of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: GroupsgroupIdsettingsChatChatEtiquetteTool
        """

        self._chat_etiquette_tool = chat_etiquette_tool

    @property
    def embed_password_in_join_link(self):
        """Gets the embed_password_in_join_link of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether the meeting passcode will be encrypted and included in the invitation link. The provided link will allow participants to join the meeting without having to enter the passcode.  # noqa: E501

        :return: The embed_password_in_join_link of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._embed_password_in_join_link

    @embed_password_in_join_link.setter
    def embed_password_in_join_link(self, embed_password_in_join_link):
        """Sets the embed_password_in_join_link of this GroupsgroupIdsettingsMeetingSecurity.

        Whether the meeting passcode will be encrypted and included in the invitation link. The provided link will allow participants to join the meeting without having to enter the passcode.  # noqa: E501

        :param embed_password_in_join_link: The embed_password_in_join_link of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._embed_password_in_join_link = embed_password_in_join_link

    @property
    def encryption_type(self):
        """Gets the encryption_type of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        The type of encryption to use when starting a meeting:  * `enhanced_encryption` - Use enhanced encryption. Encryption data is stored in the cloud.  * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be obtained by anyone else. Enabling E2EE also [**disables** certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing participants to join before the host.  # noqa: E501

        :return: The encryption_type of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this GroupsgroupIdsettingsMeetingSecurity.

        The type of encryption to use when starting a meeting:  * `enhanced_encryption` - Use enhanced encryption. Encryption data is stored in the cloud.  * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be obtained by anyone else. Enabling E2EE also [**disables** certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing participants to join before the host.  # noqa: E501

        :param encryption_type: The encryption_type of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: str
        """
        allowed_values = ["enhanced_encryption", "e2ee"]  # noqa: E501
        if encryption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_type` ({0}), must be one of {1}"  # noqa: E501
                .format(encryption_type, allowed_values)
            )

        self._encryption_type = encryption_type

    @property
    def end_to_end_encrypted_meetings(self):
        """Gets the end_to_end_encrypted_meetings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to enable end-to-end encryption for meetings. If enabled, you can specify the type of encryption in the `encryption_type` field.  # noqa: E501

        :return: The end_to_end_encrypted_meetings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._end_to_end_encrypted_meetings

    @end_to_end_encrypted_meetings.setter
    def end_to_end_encrypted_meetings(self, end_to_end_encrypted_meetings):
        """Sets the end_to_end_encrypted_meetings of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to enable end-to-end encryption for meetings. If enabled, you can specify the type of encryption in the `encryption_type` field.  # noqa: E501

        :param end_to_end_encrypted_meetings: The end_to_end_encrypted_meetings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._end_to_end_encrypted_meetings = end_to_end_encrypted_meetings

    @property
    def meeting_password(self):
        """Gets the meeting_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.us/hc/en-us/articles/203276937) meetings are **not** included in this setting.  # noqa: E501

        :return: The meeting_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_password

    @meeting_password.setter
    def meeting_password(self, meeting_password):
        """Sets the meeting_password of this GroupsgroupIdsettingsMeetingSecurity.

        Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.us/hc/en-us/articles/203276937) meetings are **not** included in this setting.  # noqa: E501

        :param meeting_password: The meeting_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._meeting_password = meeting_password

    @property
    def meeting_password_requirement(self):
        """Gets the meeting_password_requirement of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501


        :return: The meeting_password_requirement of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: GroupsgroupIdsettingsMeetingSecurityMeetingPasswordRequirement
        """
        return self._meeting_password_requirement

    @meeting_password_requirement.setter
    def meeting_password_requirement(self, meeting_password_requirement):
        """Sets the meeting_password_requirement of this GroupsgroupIdsettingsMeetingSecurity.


        :param meeting_password_requirement: The meeting_password_requirement of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: GroupsgroupIdsettingsMeetingSecurityMeetingPasswordRequirement
        """

        self._meeting_password_requirement = meeting_password_requirement

    @property
    def only_authenticated_can_join_from_webclient(self):
        """Gets the only_authenticated_can_join_from_webclient of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to specify that only authenticated users can join the meeting from the web client.  # noqa: E501

        :return: The only_authenticated_can_join_from_webclient of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._only_authenticated_can_join_from_webclient

    @only_authenticated_can_join_from_webclient.setter
    def only_authenticated_can_join_from_webclient(self, only_authenticated_can_join_from_webclient):
        """Sets the only_authenticated_can_join_from_webclient of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to specify that only authenticated users can join the meeting from the web client.  # noqa: E501

        :param only_authenticated_can_join_from_webclient: The only_authenticated_can_join_from_webclient of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._only_authenticated_can_join_from_webclient = only_authenticated_can_join_from_webclient

    @property
    def phone_password(self):
        """Gets the phone_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to require a passcode for participants joining by phone.    If enabled and the meeting is passcode-protected, a numeric passcode is required for participants to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.  # noqa: E501

        :return: The phone_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._phone_password

    @phone_password.setter
    def phone_password(self, phone_password):
        """Sets the phone_password of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to require a passcode for participants joining by phone.    If enabled and the meeting is passcode-protected, a numeric passcode is required for participants to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.  # noqa: E501

        :param phone_password: The phone_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._phone_password = phone_password

    @property
    def pmi_password(self):
        """Gets the pmi_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms systems are passcode-protected.  # noqa: E501

        :return: The pmi_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._pmi_password

    @pmi_password.setter
    def pmi_password(self, pmi_password):
        """Sets the pmi_password of this GroupsgroupIdsettingsMeetingSecurity.

        Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms systems are passcode-protected.  # noqa: E501

        :param pmi_password: The pmi_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._pmi_password = pmi_password

    @property
    def require_password_for_scheduled_meeting(self):
        """Gets the require_password_for_scheduled_meeting of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to require a passcode for meetings that have already been scheduled.  # noqa: E501

        :return: The require_password_for_scheduled_meeting of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._require_password_for_scheduled_meeting

    @require_password_for_scheduled_meeting.setter
    def require_password_for_scheduled_meeting(self, require_password_for_scheduled_meeting):
        """Sets the require_password_for_scheduled_meeting of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to require a passcode for meetings that have already been scheduled.  # noqa: E501

        :param require_password_for_scheduled_meeting: The require_password_for_scheduled_meeting of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._require_password_for_scheduled_meeting = require_password_for_scheduled_meeting

    @property
    def require_password_for_scheduled_webinar(self):
        """Gets the require_password_for_scheduled_webinar of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to require a passcode for webinars that have already been scheduled.  # noqa: E501

        :return: The require_password_for_scheduled_webinar of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._require_password_for_scheduled_webinar

    @require_password_for_scheduled_webinar.setter
    def require_password_for_scheduled_webinar(self, require_password_for_scheduled_webinar):
        """Sets the require_password_for_scheduled_webinar of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to require a passcode for webinars that have already been scheduled.  # noqa: E501

        :param require_password_for_scheduled_webinar: The require_password_for_scheduled_webinar of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._require_password_for_scheduled_webinar = require_password_for_scheduled_webinar

    @property
    def waiting_room(self):
        """Gets the waiting_room of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether participants are placed in the [**Waiting Room**](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.    If the **Waiting Room** feature is enabled, the [**Allow participants to join before host**](https://support.zoom.us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically disabled.  # noqa: E501

        :return: The waiting_room of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this GroupsgroupIdsettingsMeetingSecurity.

        Whether participants are placed in the [**Waiting Room**](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.    If the **Waiting Room** feature is enabled, the [**Allow participants to join before host**](https://support.zoom.us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically disabled.  # noqa: E501

        :param waiting_room: The waiting_room of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._waiting_room = waiting_room

    @property
    def waiting_room_settings(self):
        """Gets the waiting_room_settings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501


        :return: The waiting_room_settings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: GroupsgroupIdsettingsMeetingSecurityWaitingRoomSettings
        """
        return self._waiting_room_settings

    @waiting_room_settings.setter
    def waiting_room_settings(self, waiting_room_settings):
        """Sets the waiting_room_settings of this GroupsgroupIdsettingsMeetingSecurity.


        :param waiting_room_settings: The waiting_room_settings of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: GroupsgroupIdsettingsMeetingSecurityWaitingRoomSettings
        """

        self._waiting_room_settings = waiting_room_settings

    @property
    def webinar_password(self):
        """Gets the webinar_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501

        Whether to generate a passcode when scheduling webinars. Participants must use the generated passcode to join the scheduled webinar.  # noqa: E501

        :return: The webinar_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_password

    @webinar_password.setter
    def webinar_password(self, webinar_password):
        """Sets the webinar_password of this GroupsgroupIdsettingsMeetingSecurity.

        Whether to generate a passcode when scheduling webinars. Participants must use the generated passcode to join the scheduled webinar.  # noqa: E501

        :param webinar_password: The webinar_password of this GroupsgroupIdsettingsMeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._webinar_password = webinar_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsgroupIdsettingsMeetingSecurity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsgroupIdsettingsMeetingSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
