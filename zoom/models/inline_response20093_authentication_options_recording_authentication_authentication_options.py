# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_option': 'bool',
        'domains': 'str',
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'visible': 'bool'
    }

    attribute_map = {
        'default_option': 'default_option',
        'domains': 'domains',
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'visible': 'visible'
    }

    def __init__(self, default_option=None, domains=None, id=None, name=None, type=None, visible=None):  # noqa: E501
        """InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions - a model defined in Swagger"""  # noqa: E501
        self._default_option = None
        self._domains = None
        self._id = None
        self._name = None
        self._type = None
        self._visible = None
        self.discriminator = None
        if default_option is not None:
            self.default_option = default_option
        if domains is not None:
            self.domains = domains
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if visible is not None:
            self.visible = visible

    @property
    def default_option(self):
        """Gets the default_option of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        Whether the authentication option is the default authentication option.  # noqa: E501

        :return: The default_option of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._default_option

    @default_option.setter
    def default_option(self, default_option):
        """Sets the default_option of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        Whether the authentication option is the default authentication option.  # noqa: E501

        :param default_option: The default_option of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: bool
        """

        self._default_option = default_option

    @property
    def domains(self):
        """Gets the domains of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        A comma-separated list of approved authentication domains.  # noqa: E501

        :return: The domains of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: str
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        A comma-separated list of approved authentication domains.  # noqa: E501

        :param domains: The domains of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: str
        """

        self._domains = domains

    @property
    def id(self):
        """Gets the id of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        The authentication option's ID.  # noqa: E501

        :return: The id of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        The authentication option's ID.  # noqa: E501

        :param id: The id of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        The authentication option's name.  # noqa: E501

        :return: The name of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        The authentication option's name.  # noqa: E501

        :param name: The name of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        The authentication type.   * `enforce_login` - Only users logged in to Zoom can view the recordings.   * `enforce_login_with_domains` - Only users from specific domains can view the recordings. The list of domains is defined in the `domains` field.   * `internally` - Only the Zoom account's users can view the recordings.  # noqa: E501

        :return: The type of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        The authentication type.   * `enforce_login` - Only users logged in to Zoom can view the recordings.   * `enforce_login_with_domains` - Only users from specific domains can view the recordings. The list of domains is defined in the `domains` field.   * `internally` - Only the Zoom account's users can view the recordings.  # noqa: E501

        :param type: The type of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enforce_login", "enforce_login_with_domains", "internally"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visible(self):
        """Gets the visible of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501

        Whether the authentication option is visible.  # noqa: E501

        :return: The visible of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.

        Whether the authentication option is visible.  # noqa: E501

        :param visible: The visible of this InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20093AuthenticationOptionsRecordingAuthenticationAuthenticationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
