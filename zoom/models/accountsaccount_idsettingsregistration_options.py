# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsregistrationOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_email_notification': 'bool',
        'close_registration': 'bool',
        'allow_participants_to_join_from_multiple_devices': 'bool',
        'show_social_share_buttons': 'bool'
    }

    attribute_map = {
        'host_email_notification': 'host_email_notification',
        'close_registration': 'close_registration',
        'allow_participants_to_join_from_multiple_devices': 'allow_participants_to_join_from_multiple_devices',
        'show_social_share_buttons': 'show_social_share_buttons'
    }

    def __init__(self, host_email_notification=None, close_registration=None, allow_participants_to_join_from_multiple_devices=None, show_social_share_buttons=None):  # noqa: E501
        """AccountsaccountIdsettingsregistrationOptions - a model defined in Swagger"""  # noqa: E501
        self._host_email_notification = None
        self._close_registration = None
        self._allow_participants_to_join_from_multiple_devices = None
        self._show_social_share_buttons = None
        self.discriminator = None
        if host_email_notification is not None:
            self.host_email_notification = host_email_notification
        if close_registration is not None:
            self.close_registration = close_registration
        if allow_participants_to_join_from_multiple_devices is not None:
            self.allow_participants_to_join_from_multiple_devices = allow_participants_to_join_from_multiple_devices
        if show_social_share_buttons is not None:
            self.show_social_share_buttons = show_social_share_buttons

    @property
    def host_email_notification(self):
        """Gets the host_email_notification of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501

        Send an email to host when someone registers.  # noqa: E501

        :return: The host_email_notification of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._host_email_notification

    @host_email_notification.setter
    def host_email_notification(self, host_email_notification):
        """Sets the host_email_notification of this AccountsaccountIdsettingsregistrationOptions.

        Send an email to host when someone registers.  # noqa: E501

        :param host_email_notification: The host_email_notification of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :type: bool
        """

        self._host_email_notification = host_email_notification

    @property
    def close_registration(self):
        """Gets the close_registration of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501

        Close registration after event date.  # noqa: E501

        :return: The close_registration of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._close_registration

    @close_registration.setter
    def close_registration(self, close_registration):
        """Sets the close_registration of this AccountsaccountIdsettingsregistrationOptions.

        Close registration after event date.  # noqa: E501

        :param close_registration: The close_registration of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :type: bool
        """

        self._close_registration = close_registration

    @property
    def allow_participants_to_join_from_multiple_devices(self):
        """Gets the allow_participants_to_join_from_multiple_devices of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501

        Allow participants to join from multiple devices  # noqa: E501

        :return: The allow_participants_to_join_from_multiple_devices of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_participants_to_join_from_multiple_devices

    @allow_participants_to_join_from_multiple_devices.setter
    def allow_participants_to_join_from_multiple_devices(self, allow_participants_to_join_from_multiple_devices):
        """Sets the allow_participants_to_join_from_multiple_devices of this AccountsaccountIdsettingsregistrationOptions.

        Allow participants to join from multiple devices  # noqa: E501

        :param allow_participants_to_join_from_multiple_devices: The allow_participants_to_join_from_multiple_devices of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :type: bool
        """

        self._allow_participants_to_join_from_multiple_devices = allow_participants_to_join_from_multiple_devices

    @property
    def show_social_share_buttons(self):
        """Gets the show_social_share_buttons of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501

        Show social share buttons on registration page  # noqa: E501

        :return: The show_social_share_buttons of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._show_social_share_buttons

    @show_social_share_buttons.setter
    def show_social_share_buttons(self, show_social_share_buttons):
        """Sets the show_social_share_buttons of this AccountsaccountIdsettingsregistrationOptions.

        Show social share buttons on registration page  # noqa: E501

        :param show_social_share_buttons: The show_social_share_buttons of this AccountsaccountIdsettingsregistrationOptions.  # noqa: E501
        :type: bool
        """

        self._show_social_share_buttons = show_social_share_buttons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsregistrationOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsregistrationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
