# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParticipantQOS1WifiRssi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_rssi': 'int',
        'avg_rssi': 'int',
        'min_rssi': 'int',
        'rssi_unit': 'str'
    }

    attribute_map = {
        'max_rssi': 'max_rssi',
        'avg_rssi': 'avg_rssi',
        'min_rssi': 'min_rssi',
        'rssi_unit': 'rssi_unit'
    }

    def __init__(self, max_rssi=None, avg_rssi=None, min_rssi=None, rssi_unit=None):  # noqa: E501
        """ParticipantQOS1WifiRssi - a model defined in Swagger"""  # noqa: E501
        self._max_rssi = None
        self._avg_rssi = None
        self._min_rssi = None
        self._rssi_unit = None
        self.discriminator = None
        if max_rssi is not None:
            self.max_rssi = max_rssi
        if avg_rssi is not None:
            self.avg_rssi = avg_rssi
        if min_rssi is not None:
            self.min_rssi = min_rssi
        if rssi_unit is not None:
            self.rssi_unit = rssi_unit

    @property
    def max_rssi(self):
        """Gets the max_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501

        Maximum value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :return: The max_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :rtype: int
        """
        return self._max_rssi

    @max_rssi.setter
    def max_rssi(self, max_rssi):
        """Sets the max_rssi of this ParticipantQOS1WifiRssi.

        Maximum value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :param max_rssi: The max_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :type: int
        """

        self._max_rssi = max_rssi

    @property
    def avg_rssi(self):
        """Gets the avg_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501

        Average value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :return: The avg_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :rtype: int
        """
        return self._avg_rssi

    @avg_rssi.setter
    def avg_rssi(self, avg_rssi):
        """Sets the avg_rssi of this ParticipantQOS1WifiRssi.

        Average value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :param avg_rssi: The avg_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :type: int
        """

        self._avg_rssi = avg_rssi

    @property
    def min_rssi(self):
        """Gets the min_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501

        Minimum value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :return: The min_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :rtype: int
        """
        return self._min_rssi

    @min_rssi.setter
    def min_rssi(self, min_rssi):
        """Sets the min_rssi of this ParticipantQOS1WifiRssi.

        Minimum value of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :param min_rssi: The min_rssi of this ParticipantQOS1WifiRssi.  # noqa: E501
        :type: int
        """

        self._min_rssi = min_rssi

    @property
    def rssi_unit(self):
        """Gets the rssi_unit of this ParticipantQOS1WifiRssi.  # noqa: E501

        Unit of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :return: The rssi_unit of this ParticipantQOS1WifiRssi.  # noqa: E501
        :rtype: str
        """
        return self._rssi_unit

    @rssi_unit.setter
    def rssi_unit(self, rssi_unit):
        """Sets the rssi_unit of this ParticipantQOS1WifiRssi.

        Unit of the wireless network's received signal strength indicator (RSSI).  # noqa: E501

        :param rssi_unit: The rssi_unit of this ParticipantQOS1WifiRssi.  # noqa: E501
        :type: str
        """

        self._rssi_unit = rssi_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParticipantQOS1WifiRssi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticipantQOS1WifiRssi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
