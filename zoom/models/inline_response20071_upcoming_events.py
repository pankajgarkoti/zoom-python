# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20071UpcomingEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dept': 'str',
        'host_id': 'str',
        'host_name': 'str',
        'id': 'str',
        'start_time': 'str',
        'topic': 'str'
    }

    attribute_map = {
        'dept': 'dept',
        'host_id': 'host_id',
        'host_name': 'host_name',
        'id': 'id',
        'start_time': 'start_time',
        'topic': 'topic'
    }

    def __init__(self, dept=None, host_id=None, host_name=None, id=None, start_time=None, topic=None):  # noqa: E501
        """InlineResponse20071UpcomingEvents - a model defined in Swagger"""  # noqa: E501
        self._dept = None
        self._host_id = None
        self._host_name = None
        self._id = None
        self._start_time = None
        self._topic = None
        self.discriminator = None
        if dept is not None:
            self.dept = dept
        if host_id is not None:
            self.host_id = host_id
        if host_name is not None:
            self.host_name = host_name
        if id is not None:
            self.id = id
        if start_time is not None:
            self.start_time = start_time
        if topic is not None:
            self.topic = topic

    @property
    def dept(self):
        """Gets the dept of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event host's department.  # noqa: E501

        :return: The dept of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse20071UpcomingEvents.

        The event host's department.  # noqa: E501

        :param dept: The dept of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event host's ID.  # noqa: E501

        :return: The host_id of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse20071UpcomingEvents.

        The event host's ID.  # noqa: E501

        :param host_id: The host_id of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event host's name.  # noqa: E501

        :return: The host_name of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this InlineResponse20071UpcomingEvents.

        The event host's name.  # noqa: E501

        :param host_name: The host_name of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def id(self):
        """Gets the id of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event's unique ID.  # noqa: E501

        :return: The id of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20071UpcomingEvents.

        The event's unique ID.  # noqa: E501

        :param id: The id of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event's start time.  # noqa: E501

        :return: The start_time of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20071UpcomingEvents.

        The event's start time.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def topic(self):
        """Gets the topic of this InlineResponse20071UpcomingEvents.  # noqa: E501

        The event's topic.  # noqa: E501

        :return: The topic of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this InlineResponse20071UpcomingEvents.

        The event's topic.  # noqa: E501

        :param topic: The topic of this InlineResponse20071UpcomingEvents.  # noqa: E501
        :type: str
        """

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20071UpcomingEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20071UpcomingEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
