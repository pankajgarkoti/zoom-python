# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InformationBarrierspoliciesSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complete_phone_calls': 'bool',
        'file_transfer': 'bool',
        'im': 'bool',
        'in_meeting_chat': 'bool',
        'meeting': 'bool',
        'message_via_sms': 'bool',
        'recording': 'bool',
        'screen_share': 'bool'
    }

    attribute_map = {
        'complete_phone_calls': 'complete_phone_calls',
        'file_transfer': 'file_transfer',
        'im': 'im',
        'in_meeting_chat': 'in_meeting_chat',
        'meeting': 'meeting',
        'message_via_sms': 'message_via_sms',
        'recording': 'recording',
        'screen_share': 'screen_share'
    }

    def __init__(self, complete_phone_calls=None, file_transfer=None, im=None, in_meeting_chat=None, meeting=None, message_via_sms=None, recording=None, screen_share=None):  # noqa: E501
        """InformationBarrierspoliciesSettings - a model defined in Swagger"""  # noqa: E501
        self._complete_phone_calls = None
        self._file_transfer = None
        self._im = None
        self._in_meeting_chat = None
        self._meeting = None
        self._message_via_sms = None
        self._recording = None
        self._screen_share = None
        self.discriminator = None
        self.complete_phone_calls = complete_phone_calls
        self.file_transfer = file_transfer
        self.im = im
        self.in_meeting_chat = in_meeting_chat
        self.meeting = meeting
        self.message_via_sms = message_via_sms
        self.recording = recording
        self.screen_share = screen_share

    @property
    def complete_phone_calls(self):
        """Gets the complete_phone_calls of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** call each other.  # noqa: E501

        :return: The complete_phone_calls of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._complete_phone_calls

    @complete_phone_calls.setter
    def complete_phone_calls(self, complete_phone_calls):
        """Sets the complete_phone_calls of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** call each other.  # noqa: E501

        :param complete_phone_calls: The complete_phone_calls of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if complete_phone_calls is None:
            raise ValueError("Invalid value for `complete_phone_calls`, must not be `None`")  # noqa: E501

        self._complete_phone_calls = complete_phone_calls

    @property
    def file_transfer(self):
        """Gets the file_transfer of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** transfer files in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :return: The file_transfer of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._file_transfer

    @file_transfer.setter
    def file_transfer(self, file_transfer):
        """Sets the file_transfer of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** transfer files in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :param file_transfer: The file_transfer of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if file_transfer is None:
            raise ValueError("Invalid value for `file_transfer`, must not be `None`")  # noqa: E501

        self._file_transfer = file_transfer

    @property
    def im(self):
        """Gets the im of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** IM chat. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :return: The im of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._im

    @im.setter
    def im(self, im):
        """Sets the im of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** IM chat. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :param im: The im of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if im is None:
            raise ValueError("Invalid value for `im`, must not be `None`")  # noqa: E501

        self._im = im

    @property
    def in_meeting_chat(self):
        """Gets the in_meeting_chat of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** use chat in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :return: The in_meeting_chat of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._in_meeting_chat

    @in_meeting_chat.setter
    def in_meeting_chat(self, in_meeting_chat):
        """Sets the in_meeting_chat of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** use chat in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :param in_meeting_chat: The in_meeting_chat of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if in_meeting_chat is None:
            raise ValueError("Invalid value for `in_meeting_chat`, must not be `None`")  # noqa: E501

        self._in_meeting_chat = in_meeting_chat

    @property
    def meeting(self):
        """Gets the meeting of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, the users between groups **cannot** meet. This also creates a [hard block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups.  # noqa: E501

        :return: The meeting of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._meeting

    @meeting.setter
    def meeting(self, meeting):
        """Sets the meeting of this InformationBarrierspoliciesSettings.

        If true, the users between groups **cannot** meet. This also creates a [hard block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups.  # noqa: E501

        :param meeting: The meeting of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if meeting is None:
            raise ValueError("Invalid value for `meeting`, must not be `None`")  # noqa: E501

        self._meeting = meeting

    @property
    def message_via_sms(self):
        """Gets the message_via_sms of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** user SMS.  # noqa: E501

        :return: The message_via_sms of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._message_via_sms

    @message_via_sms.setter
    def message_via_sms(self, message_via_sms):
        """Sets the message_via_sms of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** user SMS.  # noqa: E501

        :param message_via_sms: The message_via_sms of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if message_via_sms is None:
            raise ValueError("Invalid value for `message_via_sms`, must not be `None`")  # noqa: E501

        self._message_via_sms = message_via_sms

    @property
    def recording(self):
        """Gets the recording of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** record the meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.   This feature is only available for Zoom Client v5.6.0 and higher.  # noqa: E501

        :return: The recording of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** record the meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.   This feature is only available for Zoom Client v5.6.0 and higher.  # noqa: E501

        :param recording: The recording of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if recording is None:
            raise ValueError("Invalid value for `recording`, must not be `None`")  # noqa: E501

        self._recording = recording

    @property
    def screen_share(self):
        """Gets the screen_share of this InformationBarrierspoliciesSettings.  # noqa: E501

        If true, users between groups **cannot** share screens in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :return: The screen_share of this InformationBarrierspoliciesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._screen_share

    @screen_share.setter
    def screen_share(self, screen_share):
        """Sets the screen_share of this InformationBarrierspoliciesSettings.

        If true, users between groups **cannot** share screens in a meeting. This also creates a [soft block](https://support.zoom.us/hc/en-us/articles/360040913711-Information-Barriers#h_a603c6f7-05c8-4de5-b4b6-91982d748b34) between both groups if the `meeting` value is `false`.  # noqa: E501

        :param screen_share: The screen_share of this InformationBarrierspoliciesSettings.  # noqa: E501
        :type: bool
        """
        if screen_share is None:
            raise ValueError("Invalid value for `screen_share`, must not be `None`")  # noqa: E501

        self._screen_share = screen_share

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InformationBarrierspoliciesSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InformationBarrierspoliciesSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
