# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20027Participants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'list[InlineResponse20027Details]',
        'id': 'str',
        'user_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'details': 'details',
        'id': 'id',
        'user_id': 'user_id',
        'user_name': 'user_name'
    }

    def __init__(self, details=None, id=None, user_id=None, user_name=None):  # noqa: E501
        """InlineResponse20027Participants - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._id = None
        self._user_id = None
        self._user_name = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def details(self):
        """Gets the details of this InlineResponse20027Participants.  # noqa: E501

        Array of sharing and recording details.  # noqa: E501

        :return: The details of this InlineResponse20027Participants.  # noqa: E501
        :rtype: list[InlineResponse20027Details]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InlineResponse20027Participants.

        Array of sharing and recording details.  # noqa: E501

        :param details: The details of this InlineResponse20027Participants.  # noqa: E501
        :type: list[InlineResponse20027Details]
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this InlineResponse20027Participants.  # noqa: E501

        Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.  # noqa: E501

        :return: The id of this InlineResponse20027Participants.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20027Participants.

        Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.  # noqa: E501

        :param id: The id of this InlineResponse20027Participants.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20027Participants.  # noqa: E501

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :return: The user_id of this InlineResponse20027Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20027Participants.

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20027Participants.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20027Participants.  # noqa: E501

        Participant display name.  # noqa: E501

        :return: The user_name of this InlineResponse20027Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20027Participants.

        Participant display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20027Participants.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027Participants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027Participants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
