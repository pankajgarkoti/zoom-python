# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZoomappDeeplinkBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'user_id': 'str',
        'action': 'str'
    }

    attribute_map = {
        'type': 'type',
        'user_id': 'user_id',
        'action': 'action'
    }

    def __init__(self, type=None, user_id=None, action=None):  # noqa: E501
        """ZoomappDeeplinkBody - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._user_id = None
        self._action = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if action is not None:
            self.action = action

    @property
    def type(self):
        """Gets the type of this ZoomappDeeplinkBody.  # noqa: E501

        The type of deeplink.  * `1` &mdash; Generate a deeplink that opens Zoom App in-meeting if the meeting is in progress, if not opens Zoom App in Apps Tab. \\n* `2` &mdash;  Generate a deeplink that refreshes Chat App Webview.    This value defaults to `1`.  # noqa: E501

        :return: The type of this ZoomappDeeplinkBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ZoomappDeeplinkBody.

        The type of deeplink.  * `1` &mdash; Generate a deeplink that opens Zoom App in-meeting if the meeting is in progress, if not opens Zoom App in Apps Tab. \\n* `2` &mdash;  Generate a deeplink that refreshes Chat App Webview.    This value defaults to `1`.  # noqa: E501

        :param type: The type of this ZoomappDeeplinkBody.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this ZoomappDeeplinkBody.  # noqa: E501

        The 'userId' property of the app deeplink. This field only applies to account level OAuth token.  # noqa: E501

        :return: The user_id of this ZoomappDeeplinkBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ZoomappDeeplinkBody.

        The 'userId' property of the app deeplink. This field only applies to account level OAuth token.  # noqa: E501

        :param user_id: The user_id of this ZoomappDeeplinkBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def action(self):
        """Gets the action of this ZoomappDeeplinkBody.  # noqa: E501

        The action of the deeplink, it's a user-defined string.  # noqa: E501

        :return: The action of this ZoomappDeeplinkBody.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ZoomappDeeplinkBody.

        The action of the deeplink, it's a user-defined string.  # noqa: E501

        :param action: The action of this ZoomappDeeplinkBody.  # noqa: E501
        :type: str
        """

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoomappDeeplinkBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoomappDeeplinkBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
