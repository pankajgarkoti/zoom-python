# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'user_info': 'UsersUserInfo'
    }

    attribute_map = {
        'action': 'action',
        'user_info': 'user_info'
    }

    def __init__(self, action=None, user_info=None):  # noqa: E501
        """UsersBody - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._user_info = None
        self.discriminator = None
        self.action = action
        if user_info is not None:
            self.user_info = user_info

    @property
    def action(self):
        """Gets the action of this UsersBody.  # noqa: E501

        The action to take to create the new user.  * `create` - The user receives an email from Zoom containing a confirmation link. The user must then use the link to activate their Zoom account. The user can then set or change their password.  * `autoCreate` - This action is for Enterprise customers with a managed domain. autoCreate creates an email login type for users.  * `custCreate` - Users created with this action do not have passwords and will **not** have the ability to log into the Zoom web portal or the Zoom client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must [contact the Integrated Software Vendor (ISV) sales team](https://explore.zoom.us/en/isv/#isv).  * `ssoCreate` - This action is provided for the enabled &ldquo;Pre-provisioning SSO User&rdquo; option. A user created this way has no password. If it is **not** a Basic user, a personal vanity URL with the username (no domain) of the provisioning email is generated. If the username or PMI is invalid or occupied, it uses a random number or random personal vanity URL.  # noqa: E501

        :return: The action of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UsersBody.

        The action to take to create the new user.  * `create` - The user receives an email from Zoom containing a confirmation link. The user must then use the link to activate their Zoom account. The user can then set or change their password.  * `autoCreate` - This action is for Enterprise customers with a managed domain. autoCreate creates an email login type for users.  * `custCreate` - Users created with this action do not have passwords and will **not** have the ability to log into the Zoom web portal or the Zoom client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must [contact the Integrated Software Vendor (ISV) sales team](https://explore.zoom.us/en/isv/#isv).  * `ssoCreate` - This action is provided for the enabled &ldquo;Pre-provisioning SSO User&rdquo; option. A user created this way has no password. If it is **not** a Basic user, a personal vanity URL with the username (no domain) of the provisioning email is generated. If the username or PMI is invalid or occupied, it uses a random number or random personal vanity URL.  # noqa: E501

        :param action: The action of this UsersBody.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["create", "autoCreate", "custCreate", "ssoCreate"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def user_info(self):
        """Gets the user_info of this UsersBody.  # noqa: E501


        :return: The user_info of this UsersBody.  # noqa: E501
        :rtype: UsersUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this UsersBody.


        :param user_info: The user_info of this UsersBody.  # noqa: E501
        :type: UsersUserInfo
        """

        self._user_info = user_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
