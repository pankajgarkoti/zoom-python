# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebinarSurveyObjectCustomSurvey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'anonymous': 'bool',
        'numbered_questions': 'bool',
        'show_question_type': 'bool',
        'feedback': 'str',
        'questions': 'list[WebinarSurveyObjectCustomSurveyQuestions]'
    }

    attribute_map = {
        'title': 'title',
        'anonymous': 'anonymous',
        'numbered_questions': 'numbered_questions',
        'show_question_type': 'show_question_type',
        'feedback': 'feedback',
        'questions': 'questions'
    }

    def __init__(self, title=None, anonymous=False, numbered_questions=False, show_question_type=False, feedback=None, questions=None):  # noqa: E501
        """WebinarSurveyObjectCustomSurvey - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._anonymous = None
        self._numbered_questions = None
        self._show_question_type = None
        self._feedback = None
        self._questions = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if anonymous is not None:
            self.anonymous = anonymous
        if numbered_questions is not None:
            self.numbered_questions = numbered_questions
        if show_question_type is not None:
            self.show_question_type = show_question_type
        if feedback is not None:
            self.feedback = feedback
        if questions is not None:
            self.questions = questions

    @property
    def title(self):
        """Gets the title of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        The survey's title, up to 64 characters.  # noqa: E501

        :return: The title of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WebinarSurveyObjectCustomSurvey.

        The survey's title, up to 64 characters.  # noqa: E501

        :param title: The title of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def anonymous(self):
        """Gets the anonymous of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        Allow participants to anonymously answer survey questions.  * `true` - Anonymous survey enabled.  * `false` - Participants cannot answer survey questions anonymously.    This value defaults to `true`.  # noqa: E501

        :return: The anonymous of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous):
        """Sets the anonymous of this WebinarSurveyObjectCustomSurvey.

        Allow participants to anonymously answer survey questions.  * `true` - Anonymous survey enabled.  * `false` - Participants cannot answer survey questions anonymously.    This value defaults to `true`.  # noqa: E501

        :param anonymous: The anonymous of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: bool
        """

        self._anonymous = anonymous

    @property
    def numbered_questions(self):
        """Gets the numbered_questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        Whether to display the number in the question name.    This value defaults to `true`.  # noqa: E501

        :return: The numbered_questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: bool
        """
        return self._numbered_questions

    @numbered_questions.setter
    def numbered_questions(self, numbered_questions):
        """Sets the numbered_questions of this WebinarSurveyObjectCustomSurvey.

        Whether to display the number in the question name.    This value defaults to `true`.  # noqa: E501

        :param numbered_questions: The numbered_questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: bool
        """

        self._numbered_questions = numbered_questions

    @property
    def show_question_type(self):
        """Gets the show_question_type of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        Whether to display the question type in the question name.    This value defaults to `false`.  # noqa: E501

        :return: The show_question_type of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: bool
        """
        return self._show_question_type

    @show_question_type.setter
    def show_question_type(self, show_question_type):
        """Sets the show_question_type of this WebinarSurveyObjectCustomSurvey.

        Whether to display the question type in the question name.    This value defaults to `false`.  # noqa: E501

        :param show_question_type: The show_question_type of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: bool
        """

        self._show_question_type = show_question_type

    @property
    def feedback(self):
        """Gets the feedback of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        The survey's feedback, up to 320 characters.    This value defaults to `Thank you so much for taking the time to complete the survey, your feedback really makes a difference.`.  # noqa: E501

        :return: The feedback of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this WebinarSurveyObjectCustomSurvey.

        The survey's feedback, up to 320 characters.    This value defaults to `Thank you so much for taking the time to complete the survey, your feedback really makes a difference.`.  # noqa: E501

        :param feedback: The feedback of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: str
        """

        self._feedback = feedback

    @property
    def questions(self):
        """Gets the questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501

        Information about the webinar survey's questions.  # noqa: E501

        :return: The questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :rtype: list[WebinarSurveyObjectCustomSurveyQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this WebinarSurveyObjectCustomSurvey.

        Information about the webinar survey's questions.  # noqa: E501

        :param questions: The questions of this WebinarSurveyObjectCustomSurvey.  # noqa: E501
        :type: list[WebinarSurveyObjectCustomSurveyQuestions]
        """

        self._questions = questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebinarSurveyObjectCustomSurvey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebinarSurveyObjectCustomSurvey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
