# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PanelistListPanelists(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'name': 'str',
        'join_url': 'str',
        'virtual_background_id': 'str',
        'name_tag_id': 'str',
        'name_tag_name': 'str',
        'name_tag_pronouns': 'str',
        'name_tag_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'name': 'name',
        'join_url': 'join_url',
        'virtual_background_id': 'virtual_background_id',
        'name_tag_id': 'name_tag_id',
        'name_tag_name': 'name_tag_name',
        'name_tag_pronouns': 'name_tag_pronouns',
        'name_tag_description': 'name_tag_description'
    }

    def __init__(self, id=None, email=None, name=None, join_url=None, virtual_background_id=None, name_tag_id=None, name_tag_name=None, name_tag_pronouns=None, name_tag_description=None):  # noqa: E501
        """PanelistListPanelists - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._name = None
        self._join_url = None
        self._virtual_background_id = None
        self._name_tag_id = None
        self._name_tag_name = None
        self._name_tag_pronouns = None
        self._name_tag_description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if join_url is not None:
            self.join_url = join_url
        if virtual_background_id is not None:
            self.virtual_background_id = virtual_background_id
        if name_tag_id is not None:
            self.name_tag_id = name_tag_id
        if name_tag_name is not None:
            self.name_tag_name = name_tag_name
        if name_tag_pronouns is not None:
            self.name_tag_pronouns = name_tag_pronouns
        if name_tag_description is not None:
            self.name_tag_description = name_tag_description

    @property
    def id(self):
        """Gets the id of this PanelistListPanelists.  # noqa: E501

        Panelist's ID.  # noqa: E501

        :return: The id of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PanelistListPanelists.

        Panelist's ID.  # noqa: E501

        :param id: The id of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this PanelistListPanelists.  # noqa: E501

        Panelist's email. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.  # noqa: E501

        :return: The email of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PanelistListPanelists.

        Panelist's email. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.  # noqa: E501

        :param email: The email of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this PanelistListPanelists.  # noqa: E501

        The panelist's full name.  **Note** This value cannot exceed more than 12 Chinese characters.  # noqa: E501

        :return: The name of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PanelistListPanelists.

        The panelist's full name.  **Note** This value cannot exceed more than 12 Chinese characters.  # noqa: E501

        :param name: The name of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def join_url(self):
        """Gets the join_url of this PanelistListPanelists.  # noqa: E501

        Join URL.  # noqa: E501

        :return: The join_url of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this PanelistListPanelists.

        Join URL.  # noqa: E501

        :param join_url: The join_url of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._join_url = join_url

    @property
    def virtual_background_id(self):
        """Gets the virtual_background_id of this PanelistListPanelists.  # noqa: E501

        The virtual background's ID.  # noqa: E501

        :return: The virtual_background_id of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._virtual_background_id

    @virtual_background_id.setter
    def virtual_background_id(self, virtual_background_id):
        """Sets the virtual_background_id of this PanelistListPanelists.

        The virtual background's ID.  # noqa: E501

        :param virtual_background_id: The virtual_background_id of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._virtual_background_id = virtual_background_id

    @property
    def name_tag_id(self):
        """Gets the name_tag_id of this PanelistListPanelists.  # noqa: E501

        The name tag ID to bind.  # noqa: E501

        :return: The name_tag_id of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._name_tag_id

    @name_tag_id.setter
    def name_tag_id(self, name_tag_id):
        """Sets the name_tag_id of this PanelistListPanelists.

        The name tag ID to bind.  # noqa: E501

        :param name_tag_id: The name_tag_id of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._name_tag_id = name_tag_id

    @property
    def name_tag_name(self):
        """Gets the name_tag_name of this PanelistListPanelists.  # noqa: E501

        The panelist's name to display in the name tag.  # noqa: E501

        :return: The name_tag_name of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._name_tag_name

    @name_tag_name.setter
    def name_tag_name(self, name_tag_name):
        """Sets the name_tag_name of this PanelistListPanelists.

        The panelist's name to display in the name tag.  # noqa: E501

        :param name_tag_name: The name_tag_name of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._name_tag_name = name_tag_name

    @property
    def name_tag_pronouns(self):
        """Gets the name_tag_pronouns of this PanelistListPanelists.  # noqa: E501

        The pronouns to display in the name tag.  # noqa: E501

        :return: The name_tag_pronouns of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._name_tag_pronouns

    @name_tag_pronouns.setter
    def name_tag_pronouns(self, name_tag_pronouns):
        """Sets the name_tag_pronouns of this PanelistListPanelists.

        The pronouns to display in the name tag.  # noqa: E501

        :param name_tag_pronouns: The name_tag_pronouns of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._name_tag_pronouns = name_tag_pronouns

    @property
    def name_tag_description(self):
        """Gets the name_tag_description of this PanelistListPanelists.  # noqa: E501

        The description for the name tag, such as the person's title).  # noqa: E501

        :return: The name_tag_description of this PanelistListPanelists.  # noqa: E501
        :rtype: str
        """
        return self._name_tag_description

    @name_tag_description.setter
    def name_tag_description(self, name_tag_description):
        """Sets the name_tag_description of this PanelistListPanelists.

        The description for the name tag, such as the person's title).  # noqa: E501

        :param name_tag_description: The name_tag_description of this PanelistListPanelists.  # noqa: E501
        :type: str
        """

        self._name_tag_description = name_tag_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PanelistListPanelists, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PanelistListPanelists):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
