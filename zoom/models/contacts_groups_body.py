# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactsGroupsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_privacy': 'int',
        'description': 'str',
        'group_members': 'list[ContactsgroupsGroupMembers]'
    }

    attribute_map = {
        'group_name': 'group_name',
        'group_privacy': 'group_privacy',
        'description': 'description',
        'group_members': 'group_members'
    }

    def __init__(self, group_name=None, group_privacy=None, description=None, group_members=None):  # noqa: E501
        """ContactsGroupsBody - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._group_privacy = None
        self._description = None
        self._group_members = None
        self.discriminator = None
        if group_name is not None:
            self.group_name = group_name
        if group_privacy is not None:
            self.group_privacy = group_privacy
        if description is not None:
            self.description = description
        if group_members is not None:
            self.group_members = group_members

    @property
    def group_name(self):
        """Gets the group_name of this ContactsGroupsBody.  # noqa: E501

        The contact group's name.  # noqa: E501

        :return: The group_name of this ContactsGroupsBody.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ContactsGroupsBody.

        The contact group's name.  # noqa: E501

        :param group_name: The group_name of this ContactsGroupsBody.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_privacy(self):
        """Gets the group_privacy of this ContactsGroupsBody.  # noqa: E501

        Contact group privacy configuration:    `1` - Visible to anyone, searchable by anyone.    `2` - Visible to members only, searchable by anyone.    `3` - Visible to members only, searchable by members only.  # noqa: E501

        :return: The group_privacy of this ContactsGroupsBody.  # noqa: E501
        :rtype: int
        """
        return self._group_privacy

    @group_privacy.setter
    def group_privacy(self, group_privacy):
        """Sets the group_privacy of this ContactsGroupsBody.

        Contact group privacy configuration:    `1` - Visible to anyone, searchable by anyone.    `2` - Visible to members only, searchable by anyone.    `3` - Visible to members only, searchable by members only.  # noqa: E501

        :param group_privacy: The group_privacy of this ContactsGroupsBody.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if group_privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `group_privacy` ({0}), must be one of {1}"  # noqa: E501
                .format(group_privacy, allowed_values)
            )

        self._group_privacy = group_privacy

    @property
    def description(self):
        """Gets the description of this ContactsGroupsBody.  # noqa: E501

        The group description.  # noqa: E501

        :return: The description of this ContactsGroupsBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactsGroupsBody.

        The group description.  # noqa: E501

        :param description: The description of this ContactsGroupsBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group_members(self):
        """Gets the group_members of this ContactsGroupsBody.  # noqa: E501


        :return: The group_members of this ContactsGroupsBody.  # noqa: E501
        :rtype: list[ContactsgroupsGroupMembers]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members):
        """Sets the group_members of this ContactsGroupsBody.


        :param group_members: The group_members of this ContactsGroupsBody.  # noqa: E501
        :type: list[ContactsgroupsGroupMembers]
        """

        self._group_members = group_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactsGroupsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactsGroupsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
