# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200MeetingSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved_or_denied_countries_or_regions': 'bool',
        'auto_security': 'bool',
        'block_user_domain': 'bool',
        'chat_etiquette_tool': 'bool',
        'embed_password_in_join_link': 'bool',
        'encryption_type': 'bool',
        'end_to_end_encrypted_meetings': 'bool',
        'meeting_password': 'bool',
        'only_authenticated_can_join_from_webclient': 'bool',
        'phone_password': 'bool',
        'pmi_password': 'bool',
        'waiting_room': 'bool',
        'webinar_password': 'bool'
    }

    attribute_map = {
        'approved_or_denied_countries_or_regions': 'approved_or_denied_countries_or_regions',
        'auto_security': 'auto_security',
        'block_user_domain': 'block_user_domain',
        'chat_etiquette_tool': 'chat_etiquette_tool',
        'embed_password_in_join_link': 'embed_password_in_join_link',
        'encryption_type': 'encryption_type',
        'end_to_end_encrypted_meetings': 'end_to_end_encrypted_meetings',
        'meeting_password': 'meeting_password',
        'only_authenticated_can_join_from_webclient': 'only_authenticated_can_join_from_webclient',
        'phone_password': 'phone_password',
        'pmi_password': 'pmi_password',
        'waiting_room': 'waiting_room',
        'webinar_password': 'webinar_password'
    }

    def __init__(self, approved_or_denied_countries_or_regions=None, auto_security=None, block_user_domain=None, chat_etiquette_tool=None, embed_password_in_join_link=None, encryption_type=None, end_to_end_encrypted_meetings=None, meeting_password=None, only_authenticated_can_join_from_webclient=None, phone_password=None, pmi_password=None, waiting_room=None, webinar_password=None):  # noqa: E501
        """InlineResponse200MeetingSecurity - a model defined in Swagger"""  # noqa: E501
        self._approved_or_denied_countries_or_regions = None
        self._auto_security = None
        self._block_user_domain = None
        self._chat_etiquette_tool = None
        self._embed_password_in_join_link = None
        self._encryption_type = None
        self._end_to_end_encrypted_meetings = None
        self._meeting_password = None
        self._only_authenticated_can_join_from_webclient = None
        self._phone_password = None
        self._pmi_password = None
        self._waiting_room = None
        self._webinar_password = None
        self.discriminator = None
        if approved_or_denied_countries_or_regions is not None:
            self.approved_or_denied_countries_or_regions = approved_or_denied_countries_or_regions
        if auto_security is not None:
            self.auto_security = auto_security
        if block_user_domain is not None:
            self.block_user_domain = block_user_domain
        if chat_etiquette_tool is not None:
            self.chat_etiquette_tool = chat_etiquette_tool
        if embed_password_in_join_link is not None:
            self.embed_password_in_join_link = embed_password_in_join_link
        if encryption_type is not None:
            self.encryption_type = encryption_type
        if end_to_end_encrypted_meetings is not None:
            self.end_to_end_encrypted_meetings = end_to_end_encrypted_meetings
        if meeting_password is not None:
            self.meeting_password = meeting_password
        if only_authenticated_can_join_from_webclient is not None:
            self.only_authenticated_can_join_from_webclient = only_authenticated_can_join_from_webclient
        if phone_password is not None:
            self.phone_password = phone_password
        if pmi_password is not None:
            self.pmi_password = pmi_password
        if waiting_room is not None:
            self.waiting_room = waiting_room
        if webinar_password is not None:
            self.webinar_password = webinar_password

    @property
    def approved_or_denied_countries_or_regions(self):
        """Gets the approved_or_denied_countries_or_regions of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether to enable the [**Approve or block entry for users from specific countries/regions**](https://support.zoom.us/hc/en-us/articles/360060086231-Joining-from-specific-countries-regions) setting.  # noqa: E501

        :return: The approved_or_denied_countries_or_regions of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._approved_or_denied_countries_or_regions

    @approved_or_denied_countries_or_regions.setter
    def approved_or_denied_countries_or_regions(self, approved_or_denied_countries_or_regions):
        """Sets the approved_or_denied_countries_or_regions of this InlineResponse200MeetingSecurity.

        Whether to enable the [**Approve or block entry for users from specific countries/regions**](https://support.zoom.us/hc/en-us/articles/360060086231-Joining-from-specific-countries-regions) setting.  # noqa: E501

        :param approved_or_denied_countries_or_regions: The approved_or_denied_countries_or_regions of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._approved_or_denied_countries_or_regions = approved_or_denied_countries_or_regions

    @property
    def auto_security(self):
        """Gets the auto_security of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether all meetings must be secured with at least one security option.    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts.  # noqa: E501

        :return: The auto_security of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_security

    @auto_security.setter
    def auto_security(self, auto_security):
        """Sets the auto_security of this InlineResponse200MeetingSecurity.

        Whether all meetings must be secured with at least one security option.    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts.  # noqa: E501

        :param auto_security: The auto_security of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._auto_security = auto_security

    @property
    def block_user_domain(self):
        """Gets the block_user_domain of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether users in specific domains are blocked from joining meetings and webinars.  # noqa: E501

        :return: The block_user_domain of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._block_user_domain

    @block_user_domain.setter
    def block_user_domain(self, block_user_domain):
        """Sets the block_user_domain of this InlineResponse200MeetingSecurity.

        Whether users in specific domains are blocked from joining meetings and webinars.  # noqa: E501

        :param block_user_domain: The block_user_domain of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._block_user_domain = block_user_domain

    @property
    def chat_etiquette_tool(self):
        """Gets the chat_etiquette_tool of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether to enable the **Chat Etiquette Tool**.  # noqa: E501

        :return: The chat_etiquette_tool of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._chat_etiquette_tool

    @chat_etiquette_tool.setter
    def chat_etiquette_tool(self, chat_etiquette_tool):
        """Sets the chat_etiquette_tool of this InlineResponse200MeetingSecurity.

        Whether to enable the **Chat Etiquette Tool**.  # noqa: E501

        :param chat_etiquette_tool: The chat_etiquette_tool of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._chat_etiquette_tool = chat_etiquette_tool

    @property
    def embed_password_in_join_link(self):
        """Gets the embed_password_in_join_link of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether the meeting passcode is encrypted and included in the invitation link. The provided link will allow participants to join the meeting without having to enter the passcode.  # noqa: E501

        :return: The embed_password_in_join_link of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._embed_password_in_join_link

    @embed_password_in_join_link.setter
    def embed_password_in_join_link(self, embed_password_in_join_link):
        """Sets the embed_password_in_join_link of this InlineResponse200MeetingSecurity.

        Whether the meeting passcode is encrypted and included in the invitation link. The provided link will allow participants to join the meeting without having to enter the passcode.  # noqa: E501

        :param embed_password_in_join_link: The embed_password_in_join_link of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._embed_password_in_join_link = embed_password_in_join_link

    @property
    def encryption_type(self):
        """Gets the encryption_type of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether use encryption to start a meeting.  # noqa: E501

        :return: The encryption_type of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this InlineResponse200MeetingSecurity.

        Whether use encryption to start a meeting.  # noqa: E501

        :param encryption_type: The encryption_type of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._encryption_type = encryption_type

    @property
    def end_to_end_encrypted_meetings(self):
        """Gets the end_to_end_encrypted_meetings of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether to enable end-to-end encryption for meetings.  # noqa: E501

        :return: The end_to_end_encrypted_meetings of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._end_to_end_encrypted_meetings

    @end_to_end_encrypted_meetings.setter
    def end_to_end_encrypted_meetings(self, end_to_end_encrypted_meetings):
        """Sets the end_to_end_encrypted_meetings of this InlineResponse200MeetingSecurity.

        Whether to enable end-to-end encryption for meetings.  # noqa: E501

        :param end_to_end_encrypted_meetings: The end_to_end_encrypted_meetings of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._end_to_end_encrypted_meetings = end_to_end_encrypted_meetings

    @property
    def meeting_password(self):
        """Gets the meeting_password of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.us/hc/en-us/articles/203276937) meetings are **not** included in this setting.  # noqa: E501

        :return: The meeting_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_password

    @meeting_password.setter
    def meeting_password(self, meeting_password):
        """Sets the meeting_password of this InlineResponse200MeetingSecurity.

        Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.us/hc/en-us/articles/203276937) meetings are **not** included in this setting.  # noqa: E501

        :param meeting_password: The meeting_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._meeting_password = meeting_password

    @property
    def only_authenticated_can_join_from_webclient(self):
        """Gets the only_authenticated_can_join_from_webclient of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether to specify that only authenticated users can join the meeting from the web client.  # noqa: E501

        :return: The only_authenticated_can_join_from_webclient of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._only_authenticated_can_join_from_webclient

    @only_authenticated_can_join_from_webclient.setter
    def only_authenticated_can_join_from_webclient(self, only_authenticated_can_join_from_webclient):
        """Sets the only_authenticated_can_join_from_webclient of this InlineResponse200MeetingSecurity.

        Whether to specify that only authenticated users can join the meeting from the web client.  # noqa: E501

        :param only_authenticated_can_join_from_webclient: The only_authenticated_can_join_from_webclient of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._only_authenticated_can_join_from_webclient = only_authenticated_can_join_from_webclient

    @property
    def phone_password(self):
        """Gets the phone_password of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether passcodes are required for participants joining by phone.    If enabled and the meeting is passcode-protected, a numeric passcode is required for participants to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.  # noqa: E501

        :return: The phone_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._phone_password

    @phone_password.setter
    def phone_password(self, phone_password):
        """Sets the phone_password of this InlineResponse200MeetingSecurity.

        Whether passcodes are required for participants joining by phone.    If enabled and the meeting is passcode-protected, a numeric passcode is required for participants to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.  # noqa: E501

        :param phone_password: The phone_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._phone_password = phone_password

    @property
    def pmi_password(self):
        """Gets the pmi_password of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms systems are passcode-protected.  # noqa: E501

        :return: The pmi_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._pmi_password

    @pmi_password.setter
    def pmi_password(self, pmi_password):
        """Sets the pmi_password of this InlineResponse200MeetingSecurity.

        Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms systems are passcode-protected.  # noqa: E501

        :param pmi_password: The pmi_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._pmi_password = pmi_password

    @property
    def waiting_room(self):
        """Gets the waiting_room of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether participants are placed in the [**Waiting Room**](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.    If the **Waiting Room** feature is enabled, the [**Allow participants to join before host**](https://support.zoom.us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically disabled.  # noqa: E501

        :return: The waiting_room of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this InlineResponse200MeetingSecurity.

        Whether participants are placed in the [**Waiting Room**](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.    If the **Waiting Room** feature is enabled, the [**Allow participants to join before host**](https://support.zoom.us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically disabled.  # noqa: E501

        :param waiting_room: The waiting_room of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._waiting_room = waiting_room

    @property
    def webinar_password(self):
        """Gets the webinar_password of this InlineResponse200MeetingSecurity.  # noqa: E501

        Whether to generate a passcode when scheduling webinars. Participants must use the generated passcode to join the scheduled webinar.  # noqa: E501

        :return: The webinar_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_password

    @webinar_password.setter
    def webinar_password(self, webinar_password):
        """Sets the webinar_password of this InlineResponse200MeetingSecurity.

        Whether to generate a passcode when scheduling webinars. Participants must use the generated passcode to join the scheduled webinar.  # noqa: E501

        :param webinar_password: The webinar_password of this InlineResponse200MeetingSecurity.  # noqa: E501
        :type: bool
        """

        self._webinar_password = webinar_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200MeetingSecurity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200MeetingSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
