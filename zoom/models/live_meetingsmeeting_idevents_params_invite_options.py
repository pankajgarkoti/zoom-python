# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiveMeetingsmeetingIdeventsParamsInviteOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'require_greeting': 'bool',
        'require_pressing_one': 'bool'
    }

    attribute_map = {
        'require_greeting': 'require_greeting',
        'require_pressing_one': 'require_pressing_one'
    }

    def __init__(self, require_greeting=True, require_pressing_one=True):  # noqa: E501
        """LiveMeetingsmeetingIdeventsParamsInviteOptions - a model defined in Swagger"""  # noqa: E501
        self._require_greeting = None
        self._require_pressing_one = None
        self.discriminator = None
        if require_greeting is not None:
            self.require_greeting = require_greeting
        if require_pressing_one is not None:
            self.require_pressing_one = require_pressing_one

    @property
    def require_greeting(self):
        """Gets the require_greeting of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501

        Whether to require a greeting before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.  # noqa: E501

        :return: The require_greeting of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._require_greeting

    @require_greeting.setter
    def require_greeting(self, require_greeting):
        """Sets the require_greeting of this LiveMeetingsmeetingIdeventsParamsInviteOptions.

        Whether to require a greeting before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.  # noqa: E501

        :param require_greeting: The require_greeting of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501
        :type: bool
        """

        self._require_greeting = require_greeting

    @property
    def require_pressing_one(self):
        """Gets the require_pressing_one of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501

        Whether to require pressing 1 before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.  # noqa: E501

        :return: The require_pressing_one of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._require_pressing_one

    @require_pressing_one.setter
    def require_pressing_one(self, require_pressing_one):
        """Sets the require_pressing_one of this LiveMeetingsmeetingIdeventsParamsInviteOptions.

        Whether to require pressing 1 before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.  # noqa: E501

        :param require_pressing_one: The require_pressing_one of this LiveMeetingsmeetingIdeventsParamsInviteOptions.  # noqa: E501
        :type: bool
        """

        self._require_pressing_one = require_pressing_one

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveMeetingsmeetingIdeventsParamsInviteOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveMeetingsmeetingIdeventsParamsInviteOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
