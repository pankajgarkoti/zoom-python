# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiveMeetingsmeetingIdeventsParamsSipHeaders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_display_name': 'str',
        'to_display_name': 'str',
        'from_uri': 'str',
        'additional_headers': 'list[LiveMeetingsmeetingIdeventsParamsSipHeadersAdditionalHeaders]'
    }

    attribute_map = {
        'from_display_name': 'from_display_name',
        'to_display_name': 'to_display_name',
        'from_uri': 'from_uri',
        'additional_headers': 'additional_headers'
    }

    def __init__(self, from_display_name=None, to_display_name=None, from_uri=None, additional_headers=None):  # noqa: E501
        """LiveMeetingsmeetingIdeventsParamsSipHeaders - a model defined in Swagger"""  # noqa: E501
        self._from_display_name = None
        self._to_display_name = None
        self._from_uri = None
        self._additional_headers = None
        self.discriminator = None
        if from_display_name is not None:
            self.from_display_name = from_display_name
        if to_display_name is not None:
            self.to_display_name = to_display_name
        if from_uri is not None:
            self.from_uri = from_uri
        if additional_headers is not None:
            self.additional_headers = additional_headers

    @property
    def from_display_name(self):
        """Gets the from_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501

        Custom name that will be used within the SIP Header.  # noqa: E501

        :return: The from_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :rtype: str
        """
        return self._from_display_name

    @from_display_name.setter
    def from_display_name(self, from_display_name):
        """Sets the from_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.

        Custom name that will be used within the SIP Header.  # noqa: E501

        :param from_display_name: The from_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :type: str
        """

        self._from_display_name = from_display_name

    @property
    def to_display_name(self):
        """Gets the to_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501

        Custom remote name that will be used within the meeting.  # noqa: E501

        :return: The to_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :rtype: str
        """
        return self._to_display_name

    @to_display_name.setter
    def to_display_name(self, to_display_name):
        """Sets the to_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.

        Custom remote name that will be used within the meeting.  # noqa: E501

        :param to_display_name: The to_display_name of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :type: str
        """

        self._to_display_name = to_display_name

    @property
    def from_uri(self):
        """Gets the from_uri of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501

        Custom URI that will be used within the SIP Header. The URI must start with 'sip:' or 'sips:' as a valid URI based on parameters defined by the platform.  # noqa: E501

        :return: The from_uri of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :rtype: str
        """
        return self._from_uri

    @from_uri.setter
    def from_uri(self, from_uri):
        """Sets the from_uri of this LiveMeetingsmeetingIdeventsParamsSipHeaders.

        Custom URI that will be used within the SIP Header. The URI must start with 'sip:' or 'sips:' as a valid URI based on parameters defined by the platform.  # noqa: E501

        :param from_uri: The from_uri of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :type: str
        """

        self._from_uri = from_uri

    @property
    def additional_headers(self):
        """Gets the additional_headers of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501

        Ability to add 1 to 10 custom headers, each of which has a maximum length of 256 bytes to comply with SIP standards.  Custom headers would leverage header names starting with 'X-' per SIP guidelines.  # noqa: E501

        :return: The additional_headers of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :rtype: list[LiveMeetingsmeetingIdeventsParamsSipHeadersAdditionalHeaders]
        """
        return self._additional_headers

    @additional_headers.setter
    def additional_headers(self, additional_headers):
        """Sets the additional_headers of this LiveMeetingsmeetingIdeventsParamsSipHeaders.

        Ability to add 1 to 10 custom headers, each of which has a maximum length of 256 bytes to comply with SIP standards.  Custom headers would leverage header names starting with 'X-' per SIP guidelines.  # noqa: E501

        :param additional_headers: The additional_headers of this LiveMeetingsmeetingIdeventsParamsSipHeaders.  # noqa: E501
        :type: list[LiveMeetingsmeetingIdeventsParamsSipHeadersAdditionalHeaders]
        """

        self._additional_headers = additional_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveMeetingsmeetingIdeventsParamsSipHeaders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveMeetingsmeetingIdeventsParamsSipHeaders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
