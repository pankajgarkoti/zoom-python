# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20064Dates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'meeting_minutes': 'int',
        'meetings': 'int',
        'new_users': 'int',
        'participants': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'meeting_minutes': 'meeting_minutes',
        'meetings': 'meetings',
        'new_users': 'new_users',
        'participants': 'participants'
    }

    def __init__(self, _date=None, meeting_minutes=None, meetings=None, new_users=None, participants=None):  # noqa: E501
        """InlineResponse20064Dates - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._meeting_minutes = None
        self._meetings = None
        self._new_users = None
        self._participants = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if meeting_minutes is not None:
            self.meeting_minutes = meeting_minutes
        if meetings is not None:
            self.meetings = meetings
        if new_users is not None:
            self.new_users = new_users
        if participants is not None:
            self.participants = participants

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20064Dates.  # noqa: E501

        Date for this object.  # noqa: E501

        :return: The _date of this InlineResponse20064Dates.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20064Dates.

        Date for this object.  # noqa: E501

        :param _date: The _date of this InlineResponse20064Dates.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def meeting_minutes(self):
        """Gets the meeting_minutes of this InlineResponse20064Dates.  # noqa: E501

        Number of meeting minutes on this date.  # noqa: E501

        :return: The meeting_minutes of this InlineResponse20064Dates.  # noqa: E501
        :rtype: int
        """
        return self._meeting_minutes

    @meeting_minutes.setter
    def meeting_minutes(self, meeting_minutes):
        """Sets the meeting_minutes of this InlineResponse20064Dates.

        Number of meeting minutes on this date.  # noqa: E501

        :param meeting_minutes: The meeting_minutes of this InlineResponse20064Dates.  # noqa: E501
        :type: int
        """

        self._meeting_minutes = meeting_minutes

    @property
    def meetings(self):
        """Gets the meetings of this InlineResponse20064Dates.  # noqa: E501

        Number of meetings on this date.  # noqa: E501

        :return: The meetings of this InlineResponse20064Dates.  # noqa: E501
        :rtype: int
        """
        return self._meetings

    @meetings.setter
    def meetings(self, meetings):
        """Sets the meetings of this InlineResponse20064Dates.

        Number of meetings on this date.  # noqa: E501

        :param meetings: The meetings of this InlineResponse20064Dates.  # noqa: E501
        :type: int
        """

        self._meetings = meetings

    @property
    def new_users(self):
        """Gets the new_users of this InlineResponse20064Dates.  # noqa: E501

        Number of new users on this date.  # noqa: E501

        :return: The new_users of this InlineResponse20064Dates.  # noqa: E501
        :rtype: int
        """
        return self._new_users

    @new_users.setter
    def new_users(self, new_users):
        """Sets the new_users of this InlineResponse20064Dates.

        Number of new users on this date.  # noqa: E501

        :param new_users: The new_users of this InlineResponse20064Dates.  # noqa: E501
        :type: int
        """

        self._new_users = new_users

    @property
    def participants(self):
        """Gets the participants of this InlineResponse20064Dates.  # noqa: E501

        Number of participants on this date.  # noqa: E501

        :return: The participants of this InlineResponse20064Dates.  # noqa: E501
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this InlineResponse20064Dates.

        Number of participants on this date.  # noqa: E501

        :param participants: The participants of this InlineResponse20064Dates.  # noqa: E501
        :type: int
        """

        self._participants = participants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20064Dates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20064Dates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
