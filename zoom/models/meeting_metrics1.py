# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeetingMetrics1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'custom_keys': 'list[MeetingMetricsCustomKeys]',
        'dept': 'str',
        'duration': 'str',
        'email': 'str',
        'end_time': 'datetime',
        'has_3rd_party_audio': 'bool',
        'has_archiving': 'bool',
        'has_pstn': 'bool',
        'has_recording': 'bool',
        'has_screen_share': 'bool',
        'has_sip': 'bool',
        'has_video': 'bool',
        'has_voip': 'bool',
        'has_manual_captions': 'bool',
        'has_automated_captions': 'bool',
        'id': 'int',
        'in_room_participants': 'int',
        'participants': 'int',
        'start_time': 'datetime',
        'topic': 'str',
        'user_type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'host': 'host',
        'custom_keys': 'custom_keys',
        'dept': 'dept',
        'duration': 'duration',
        'email': 'email',
        'end_time': 'end_time',
        'has_3rd_party_audio': 'has_3rd_party_audio',
        'has_archiving': 'has_archiving',
        'has_pstn': 'has_pstn',
        'has_recording': 'has_recording',
        'has_screen_share': 'has_screen_share',
        'has_sip': 'has_sip',
        'has_video': 'has_video',
        'has_voip': 'has_voip',
        'has_manual_captions': 'has_manual_captions',
        'has_automated_captions': 'has_automated_captions',
        'id': 'id',
        'in_room_participants': 'in_room_participants',
        'participants': 'participants',
        'start_time': 'start_time',
        'topic': 'topic',
        'user_type': 'user_type',
        'uuid': 'uuid'
    }

    def __init__(self, host=None, custom_keys=None, dept=None, duration=None, email=None, end_time=None, has_3rd_party_audio=None, has_archiving=None, has_pstn=None, has_recording=None, has_screen_share=None, has_sip=None, has_video=None, has_voip=None, has_manual_captions=None, has_automated_captions=None, id=None, in_room_participants=None, participants=None, start_time=None, topic=None, user_type=None, uuid=None):  # noqa: E501
        """MeetingMetrics1 - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._custom_keys = None
        self._dept = None
        self._duration = None
        self._email = None
        self._end_time = None
        self._has_3rd_party_audio = None
        self._has_archiving = None
        self._has_pstn = None
        self._has_recording = None
        self._has_screen_share = None
        self._has_sip = None
        self._has_video = None
        self._has_voip = None
        self._has_manual_captions = None
        self._has_automated_captions = None
        self._id = None
        self._in_room_participants = None
        self._participants = None
        self._start_time = None
        self._topic = None
        self._user_type = None
        self._uuid = None
        self.discriminator = None
        if host is not None:
            self.host = host
        if custom_keys is not None:
            self.custom_keys = custom_keys
        if dept is not None:
            self.dept = dept
        if duration is not None:
            self.duration = duration
        if email is not None:
            self.email = email
        if end_time is not None:
            self.end_time = end_time
        if has_3rd_party_audio is not None:
            self.has_3rd_party_audio = has_3rd_party_audio
        if has_archiving is not None:
            self.has_archiving = has_archiving
        if has_pstn is not None:
            self.has_pstn = has_pstn
        if has_recording is not None:
            self.has_recording = has_recording
        if has_screen_share is not None:
            self.has_screen_share = has_screen_share
        if has_sip is not None:
            self.has_sip = has_sip
        if has_video is not None:
            self.has_video = has_video
        if has_voip is not None:
            self.has_voip = has_voip
        if has_manual_captions is not None:
            self.has_manual_captions = has_manual_captions
        if has_automated_captions is not None:
            self.has_automated_captions = has_automated_captions
        if id is not None:
            self.id = id
        if in_room_participants is not None:
            self.in_room_participants = in_room_participants
        if participants is not None:
            self.participants = participants
        if start_time is not None:
            self.start_time = start_time
        if topic is not None:
            self.topic = topic
        if user_type is not None:
            self.user_type = user_type
        if uuid is not None:
            self.uuid = uuid

    @property
    def host(self):
        """Gets the host of this MeetingMetrics1.  # noqa: E501

        Host display name.  # noqa: E501

        :return: The host of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this MeetingMetrics1.

        Host display name.  # noqa: E501

        :param host: The host of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def custom_keys(self):
        """Gets the custom_keys of this MeetingMetrics1.  # noqa: E501

        Custom keys and values assigned to the meeting.  # noqa: E501

        :return: The custom_keys of this MeetingMetrics1.  # noqa: E501
        :rtype: list[MeetingMetricsCustomKeys]
        """
        return self._custom_keys

    @custom_keys.setter
    def custom_keys(self, custom_keys):
        """Sets the custom_keys of this MeetingMetrics1.

        Custom keys and values assigned to the meeting.  # noqa: E501

        :param custom_keys: The custom_keys of this MeetingMetrics1.  # noqa: E501
        :type: list[MeetingMetricsCustomKeys]
        """

        self._custom_keys = custom_keys

    @property
    def dept(self):
        """Gets the dept of this MeetingMetrics1.  # noqa: E501

        Department of the host.  # noqa: E501

        :return: The dept of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this MeetingMetrics1.

        Department of the host.  # noqa: E501

        :param dept: The dept of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def duration(self):
        """Gets the duration of this MeetingMetrics1.  # noqa: E501

        Meeting duration.  # noqa: E501

        :return: The duration of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MeetingMetrics1.

        Meeting duration.  # noqa: E501

        :param duration: The duration of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def email(self):
        """Gets the email of this MeetingMetrics1.  # noqa: E501

        Email address of the host.  # noqa: E501

        :return: The email of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MeetingMetrics1.

        Email address of the host.  # noqa: E501

        :param email: The email of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def end_time(self):
        """Gets the end_time of this MeetingMetrics1.  # noqa: E501

        Meeting end time.  # noqa: E501

        :return: The end_time of this MeetingMetrics1.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MeetingMetrics1.

        Meeting end time.  # noqa: E501

        :param end_time: The end_time of this MeetingMetrics1.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def has_3rd_party_audio(self):
        """Gets the has_3rd_party_audio of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.  # noqa: E501

        :return: The has_3rd_party_audio of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_3rd_party_audio

    @has_3rd_party_audio.setter
    def has_3rd_party_audio(self, has_3rd_party_audio):
        """Sets the has_3rd_party_audio of this MeetingMetrics1.

        Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.  # noqa: E501

        :param has_3rd_party_audio: The has_3rd_party_audio of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_3rd_party_audio = has_3rd_party_audio

    @property
    def has_archiving(self):
        """Gets the has_archiving of this MeetingMetrics1.  # noqa: E501

        Whether the archiving feature was used in the meeting.  # noqa: E501

        :return: The has_archiving of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_archiving

    @has_archiving.setter
    def has_archiving(self, has_archiving):
        """Sets the has_archiving of this MeetingMetrics1.

        Whether the archiving feature was used in the meeting.  # noqa: E501

        :param has_archiving: The has_archiving of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_archiving = has_archiving

    @property
    def has_pstn(self):
        """Gets the has_pstn of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not the PSTN was used in the meeting.  # noqa: E501

        :return: The has_pstn of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_pstn

    @has_pstn.setter
    def has_pstn(self, has_pstn):
        """Sets the has_pstn of this MeetingMetrics1.

        Indicates whether or not the PSTN was used in the meeting.  # noqa: E501

        :param has_pstn: The has_pstn of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_pstn = has_pstn

    @property
    def has_recording(self):
        """Gets the has_recording of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not the recording feature was used in the meeting.   # noqa: E501

        :return: The has_recording of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_recording

    @has_recording.setter
    def has_recording(self, has_recording):
        """Sets the has_recording of this MeetingMetrics1.

        Indicates whether or not the recording feature was used in the meeting.   # noqa: E501

        :param has_recording: The has_recording of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_recording = has_recording

    @property
    def has_screen_share(self):
        """Gets the has_screen_share of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not screenshare feature was used in the meeting.  # noqa: E501

        :return: The has_screen_share of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_screen_share

    @has_screen_share.setter
    def has_screen_share(self, has_screen_share):
        """Sets the has_screen_share of this MeetingMetrics1.

        Indicates whether or not screenshare feature was used in the meeting.  # noqa: E501

        :param has_screen_share: The has_screen_share of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_screen_share = has_screen_share

    @property
    def has_sip(self):
        """Gets the has_sip of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not someone joined the meeting using SIP.  # noqa: E501

        :return: The has_sip of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_sip

    @has_sip.setter
    def has_sip(self, has_sip):
        """Sets the has_sip of this MeetingMetrics1.

        Indicates whether or not someone joined the meeting using SIP.  # noqa: E501

        :param has_sip: The has_sip of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_sip = has_sip

    @property
    def has_video(self):
        """Gets the has_video of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not video was used in the meeting.  # noqa: E501

        :return: The has_video of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_video

    @has_video.setter
    def has_video(self, has_video):
        """Sets the has_video of this MeetingMetrics1.

        Indicates whether or not video was used in the meeting.  # noqa: E501

        :param has_video: The has_video of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_video = has_video

    @property
    def has_voip(self):
        """Gets the has_voip of this MeetingMetrics1.  # noqa: E501

        Indicates whether or not VoIP was used in the meeting.  # noqa: E501

        :return: The has_voip of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_voip

    @has_voip.setter
    def has_voip(self, has_voip):
        """Sets the has_voip of this MeetingMetrics1.

        Indicates whether or not VoIP was used in the meeting.  # noqa: E501

        :param has_voip: The has_voip of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_voip = has_voip

    @property
    def has_manual_captions(self):
        """Gets the has_manual_captions of this MeetingMetrics1.  # noqa: E501

        Indicates whether a manual caption was enabled in the meeting.  # noqa: E501

        :return: The has_manual_captions of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_manual_captions

    @has_manual_captions.setter
    def has_manual_captions(self, has_manual_captions):
        """Sets the has_manual_captions of this MeetingMetrics1.

        Indicates whether a manual caption was enabled in the meeting.  # noqa: E501

        :param has_manual_captions: The has_manual_captions of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_manual_captions = has_manual_captions

    @property
    def has_automated_captions(self):
        """Gets the has_automated_captions of this MeetingMetrics1.  # noqa: E501

        Indicates whether an automated caption was enabled in the meeting.  # noqa: E501

        :return: The has_automated_captions of this MeetingMetrics1.  # noqa: E501
        :rtype: bool
        """
        return self._has_automated_captions

    @has_automated_captions.setter
    def has_automated_captions(self, has_automated_captions):
        """Sets the has_automated_captions of this MeetingMetrics1.

        Indicates whether an automated caption was enabled in the meeting.  # noqa: E501

        :param has_automated_captions: The has_automated_captions of this MeetingMetrics1.  # noqa: E501
        :type: bool
        """

        self._has_automated_captions = has_automated_captions

    @property
    def id(self):
        """Gets the id of this MeetingMetrics1.  # noqa: E501

        [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.  # noqa: E501

        :return: The id of this MeetingMetrics1.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MeetingMetrics1.

        [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.  # noqa: E501

        :param id: The id of this MeetingMetrics1.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_room_participants(self):
        """Gets the in_room_participants of this MeetingMetrics1.  # noqa: E501

        The number of Zoom Room participants in the meeting.  # noqa: E501

        :return: The in_room_participants of this MeetingMetrics1.  # noqa: E501
        :rtype: int
        """
        return self._in_room_participants

    @in_room_participants.setter
    def in_room_participants(self, in_room_participants):
        """Sets the in_room_participants of this MeetingMetrics1.

        The number of Zoom Room participants in the meeting.  # noqa: E501

        :param in_room_participants: The in_room_participants of this MeetingMetrics1.  # noqa: E501
        :type: int
        """

        self._in_room_participants = in_room_participants

    @property
    def participants(self):
        """Gets the participants of this MeetingMetrics1.  # noqa: E501

        Meeting participant count.  # noqa: E501

        :return: The participants of this MeetingMetrics1.  # noqa: E501
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this MeetingMetrics1.

        Meeting participant count.  # noqa: E501

        :param participants: The participants of this MeetingMetrics1.  # noqa: E501
        :type: int
        """

        self._participants = participants

    @property
    def start_time(self):
        """Gets the start_time of this MeetingMetrics1.  # noqa: E501

        Meeting start time.  # noqa: E501

        :return: The start_time of this MeetingMetrics1.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MeetingMetrics1.

        Meeting start time.  # noqa: E501

        :param start_time: The start_time of this MeetingMetrics1.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def topic(self):
        """Gets the topic of this MeetingMetrics1.  # noqa: E501

        Meeting topic.  # noqa: E501

        :return: The topic of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this MeetingMetrics1.

        Meeting topic.  # noqa: E501

        :param topic: The topic of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def user_type(self):
        """Gets the user_type of this MeetingMetrics1.  # noqa: E501

        License type of the user.  # noqa: E501

        :return: The user_type of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this MeetingMetrics1.

        License type of the user.  # noqa: E501

        :param user_type: The user_type of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def uuid(self):
        """Gets the uuid of this MeetingMetrics1.  # noqa: E501

        Meeting UUID. [Double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.  # noqa: E501

        :return: The uuid of this MeetingMetrics1.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MeetingMetrics1.

        Meeting UUID. [Double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.  # noqa: E501

        :param uuid: The uuid of this MeetingMetrics1.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingMetrics1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingMetrics1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
