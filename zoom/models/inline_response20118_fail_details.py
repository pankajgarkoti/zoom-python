# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20118FailDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_ids': 'list[str]',
        'reason': 'str'
    }

    attribute_map = {
        'user_ids': 'user_ids',
        'reason': 'reason'
    }

    def __init__(self, user_ids=None, reason=None):  # noqa: E501
        """InlineResponse20118FailDetails - a model defined in Swagger"""  # noqa: E501
        self._user_ids = None
        self._reason = None
        self.discriminator = None
        if user_ids is not None:
            self.user_ids = user_ids
        if reason is not None:
            self.reason = reason

    @property
    def user_ids(self):
        """Gets the user_ids of this InlineResponse20118FailDetails.  # noqa: E501

        The IDs of users for whom the feature was not updated successfully.  # noqa: E501

        :return: The user_ids of this InlineResponse20118FailDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this InlineResponse20118FailDetails.

        The IDs of users for whom the feature was not updated successfully.  # noqa: E501

        :param user_ids: The user_ids of this InlineResponse20118FailDetails.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    @property
    def reason(self):
        """Gets the reason of this InlineResponse20118FailDetails.  # noqa: E501

        The reason why the feature for these users was not updated successfully.  # noqa: E501

        :return: The reason of this InlineResponse20118FailDetails.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse20118FailDetails.

        The reason why the feature for these users was not updated successfully.  # noqa: E501

        :param reason: The reason of this InlineResponse20118FailDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Users not found", "Have upcoming events", "Unpaid user", "Not enough seats", "Can't update for Zoom One users", "Can't update for free users", "Can't update for Zoom United users", "Can't update for Zoom Room users", "Not allowed to add basic users", "Can't update for non-SSO users", "No need to update"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20118FailDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20118FailDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
