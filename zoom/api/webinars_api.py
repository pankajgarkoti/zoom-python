# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zoom.api_client import ApiClient


class WebinarsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_batch_webinar_registrants(self, webinar_id, **kwargs):  # noqa: E501
        """Perform batch registration  # noqa: E501

        Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_webinar_registrants(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's unique identifier. (required)
        :param WebinarIdBatchRegistrantsBody body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_batch_webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_batch_webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def add_batch_webinar_registrants_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Perform batch registration  # noqa: E501

        Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_webinar_registrants_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's unique identifier. (required)
        :param WebinarIdBatchRegistrantsBody body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_batch_webinar_registrants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `add_batch_webinar_registrants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/batch_registrants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_webinar_branding_name_tag(self, webinar_id, **kwargs):  # noqa: E501
        """Create a webinar's branding name tag  # noqa: E501

        Use this API to create a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There's a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webinar_branding_name_tag(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param BrandingNameTagsBody body:
        :return: InlineResponse20124
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_webinar_branding_name_tag_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_webinar_branding_name_tag_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def create_webinar_branding_name_tag_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Create a webinar's branding name tag  # noqa: E501

        Use this API to create a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There's a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webinar_branding_name_tag_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param BrandingNameTagsBody body:
        :return: InlineResponse20124
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_webinar_branding_name_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `create_webinar_branding_name_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/name_tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20124',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webinar_branding_name_tag(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding name tag  # noqa: E501

        Use this API to delete a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_name_tag(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str name_tag_ids: A comma-separated list of the name tag IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webinar_branding_name_tag_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webinar_branding_name_tag_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def delete_webinar_branding_name_tag_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding name tag  # noqa: E501

        Use this API to delete a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_name_tag_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str name_tag_ids: A comma-separated list of the name tag IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'name_tag_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webinar_branding_name_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `delete_webinar_branding_name_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'name_tag_ids' in params:
            query_params.append(('name_tag_ids', params['name_tag_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/name_tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webinar_branding_vb(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding Virtual Backgrounds  # noqa: E501

        Use this API to delete a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_vb(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str ids: A comma-separated list of the Virtual Background file IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def delete_webinar_branding_vb_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding Virtual Backgrounds  # noqa: E501

        Use this API to delete a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_vb_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str ids: A comma-separated list of the Virtual Background file IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webinar_branding_vb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `delete_webinar_branding_vb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/virtual_backgrounds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webinar_branding_wallpaper(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding wallpaper  # noqa: E501

        Use this API to delete a webinar's session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_wallpaper(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webinar_branding_wallpaper_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webinar_branding_wallpaper_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def delete_webinar_branding_wallpaper_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar's branding wallpaper  # noqa: E501

        Use this API to delete a webinar's session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_branding_wallpaper_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webinar_branding_wallpaper" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `delete_webinar_branding_wallpaper`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/wallpaper', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webinar_chat_message_by_id(self, webinar_id, message_id, **kwargs):  # noqa: E501
        """Delete a live webinar message  # noqa: E501

        Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_chat_message_by_id(webinar_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str message_id: The live webinar chat message's unique identifier (UUID), in base64-encoded format. (required)
        :param str file_ids: The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webinar_chat_message_by_id_with_http_info(webinar_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webinar_chat_message_by_id_with_http_info(webinar_id, message_id, **kwargs)  # noqa: E501
            return data

    def delete_webinar_chat_message_by_id_with_http_info(self, webinar_id, message_id, **kwargs):  # noqa: E501
        """Delete a live webinar message  # noqa: E501

        Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_chat_message_by_id_with_http_info(webinar_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str message_id: The live webinar chat message's unique identifier (UUID), in base64-encoded format. (required)
        :param str file_ids: The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'message_id', 'file_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webinar_chat_message_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `delete_webinar_chat_message_by_id`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `delete_webinar_chat_message_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []
        if 'file_ids' in params:
            query_params.append(('file_ids', params['file_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/live_webinars/{webinarId}/chat/messages/{messageId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webinar_registrant(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Delete a webinar registrant  # noqa: E501

        Delete a webinar registrant.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_registrant(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID. (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webinar_registrant_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webinar_registrant_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
            return data

    def delete_webinar_registrant_with_http_info(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Delete a webinar registrant  # noqa: E501

        Delete a webinar registrant.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webinar_registrant_with_http_info(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID. (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'registrant_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webinar_registrant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `delete_webinar_registrant`")  # noqa: E501
        # verify the required parameter 'registrant_id' is set
        if ('registrant_id' not in params or
                params['registrant_id'] is None):
            raise ValueError("Missing the required parameter `registrant_id` when calling `delete_webinar_registrant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'registrant_id' in params:
            path_params['registrantId'] = params['registrant_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/{registrantId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracking_sources(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar tracking sources  # noqa: E501

        [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.     **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_sources(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracking_sources_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracking_sources_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def get_tracking_sources_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar tracking sources  # noqa: E501

        [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.     **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_sources_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracking_sources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `get_tracking_sources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/tracking_sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200107',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webinar_branding(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar's session branding  # noqa: E501

        Use this API to get the webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webinar_branding(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webinar_branding_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webinar_branding_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def get_webinar_branding_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar's session branding  # noqa: E501

        Use this API to get the webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webinar_branding_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webinar_branding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `get_webinar_branding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webinar_live_stream_details(self, webinar_id, **kwargs):  # noqa: E501
        """Get live stream details  # noqa: E501

        Get a webinar's live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webinar_live_stream_details(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's unique ID. (required)
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webinar_live_stream_details_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webinar_live_stream_details_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def get_webinar_live_stream_details_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get live stream details  # noqa: E501

        Get a webinar's live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webinar_live_stream_details_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's unique ID. (required)
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webinar_live_stream_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `get_webinar_live_stream_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/livestream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200105',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_webinar_poll_results(self, webinar_id, **kwargs):  # noqa: E501
        """List past webinar poll results  # noqa: E501

        The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_poll_results(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_webinar_poll_results_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_webinar_poll_results_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_past_webinar_poll_results_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List past webinar poll results  # noqa: E501

        The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_poll_results_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_webinar_poll_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_past_webinar_poll_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20096',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_webinar_qa(self, webinar_id, **kwargs):  # noqa: E501
        """List Q&As of a past webinar  # noqa: E501

        List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_qa(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_webinar_qa_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_webinar_qa_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_past_webinar_qa_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Q&As of a past webinar  # noqa: E501

        List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_qa_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_webinar_qa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_past_webinar_qa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/qa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_webinar_participants(self, webinar_id, **kwargs):  # noqa: E501
        """List webinar participants  # noqa: E501

        Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webinar_participants(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_webinar_participants_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_webinar_participants_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_webinar_participants_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List webinar participants  # noqa: E501

        Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webinar_participants_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_webinar_participants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_webinar_participants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/participants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20095',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_webinar_templates(self, user_id, **kwargs):  # noqa: E501
        """List webinar templates  # noqa: E501

        Display a list of a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webinar_templates(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_webinar_templates_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_webinar_templates_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_webinar_templates_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List webinar templates  # noqa: E501

        Display a list of a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webinar_templates_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_webinar_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_webinar_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinar_templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def past_webinars(self, webinar_id, **kwargs):  # noqa: E501
        """List past webinar instances  # noqa: E501

        List past webinar instances.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_webinars(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.past_webinars_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.past_webinars_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def past_webinars_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List past webinar instances  # noqa: E501

        List past webinar instances.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_webinars_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method past_webinars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `past_webinars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebinarInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_webinar_branding_vb(self, webinar_id, **kwargs):  # noqa: E501
        """Set webinar's default branding Virtual Background  # noqa: E501

        Use this API to set a webinar's default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_webinar_branding_vb(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str id: The Virtual Background file ID to update.
        :param bool set_default_for_all_panelists: Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def set_webinar_branding_vb_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Set webinar's default branding Virtual Background  # noqa: E501

        Use this API to set a webinar's default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_webinar_branding_vb_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str id: The Virtual Background file ID to update.
        :param bool set_default_for_all_panelists: Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'id', 'set_default_for_all_panelists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_webinar_branding_vb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `set_webinar_branding_vb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'set_default_for_all_panelists' in params:
            query_params.append(('set_default_for_all_panelists', params['set_default_for_all_panelists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/virtual_backgrounds', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_webinar_branding_name_tag(self, webinar_id, name_tag_id, **kwargs):  # noqa: E501
        """Update a webinar's branding name tag  # noqa: E501

        Use this API to update a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webinar_branding_name_tag(webinar_id, name_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str name_tag_id: The name tag's ID. (required)
        :param NameTagsNameTagIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_webinar_branding_name_tag_with_http_info(webinar_id, name_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_webinar_branding_name_tag_with_http_info(webinar_id, name_tag_id, **kwargs)  # noqa: E501
            return data

    def update_webinar_branding_name_tag_with_http_info(self, webinar_id, name_tag_id, **kwargs):  # noqa: E501
        """Update a webinar's branding name tag  # noqa: E501

        Use this API to update a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webinar_branding_name_tag_with_http_info(webinar_id, name_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str name_tag_id: The name tag's ID. (required)
        :param NameTagsNameTagIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'name_tag_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_webinar_branding_name_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `update_webinar_branding_name_tag`")  # noqa: E501
        # verify the required parameter 'name_tag_id' is set
        if ('name_tag_id' not in params or
                params['name_tag_id'] is None):
            raise ValueError("Missing the required parameter `name_tag_id` when calling `update_webinar_branding_name_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'name_tag_id' in params:
            path_params['nameTagId'] = params['name_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/name_tags/{nameTagId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_webinar_branding_vb(self, webinar_id, **kwargs):  # noqa: E501
        """Upload a webinar's branding Virtual Background  # noqa: E501

        Use this API to upload a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_webinar_branding_vb(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str file:
        :param bool default:
        :param bool set_default_for_all_panelists:
        :return: InlineResponse20125
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_webinar_branding_vb_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def upload_webinar_branding_vb_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Upload a webinar's branding Virtual Background  # noqa: E501

        Use this API to upload a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_webinar_branding_vb_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str file:
        :param bool default:
        :param bool set_default_for_all_panelists:
        :return: InlineResponse20125
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'file', 'default', 'set_default_for_all_panelists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_webinar_branding_vb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `upload_webinar_branding_vb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'default' in params:
            form_params.append(('default', params['default']))  # noqa: E501
        if 'set_default_for_all_panelists' in params:
            form_params.append(('set_default_for_all_panelists', params['set_default_for_all_panelists']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/virtual_backgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20125',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_webinar_branding_wallpaper(self, webinar_id, **kwargs):  # noqa: E501
        """Upload a webinar's branding wallpaper  # noqa: E501

        Use this API to upload a webinar's session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_webinar_branding_wallpaper(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str file:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_webinar_branding_wallpaper_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_webinar_branding_wallpaper_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def upload_webinar_branding_wallpaper_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Upload a webinar's branding wallpaper  # noqa: E501

        Use this API to upload a webinar's session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_webinar_branding_wallpaper_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str file:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_webinar_branding_wallpaper" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `upload_webinar_branding_wallpaper`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/branding/wallpaper', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20126',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.    Use this API to get details of a scheduled webinar.         **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID). (required)
        :param str occurrence_id: Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call.
        :param bool show_previous_occurrences: Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.    Use this API to get details of a scheduled webinar.         **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID). (required)
        :param str occurrence_id: Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call.
        :param bool show_previous_occurrences: Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'show_previous_occurrences']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'show_previous_occurrences' in params:
            query_params.append(('show_previous_occurrences', params['show_previous_occurrences']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200100',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_absentees(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar absentees  # noqa: E501

        List absentees of a webinar.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_absentees(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_absentees_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_absentees_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_absentees_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar absentees  # noqa: E501

        List absentees of a webinar.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_absentees_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar's ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_absentees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_absentees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/absentees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationList1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_create(self, user_id, **kwargs):  # noqa: E501
        """Create a webinar  # noqa: E501

        Schedule a webinar for a user (webinar host). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_create(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param UserIdWebinarsBody body:
        :return: InlineResponse20122
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_create_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_create_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def webinar_create_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Create a webinar  # noqa: E501

        Schedule a webinar for a user (webinar host). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_create_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param UserIdWebinarsBody body:
        :return: InlineResponse20122
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `webinar_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinars', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20122',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_delete(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar  # noqa: E501

        Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_delete(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param bool cancel_webinar_reminder: `true` - Notify panelists and registrants about the webinar cancellation via email.   `false` - Do not send any email notification to webinar registrants and panelists.   The default value of this field is `false`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_delete_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar  # noqa: E501

        Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_delete_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param bool cancel_webinar_reminder: `true` - Notify panelists and registrants about the webinar cancellation via email.   `false` - Do not send any email notification to webinar registrants and panelists.   The default value of this field is `false`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'cancel_webinar_reminder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'cancel_webinar_reminder' in params:
            query_params.append(('cancel_webinar_reminder', params['cancel_webinar_reminder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_invite_links_create(self, webinar_id, **kwargs):  # noqa: E501
        """Create webinar's invite links  # noqa: E501

        Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_invite_links_create(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param InviteLinks body: Webinar invite link object.
        :return: InviteLinks1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_invite_links_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_invite_links_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_invite_links_create_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Create webinar's invite links  # noqa: E501

        Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_invite_links_create_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param InviteLinks body: Webinar invite link object.
        :return: InviteLinks1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_invite_links_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_invite_links_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/invite_links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InviteLinks1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_live_stream_status_update(self, webinar_id, **kwargs):  # noqa: E501
        """Update live stream status  # noqa: E501

        Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar's live stream.         **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_stream_status_update(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param LivestreamStatusBody1 body: Webinar
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_live_stream_status_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_live_stream_status_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_live_stream_status_update_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update live stream status  # noqa: E501

        Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar's live stream.         **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_stream_status_update_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param LivestreamStatusBody1 body: Webinar
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_live_stream_status_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_live_stream_status_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/livestream/status', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_live_stream_update(self, webinar_id, **kwargs):  # noqa: E501
        """Update a live stream  # noqa: E501

        Update a webinar's live stream information.        **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_stream_update(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdLivestreamBody body: Webinar
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_live_stream_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_live_stream_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_live_stream_update_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update a live stream  # noqa: E501

        Update a webinar's live stream information.        **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_stream_update_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdLivestreamBody body: Webinar
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_live_stream_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_live_stream_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/livestream', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_live_streaming_join_token(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's join token for live streaming  # noqa: E501

        Use this API to get a webinar's archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_streaming_join_token(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_live_streaming_join_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_live_streaming_join_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_live_streaming_join_token_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's join token for live streaming  # noqa: E501

        Use this API to get a webinar's archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_live_streaming_join_token_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_live_streaming_join_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_live_streaming_join_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/jointoken/live_streaming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200102',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_local_archiving_archive_token(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's archive token for local archiving  # noqa: E501

        Use this API to get a webinar's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar's raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_local_archiving_archive_token(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_local_archiving_archive_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_local_archiving_archive_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_local_archiving_archive_token_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's archive token for local archiving  # noqa: E501

        Use this API to get a webinar's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar's raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_local_archiving_archive_token_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_local_archiving_archive_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_local_archiving_archive_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/jointoken/local_archiving', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200103',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_local_recording_join_token(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's join token for local recording  # noqa: E501

        Use this API to get a webinar's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_local_recording_join_token(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_local_recording_join_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_local_recording_join_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_local_recording_join_token_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar's join token for local recording  # noqa: E501

        Use this API to get a webinar's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_local_recording_join_token_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_local_recording_join_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_local_recording_join_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/jointoken/local_recording', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200104',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelist_create(self, webinar_id, **kwargs):  # noqa: E501
        """Add panelists  # noqa: E501

        Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.         **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdPanelistsBody body:
        :return: InlineResponse20127
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelist_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelist_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelist_create_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Add panelists  # noqa: E501

        Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.         **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdPanelistsBody body:
        :return: InlineResponse20127
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelist_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelist_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20127',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelist_delete(self, webinar_id, panelist_id, **kwargs):  # noqa: E501
        """Remove a panelist  # noqa: E501

        [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.         **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_delete(webinar_id, panelist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str panelist_id: The panelist's ID or email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelist_delete_with_http_info(self, webinar_id, panelist_id, **kwargs):  # noqa: E501
        """Remove a panelist  # noqa: E501

        [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.         **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str panelist_id: The panelist's ID or email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'panelist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelist_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelist_delete`")  # noqa: E501
        # verify the required parameter 'panelist_id' is set
        if ('panelist_id' not in params or
                params['panelist_id'] is None):
            raise ValueError("Missing the required parameter `panelist_id` when calling `webinar_panelist_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'panelist_id' in params:
            path_params['panelistId'] = params['panelist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists/{panelistId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelists(self, webinar_id, **kwargs):  # noqa: E501
        """List panelists  # noqa: E501

        List all of a webinar's panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: PanelistList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelists_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelists_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelists_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List panelists  # noqa: E501

        List all of a webinar's panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: PanelistList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PanelistList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelists_delete(self, webinar_id, **kwargs):  # noqa: E501
        """Remove webinar panelists  # noqa: E501

        Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_delete(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelists_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelists_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelists_delete_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Remove webinar panelists  # noqa: E501

        Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_delete_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelists_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelists_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_create(self, webinar_id, **kwargs):  # noqa: E501
        """Create a webinar's poll  # noqa: E501

        Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_create(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param MeetingAndWebinarPollingObject_ body: Webinar poll object.
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_create_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Create a webinar's poll  # noqa: E501

        Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_create_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param MeetingAndWebinarPollingObject_ body: Webinar poll object.
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingAndWebinarPollingObject1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_delete(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Delete a webinar poll  # noqa: E501

        Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_delete(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_delete_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_delete_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_delete_with_http_info(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Delete a webinar poll  # noqa: E501

        Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_delete_with_http_info(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_delete`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_get(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Get a webinar poll  # noqa: E501

        Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_get(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :return: MeetingAndWebinarPollingObject3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_get_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_get_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_get_with_http_info(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Get a webinar poll  # noqa: E501

        Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_get_with_http_info(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :return: MeetingAndWebinarPollingObject3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_get`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingAndWebinarPollingObject3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_update(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Update a webinar poll  # noqa: E501

        Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_update(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :param MeetingAndWebinarPollingObject4 body: Webinar Poll
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_update_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_update_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_update_with_http_info(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Update a webinar poll  # noqa: E501

        Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).           **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_update_with_http_info(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str poll_id: The poll ID (required)
        :param MeetingAndWebinarPollingObject4 body: Webinar Poll
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'poll_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_update`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_polls(self, webinar_id, **kwargs):  # noqa: E501
        """List a webinar's polls   # noqa: E501

        List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_polls(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param bool anonymous: Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
        :return: PollList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_polls_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_polls_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_polls_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List a webinar's polls   # noqa: E501

        List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.           **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_polls_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param bool anonymous: Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
        :return: PollList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'anonymous']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_polls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_polls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'anonymous' in params:
            query_params.append(('anonymous', params['anonymous']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PollList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_create(self, webinar_id, **kwargs):  # noqa: E501
        """Add a webinar registrant  # noqa: E501

        Create and submit a user's registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_create(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdRegistrantsBody body:
        :param str occurrence_ids: A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](/docs/api/rest/reference/zoom-api/methods/#operation/webinar) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
        :return: InlineResponse20128
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_create_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_create_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Add a webinar registrant  # noqa: E501

        Create and submit a user's registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_create_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdRegistrantsBody body:
        :param str occurrence_ids: A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](/docs/api/rest/reference/zoom-api/methods/#operation/webinar) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
        :return: InlineResponse20128
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body', 'occurrence_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_ids' in params:
            query_params.append(('occurrence_ids', params['occurrence_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20128',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_get(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Get a webinar registrant  # noqa: E501

        Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.         **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_get(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: WebinarRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_get_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_get_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_get_with_http_info(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Get a webinar registrant  # noqa: E501

        Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.         **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_get_with_http_info(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: WebinarRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'registrant_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_get`")  # noqa: E501
        # verify the required parameter 'registrant_id' is set
        if ('registrant_id' not in params or
                params['registrant_id'] is None):
            raise ValueError("Missing the required parameter `registrant_id` when calling `webinar_registrant_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'registrant_id' in params:
            path_params['registrantId'] = params['registrant_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/{registrantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebinarRegistrant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_question_update(self, webinar_id, **kwargs):  # noqa: E501
        """Update registration questions  # noqa: E501

        Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.         **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_question_update(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarRegistrantQuestions body: Webinar registrant questions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_question_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_question_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_question_update_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update registration questions  # noqa: E501

        Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.         **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_question_update_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarRegistrantQuestions body: Webinar registrant questions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_question_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_question_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/questions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_status(self, webinar_id, **kwargs):  # noqa: E501
        """Update registrant's status  # noqa: E501

        Update webinar registrants' registration status. You can approve or deny a registrant, or revoke a registrant's approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param RegistrantsStatusBody2 body:
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_status_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_status_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_status_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update registrant's status  # noqa: E501

        Update webinar registrants' registration status. You can approve or deny a registrant, or revoke a registrant's approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param RegistrantsStatusBody2 body:
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrants(self, webinar_id, **kwargs):  # noqa: E501
        """List webinar registrants  # noqa: E501

        List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param str status: Query by the registrant's status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
        :param str tracking_source_id: The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrants_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List webinar registrants  # noqa: E501

        List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param str status: Query by the registrant's status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
        :param str tracking_source_id: The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'status', 'tracking_source_id', 'page_size', 'page_number', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'tracking_source_id' in params:
            query_params.append(('tracking_source_id', params['tracking_source_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrants_questions_get(self, webinar_id, **kwargs):  # noqa: E501
        """List registration questions  # noqa: E501

        List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.      **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_questions_get(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarRegistrantQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrants_questions_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrants_questions_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrants_questions_get_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List registration questions  # noqa: E501

        List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.      **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_questions_get_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarRegistrantQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrants_questions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrants_questions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebinarRegistrantQuestions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_status(self, webinar_id, **kwargs):  # noqa: E501
        """Update webinar status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.         **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdStatusBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_status_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_status_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_status_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update webinar status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.         **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarIdStatusBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_survey_delete(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar survey  # noqa: E501

        Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_delete(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_survey_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_survey_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_survey_delete_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a webinar survey  # noqa: E501

        Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_delete_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_survey_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_survey_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/survey', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_survey_get(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar survey  # noqa: E501

        Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_get(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarSurveyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_survey_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_survey_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_survey_get_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a webinar survey  # noqa: E501

        Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_get_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :return: WebinarSurveyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_survey_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_survey_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/survey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebinarSurveyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_survey_update(self, webinar_id, **kwargs):  # noqa: E501
        """Update a webinar survey  # noqa: E501

        Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host's account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_update(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarSurveyObject1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_survey_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_survey_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_survey_update_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update a webinar survey  # noqa: E501

        Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host's account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_survey_update_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarSurveyObject1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_survey_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_survey_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/survey', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_template_create(self, user_id, **kwargs):  # noqa: E501
        """Create a webinar template  # noqa: E501

        Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_template_create(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :param UserIdWebinarTemplatesBody body:
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_template_create_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_template_create_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def webinar_template_create_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Create a webinar template  # noqa: E501

        Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_template_create_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :param UserIdWebinarTemplatesBody body:
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_template_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `webinar_template_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinar_templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20121',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_token(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar's token  # noqa: E501

        Use this API to get a webinar's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_token(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str type: The webinar token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_token_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_token_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get webinar's token  # noqa: E501

        Use this API to get a webinar's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_token_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param str type: The webinar token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200106',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_update(self, webinar_id, **kwargs):  # noqa: E501
        """Update a webinar  # noqa: E501

        Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_update(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarsWebinarIdBody body: Webinar.
        :param str occurrence_id: Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_update_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_update_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Update a webinar  # noqa: E501

        Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_update_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar's ID. (required)
        :param WebinarsWebinarIdBody body: Webinar.
        :param str occurrence_id: Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'body', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinars(self, user_id, **kwargs):  # noqa: E501
        """List webinars  # noqa: E501

        List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user's [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinars(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The type of webinar.  * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.  * `upcoming` - All upcoming webinars, including live webinars.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinars_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinars_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def webinars_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List webinars  # noqa: E501

        List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user's [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinars_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The type of webinar.  * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.  * `upcoming` - All upcoming webinars, including live webinars.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'page_size', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `webinars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20099',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
