# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zoom.api_client import ApiClient


class MeetingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_batch_registrants(self, meeting_id, **kwargs):  # noqa: E501
        """Perform batch registration  # noqa: E501

        Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.           **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_registrants(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: Unique identifier of the meeting (Meeting Number). (required)
        :param MeetingIdBatchRegistrantsBody body:
        :return: InlineResponse20111
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_batch_registrants_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_batch_registrants_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def add_batch_registrants_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Perform batch registration  # noqa: E501

        Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.           **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_batch_registrants_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: Unique identifier of the meeting (Meeting Number). (required)
        :param MeetingIdBatchRegistrantsBody body:
        :return: InlineResponse20111
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_batch_registrants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `add_batch_registrants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/batch_registrants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20111',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_batch_polls(self, meeting_id, **kwargs):  # noqa: E501
        """Perform batch poll creation  # noqa: E501

        Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_batch_polls(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: (required)
        :param MeetingIdBatchPollsBody body: Batch Meeting poll object
        :return: InlineResponse20110
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_batch_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_batch_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def create_batch_polls_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Perform batch poll creation  # noqa: E501

        Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_batch_polls_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: (required)
        :param MeetingIdBatchPollsBody body: Batch Meeting poll object
        :return: InlineResponse20110
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_batch_polls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `create_batch_polls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/batch_polls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20110',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_meeting_chat_message_by_id(self, meeting_id, message_id, **kwargs):  # noqa: E501
        """Delete a live meeting message  # noqa: E501

        Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_meeting_chat_message_by_id(meeting_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str message_id: The live meeting chat message's unique identifier (UUID), in base64-encoded format. (required)
        :param str file_ids: The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_meeting_chat_message_by_id_with_http_info(meeting_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_meeting_chat_message_by_id_with_http_info(meeting_id, message_id, **kwargs)  # noqa: E501
            return data

    def delete_meeting_chat_message_by_id_with_http_info(self, meeting_id, message_id, **kwargs):  # noqa: E501
        """Delete a live meeting message  # noqa: E501

        Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_meeting_chat_message_by_id_with_http_info(meeting_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str message_id: The live meeting chat message's unique identifier (UUID), in base64-encoded format. (required)
        :param str file_ids: The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'message_id', 'file_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_meeting_chat_message_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `delete_meeting_chat_message_by_id`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `delete_meeting_chat_message_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []
        if 'file_ids' in params:
            query_params.append(('file_ids', params['file_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/live_meetings/{meetingId}/chat/messages/{messageId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_meeting_live_stream_details(self, meeting_id, **kwargs):  # noqa: E501
        """Get livestream details  # noqa: E501

        Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting's livestream configuration details such as Stream URL, Stream Key and Page URL.         **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meeting_live_stream_details(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: Unique identifier of the meeting. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meeting_live_stream_details_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meeting_live_stream_details_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def get_meeting_live_stream_details_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get livestream details  # noqa: E501

        Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting's livestream configuration details such as Stream URL, Stream Key and Page URL.         **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meeting_live_stream_details_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: Unique identifier of the meeting. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meeting_live_stream_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `get_meeting_live_stream_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/livestream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sip_dialing_with_passcode(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting SIP URI with Passcode  # noqa: E501

        Get a meeting's SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sip_dialing_with_passcode(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdSipDialingBody body:
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sip_dialing_with_passcode_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sip_dialing_with_passcode_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def get_sip_dialing_with_passcode_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting SIP URI with Passcode  # noqa: E501

        Get a meeting's SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sip_dialing_with_passcode_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdSipDialingBody body:
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sip_dialing_with_passcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `get_sip_dialing_with_passcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/sip_dialing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getameetingsummary(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting summary  # noqa: E501

        Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host's account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getameetingsummary(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getameetingsummary_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getameetingsummary_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def getameetingsummary_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting summary  # noqa: E501

        Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host's account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getameetingsummary_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getameetingsummary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `getameetingsummary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/meeting_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def in_meeting_control(self, meeting_id, **kwargs):  # noqa: E501
        """Use in-meeting controls  # noqa: E501

        Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API's recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.in_meeting_control(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The live meeting's ID. (required)
        :param MeetingIdEventsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.in_meeting_control_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.in_meeting_control_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def in_meeting_control_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Use in-meeting controls  # noqa: E501

        Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API's recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.in_meeting_control_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The live meeting's ID. (required)
        :param MeetingIdEventsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method in_meeting_control" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `in_meeting_control`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/live_meetings/{meetingId}/events', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_meeting_templates(self, user_id, **kwargs):  # noqa: E501
        """List meeting templates  # noqa: E501

        List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_meeting_templates(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_meeting_templates_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_meeting_templates_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_meeting_templates_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List meeting templates  # noqa: E501

        List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_meeting_templates_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_meeting_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_meeting_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/meeting_templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_meeting_polls(self, meeting_id, **kwargs):  # noqa: E501
        """List past meeting's poll results  # noqa: E501

        [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.          **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_meeting_polls(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_meeting_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_meeting_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def list_past_meeting_polls_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List past meeting's poll results  # noqa: E501

        [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.          **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_meeting_polls_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_meeting_polls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `list_past_meeting_polls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_meetings/{meetingId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_meeting_qa(self, meeting_id, **kwargs):  # noqa: E501
        """List past meetings' Q&A  # noqa: E501

        The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_meeting_qa(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_meeting_qa_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_meeting_qa_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def list_past_meeting_qa_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List past meetings' Q&A  # noqa: E501

        The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_meeting_qa_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_meeting_qa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `list_past_meeting_qa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_meetings/{meetingId}/qa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listmeetingsummaries(self, **kwargs):  # noqa: E501
        """List meeting summaries of an account  # noqa: E501

        Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host's account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listmeetingsummaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param datetime _from: The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
        :param datetime to: The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listmeetingsummaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.listmeetingsummaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def listmeetingsummaries_with_http_info(self, **kwargs):  # noqa: E501
        """List meeting summaries of an account  # noqa: E501

        Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host's account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listmeetingsummaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param datetime _from: The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
        :param datetime to: The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listmeetingsummaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/meeting_summaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting  # noqa: E501

        Retrieve tha given meeting's details.        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits. (required)
        :param str occurrence_id: Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
        :param bool show_previous_occurrences: Set this field's value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). 
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting  # noqa: E501

        Retrieve tha given meeting's details.        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits. (required)
        :param str occurrence_id: Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
        :param bool show_previous_occurrences: Set this field's value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). 
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'occurrence_id', 'show_previous_occurrences']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'show_previous_occurrences' in params:
            query_params.append(('show_previous_occurrences', params['show_previous_occurrences']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_create(self, user_id, **kwargs):  # noqa: E501
        """Create a meeting  # noqa: E501

        [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](/api-reference/zoom-api/methods#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_create(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdMeetingsBody body: Meeting object.
        :return: InlineResponse20114
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_create_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_create_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def meeting_create_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Create a meeting  # noqa: E501

        [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](/api-reference/zoom-api/methods#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_create_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdMeetingsBody body: Meeting object.
        :return: InlineResponse20114
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `meeting_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/meetings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20114',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_delete(self, meeting_id, **kwargs):  # noqa: E501
        """Delete a meeting  # noqa: E501

        Delete a meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_delete(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param bool schedule_for_reminder: `true`: Notify host and alternative host about the meeting cancellation via email. `false`: Do not send any email notification.
        :param bool cancel_meeting_reminder: `true`: Notify registrants about the meeting cancellation via email.   `false`: Do not send any email notification to meeting registrants.   The default value of this field is `false`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_delete_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_delete_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_delete_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Delete a meeting  # noqa: E501

        Delete a meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_delete_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param bool schedule_for_reminder: `true`: Notify host and alternative host about the meeting cancellation via email. `false`: Do not send any email notification.
        :param bool cancel_meeting_reminder: `true`: Notify registrants about the meeting cancellation via email.   `false`: Do not send any email notification to meeting registrants.   The default value of this field is `false`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'occurrence_id', 'schedule_for_reminder', 'cancel_meeting_reminder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'schedule_for_reminder' in params:
            query_params.append(('schedule_for_reminder', params['schedule_for_reminder']))  # noqa: E501
        if 'cancel_meeting_reminder' in params:
            query_params.append(('cancel_meeting_reminder', params['cancel_meeting_reminder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_invitation(self, meeting_id, **kwargs):  # noqa: E501
        """Get meeting invitation  # noqa: E501

        Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_invitation(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: MeetingInvitation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_invitation_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_invitation_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_invitation_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get meeting invitation  # noqa: E501

        Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_invitation_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: MeetingInvitation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/invitation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingInvitation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_invite_links_create(self, meeting_id, **kwargs):  # noqa: E501
        """Create meeting's invite links  # noqa: E501

        Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_invite_links_create(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param InviteLinks body:
        :return: InviteLinks1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_invite_links_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_invite_links_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_invite_links_create_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Create meeting's invite links  # noqa: E501

        Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_invite_links_create_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param InviteLinks body:
        :return: InviteLinks1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_invite_links_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_invite_links_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/invite_links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InviteLinks1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_live_stream_status_update(self, meeting_id, **kwargs):  # noqa: E501
        """Update Live Stream Status  # noqa: E501

        Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting's livestream.         **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_stream_status_update(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param LivestreamStatusBody body: Meeting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_live_stream_status_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_live_stream_status_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_live_stream_status_update_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update Live Stream Status  # noqa: E501

        Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting's livestream.         **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_stream_status_update_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param LivestreamStatusBody body: Meeting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_live_stream_status_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_live_stream_status_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/livestream/status', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_live_stream_update(self, meeting_id, **kwargs):  # noqa: E501
        """Update a livestream  # noqa: E501

        Update a meeting's livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_stream_update(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdLivestreamBody body: Meeting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_live_stream_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_live_stream_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_live_stream_update_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update a livestream  # noqa: E501

        Update a meeting's livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_stream_update_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdLivestreamBody body: Meeting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_live_stream_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_live_stream_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/livestream', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_live_streaming_join_token(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's join token for live streaming  # noqa: E501

        Get a meeting's join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_streaming_join_token(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_live_streaming_join_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_live_streaming_join_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_live_streaming_join_token_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's join token for live streaming  # noqa: E501

        Get a meeting's join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_live_streaming_join_token_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_live_streaming_join_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_live_streaming_join_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/jointoken/live_streaming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_local_archiving_archive_token(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's archive token for local archiving  # noqa: E501

        Get a meeting's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting's raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_local_archiving_archive_token(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_local_archiving_archive_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_local_archiving_archive_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_local_archiving_archive_token_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's archive token for local archiving  # noqa: E501

        Get a meeting's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting's raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_local_archiving_archive_token_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_local_archiving_archive_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_local_archiving_archive_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/jointoken/local_archiving', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_local_recording_join_token(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's join token for local recording  # noqa: E501

        Get a meeting's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_recording`,`meeting_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_local_recording_join_token(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_local_recording_join_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_local_recording_join_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_local_recording_join_token_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting's join token for local recording  # noqa: E501

        Get a meeting's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_recording`,`meeting_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_local_recording_join_token_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_local_recording_join_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_local_recording_join_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/jointoken/local_recording', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_poll_create(self, meeting_id, **kwargs):  # noqa: E501
        """Create a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_create(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingAndWebinarPollingObject body: Meeting poll object
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_poll_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_poll_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_poll_create_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Create a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_create_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingAndWebinarPollingObject body: Meeting poll object
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_poll_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_poll_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/polls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingAndWebinarPollingObject1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_poll_delete(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Delete a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_delete(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_poll_delete_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_poll_delete_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
            return data

    def meeting_poll_delete_with_http_info(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Delete a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_delete_with_http_info(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_poll_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_poll_delete`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `meeting_poll_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/polls/{pollId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_poll_get(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Get a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_get(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_poll_get_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_poll_get_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
            return data

    def meeting_poll_get_with_http_info(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Get a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_get_with_http_info(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :return: MeetingAndWebinarPollingObject1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_poll_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_poll_get`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `meeting_poll_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/polls/{pollId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingAndWebinarPollingObject1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_poll_update(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Update a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_update(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :param MeetingAndWebinarPollingObject2 body: Meeting Poll
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_poll_update_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_poll_update_with_http_info(meeting_id, poll_id, **kwargs)  # noqa: E501
            return data

    def meeting_poll_update_with_http_info(self, meeting_id, poll_id, **kwargs):  # noqa: E501
        """Update a meeting poll  # noqa: E501

        Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_poll_update_with_http_info(meeting_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str poll_id: The poll ID (required)
        :param MeetingAndWebinarPollingObject2 body: Meeting Poll
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'poll_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_poll_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_poll_update`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `meeting_poll_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/polls/{pollId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_polls(self, meeting_id, **kwargs):  # noqa: E501
        """List meeting polls  # noqa: E501

        Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_polls(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param bool anonymous: Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
        :return: PollList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_polls_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_polls_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List meeting polls  # noqa: E501

        Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.          **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_polls_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param bool anonymous: Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
        :return: PollList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'anonymous']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_polls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_polls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'anonymous' in params:
            query_params.append(('anonymous', params['anonymous']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PollList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrant_create(self, meeting_id, **kwargs):  # noqa: E501
        """Add a meeting registrant  # noqa: E501

        Create and submit a user's registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting's capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_create(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdRegistrantsBody body:
        :param str occurrence_ids: A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/docs/api-reference/zoom-api/methods#operation/meeting) API.
        :return: InlineResponse20112
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrant_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrant_create_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrant_create_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Add a meeting registrant  # noqa: E501

        Create and submit a user's registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting's capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_create_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdRegistrantsBody body:
        :param str occurrence_ids: A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/docs/api-reference/zoom-api/methods#operation/meeting) API.
        :return: InlineResponse20112
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body', 'occurrence_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrant_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrant_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_ids' in params:
            query_params.append(('occurrence_ids', params['occurrence_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20112',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrant_get(self, meeting_id, registrant_id, **kwargs):  # noqa: E501
        """Get a meeting registrant  # noqa: E501

        Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_get(meeting_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str registrant_id: The registrant ID. (required)
        :return: MeetingRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrant_get_with_http_info(meeting_id, registrant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrant_get_with_http_info(meeting_id, registrant_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrant_get_with_http_info(self, meeting_id, registrant_id, **kwargs):  # noqa: E501
        """Get a meeting registrant  # noqa: E501

        Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_get_with_http_info(meeting_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str registrant_id: The registrant ID. (required)
        :return: MeetingRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'registrant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrant_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrant_get`")  # noqa: E501
        # verify the required parameter 'registrant_id' is set
        if ('registrant_id' not in params or
                params['registrant_id'] is None):
            raise ValueError("Missing the required parameter `registrant_id` when calling `meeting_registrant_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'registrant_id' in params:
            path_params['registrantId'] = params['registrant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants/{registrantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingRegistrant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrant_question_update(self, meeting_id, **kwargs):  # noqa: E501
        """Update registration questions  # noqa: E501

        Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).           **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_question_update(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingRegistrantQuestions1 body: Meeting Registrant Questions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrant_question_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrant_question_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrant_question_update_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update registration questions  # noqa: E501

        Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).           **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_question_update_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingRegistrantQuestions1 body: Meeting Registrant Questions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrant_question_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrant_question_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants/questions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrant_status(self, meeting_id, **kwargs):  # noqa: E501
        """Update registrant's status  # noqa: E501

        Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_status(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param RegistrantsStatusBody1 body:
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrant_status_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrant_status_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrant_status_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update registrant's status  # noqa: E501

        Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrant_status_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param RegistrantsStatusBody1 body:
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrant_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrant_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrants(self, meeting_id, **kwargs):  # noqa: E501
        """List meeting registrants  # noqa: E501

        A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrants(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param str status: Query by the registrant's status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrants_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrants_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrants_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List meeting registrants  # noqa: E501

        A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.           **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrants_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str occurrence_id: The meeting or webinar occurrence ID.
        :param str status: Query by the registrant's status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'occurrence_id', 'status', 'page_size', 'page_number', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_registrants_questions_get(self, meeting_id, **kwargs):  # noqa: E501
        """List registration questions   # noqa: E501

        List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrants_questions_get(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: MeetingRegistrantQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_registrants_questions_get_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_registrants_questions_get_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_registrants_questions_get_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List registration questions   # noqa: E501

        List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_registrants_questions_get_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: MeetingRegistrantQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_registrants_questions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_registrants_questions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingRegistrantQuestions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_status(self, meeting_id, **kwargs):  # noqa: E501
        """Update meeting status  # noqa: E501

        Update the status of a meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_status(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdStatusBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_status_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_status_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_status_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update meeting status  # noqa: E501

        Update the status of a meeting.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_status_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param MeetingIdStatusBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_survey_delete(self, meeting_id, **kwargs):  # noqa: E501
        """Delete a meeting survey  # noqa: E501

        Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_delete(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_survey_delete_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_survey_delete_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_survey_delete_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Delete a meeting survey  # noqa: E501

        Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_delete_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_survey_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_survey_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/survey', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_survey_get(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting survey  # noqa: E501

        Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_get(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits. (required)
        :return: MeetingSurveyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_survey_get_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_survey_get_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_survey_get_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get a meeting survey  # noqa: E501

        Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_get_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits. (required)
        :return: MeetingSurveyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_survey_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_survey_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/survey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingSurveyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_survey_update(self, meeting_id, **kwargs):  # noqa: E501
        """Update a meeting survey  # noqa: E501

        Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_update(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits. (required)
        :param MeetingSurveyObject1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_survey_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_survey_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_survey_update_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update a meeting survey  # noqa: E501

        Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_survey_update_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits. (required)
        :param MeetingSurveyObject1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_survey_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_survey_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/survey', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_template_create(self, user_id, **kwargs):  # noqa: E501
        """Create a meeting template from an existing meeting  # noqa: E501

        Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_template_create(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :param UserIdMeetingTemplatesBody body:
        :return: InlineResponse20113
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_template_create_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_template_create_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def meeting_template_create_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Create a meeting template from an existing meeting  # noqa: E501

        Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_template_create_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API. (required)
        :param UserIdMeetingTemplatesBody body:
        :return: InlineResponse20113
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_template_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `meeting_template_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/meeting_templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20113',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_token(self, meeting_id, **kwargs):  # noqa: E501
        """Get meeting's token  # noqa: E501

        Get a meeting's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_token(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str type: The meeting token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_token_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_token_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get meeting's token  # noqa: E501

        Get a meeting's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_token_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
        :param str type: The meeting token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meeting_update(self, meeting_id, **kwargs):  # noqa: E501
        """Update a meeting  # noqa: E501

        Update meeting details.  **Note**  * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.  * The `start_time` value **must** be a future date. If the value is omitted or a date in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**.    **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_update(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits. (required)
        :param MeetingsMeetingIdBody body: Meeting
        :param str occurrence_id: Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meeting_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meeting_update_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def meeting_update_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Update a meeting  # noqa: E501

        Update meeting details.  **Note**  * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.  * The `start_time` value **must** be a future date. If the value is omitted or a date in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**.    **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meeting_update_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting's ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits. (required)
        :param MeetingsMeetingIdBody body: Meeting
        :param str occurrence_id: Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'body', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meeting_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meeting_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meetingregistrantdelete(self, meeting_id, registrant_id, **kwargs):  # noqa: E501
        """Delete a meeting registrant  # noqa: E501

        Delete a meeting registrant.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meetingregistrantdelete(meeting_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting ID. (required)
        :param str registrant_id: The meeting registrant ID. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meetingregistrantdelete_with_http_info(meeting_id, registrant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meetingregistrantdelete_with_http_info(meeting_id, registrant_id, **kwargs)  # noqa: E501
            return data

    def meetingregistrantdelete_with_http_info(self, meeting_id, registrant_id, **kwargs):  # noqa: E501
        """Delete a meeting registrant  # noqa: E501

        Delete a meeting registrant.           **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meetingregistrantdelete_with_http_info(meeting_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The meeting ID. (required)
        :param str registrant_id: The meeting registrant ID. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'registrant_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meetingregistrantdelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `meetingregistrantdelete`")  # noqa: E501
        # verify the required parameter 'registrant_id' is set
        if ('registrant_id' not in params or
                params['registrant_id'] is None):
            raise ValueError("Missing the required parameter `registrant_id` when calling `meetingregistrantdelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'registrant_id' in params:
            path_params['registrantId'] = params['registrant_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/meetings/{meetingId}/registrants/{registrantId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def meetings(self, user_id, **kwargs):  # noqa: E501
        """List meetings  # noqa: E501

        List a meeting host user's scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user's [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meetings(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The type of meeting.  * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.  * `live` - All the ongoing meetings.  * `upcoming` - All upcoming meetings, including live meetings.  * `upcoming_meetings` - All upcoming meetings, including live meetings.  * `previous_meetings` - All the previous meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :param int page_number: The page number of the current page in the returned records.
        :param date _from: The start date.
        :param date to: The end data.
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.meetings_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.meetings_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def meetings_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List meetings  # noqa: E501

        List a meeting host user's scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user's [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.meetings_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The type of meeting.  * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.  * `live` - All the ongoing meetings.  * `upcoming` - All upcoming meetings, including live meetings.  * `upcoming_meetings` - All upcoming meetings, including live meetings.  * `previous_meetings` - All the previous meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :param int page_number: The page number of the current page in the returned records.
        :param date _from: The start date.
        :param date to: The end data.
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'page_size', 'next_page_token', 'page_number', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method meetings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `meetings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/meetings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def past_meeting_details(self, meeting_id, **kwargs):  # noqa: E501
        """Get past meeting details  # noqa: E501

        Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meeting_details(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeetingId3 meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request. (required)
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.past_meeting_details_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.past_meeting_details_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def past_meeting_details_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get past meeting details  # noqa: E501

        Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meeting_details_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeetingId3 meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request. (required)
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method past_meeting_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `past_meeting_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_meetings/{meetingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def past_meeting_participants(self, meeting_id, **kwargs):  # noqa: E501
        """Get past meeting participants  # noqa: E501

        Retrieve information on participants from a past meeting. Note the API doesn't return results if there's only one participant in a meeting.         **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meeting_participants(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.past_meeting_participants_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.past_meeting_participants_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def past_meeting_participants_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get past meeting participants  # noqa: E501

        Retrieve information on participants from a past meeting. Note the API doesn't return results if there's only one participant in a meeting.         **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meeting_participants_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting's ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method past_meeting_participants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `past_meeting_participants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_meetings/{meetingId}/participants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def past_meetings(self, meeting_id, **kwargs):  # noqa: E501
        """List past meeting instances  # noqa: E501

        Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meetings(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The past meeting's ID. (required)
        :return: MeetingInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.past_meetings_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.past_meetings_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def past_meetings_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List past meeting instances  # noqa: E501

        Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_meetings_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meeting_id: The past meeting's ID. (required)
        :return: MeetingInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method past_meetings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `past_meetings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/past_meetings/{meetingId}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
