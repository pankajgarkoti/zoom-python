# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002ChatShareFilesRestrictions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'only_allow_specific_file_types': 'bool',
        'file_type_restrictions': 'list[str]',
        'file_type_restrictions_for_external': 'list[str]',
        'maximum_file_size': 'bool',
        'file_size_restrictions': 'int',
        'file_size_restrictions_for_external': 'int'
    }

    attribute_map = {
        'only_allow_specific_file_types': 'only_allow_specific_file_types',
        'file_type_restrictions': 'file_type_restrictions',
        'file_type_restrictions_for_external': 'file_type_restrictions_for_external',
        'maximum_file_size': 'maximum_file_size',
        'file_size_restrictions': 'file_size_restrictions',
        'file_size_restrictions_for_external': 'file_size_restrictions_for_external'
    }

    def __init__(self, only_allow_specific_file_types=None, file_type_restrictions=None, file_type_restrictions_for_external=None, maximum_file_size=None, file_size_restrictions=None, file_size_restrictions_for_external=None):  # noqa: E501
        """InlineResponse2002ChatShareFilesRestrictions - a model defined in Swagger"""  # noqa: E501
        self._only_allow_specific_file_types = None
        self._file_type_restrictions = None
        self._file_type_restrictions_for_external = None
        self._maximum_file_size = None
        self._file_size_restrictions = None
        self._file_size_restrictions_for_external = None
        self.discriminator = None
        if only_allow_specific_file_types is not None:
            self.only_allow_specific_file_types = only_allow_specific_file_types
        if file_type_restrictions is not None:
            self.file_type_restrictions = file_type_restrictions
        if file_type_restrictions_for_external is not None:
            self.file_type_restrictions_for_external = file_type_restrictions_for_external
        if maximum_file_size is not None:
            self.maximum_file_size = maximum_file_size
        if file_size_restrictions is not None:
            self.file_size_restrictions = file_size_restrictions
        if file_size_restrictions_for_external is not None:
            self.file_size_restrictions_for_external = file_size_restrictions_for_external

    @property
    def only_allow_specific_file_types(self):
        """Gets the only_allow_specific_file_types of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501

        Only allow specified file types.  # noqa: E501

        :return: The only_allow_specific_file_types of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._only_allow_specific_file_types

    @only_allow_specific_file_types.setter
    def only_allow_specific_file_types(self, only_allow_specific_file_types):
        """Sets the only_allow_specific_file_types of this InlineResponse2002ChatShareFilesRestrictions.

        Only allow specified file types.  # noqa: E501

        :param only_allow_specific_file_types: The only_allow_specific_file_types of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: bool
        """

        self._only_allow_specific_file_types = only_allow_specific_file_types

    @property
    def file_type_restrictions(self):
        """Gets the file_type_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501


        :return: The file_type_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_type_restrictions

    @file_type_restrictions.setter
    def file_type_restrictions(self, file_type_restrictions):
        """Sets the file_type_restrictions of this InlineResponse2002ChatShareFilesRestrictions.


        :param file_type_restrictions: The file_type_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = [".gz", ".rar", ".zip", ".xls", ".xlsx", ".json", ".png", ".pptx", ".ppt", ".7z", ".xmind", ".pdf", ".pps", ".txt", ".docx", ".doc"]  # noqa: E501
        if not set(file_type_restrictions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `file_type_restrictions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(file_type_restrictions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._file_type_restrictions = file_type_restrictions

    @property
    def file_type_restrictions_for_external(self):
        """Gets the file_type_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501


        :return: The file_type_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_type_restrictions_for_external

    @file_type_restrictions_for_external.setter
    def file_type_restrictions_for_external(self, file_type_restrictions_for_external):
        """Sets the file_type_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.


        :param file_type_restrictions_for_external: The file_type_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = [".gz", ".rar", ".zip", ".xls", ".xlsx", ".json", ".png", ".pptx", ".ppt", ".7z", ".xmind", ".pdf", ".pps", ".txt", ".docx", ".doc"]  # noqa: E501
        if not set(file_type_restrictions_for_external).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `file_type_restrictions_for_external` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(file_type_restrictions_for_external) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._file_type_restrictions_for_external = file_type_restrictions_for_external

    @property
    def maximum_file_size(self):
        """Gets the maximum_file_size of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501

        Whether to restrict the file size.  # noqa: E501

        :return: The maximum_file_size of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._maximum_file_size

    @maximum_file_size.setter
    def maximum_file_size(self, maximum_file_size):
        """Sets the maximum_file_size of this InlineResponse2002ChatShareFilesRestrictions.

        Whether to restrict the file size.  # noqa: E501

        :param maximum_file_size: The maximum_file_size of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: bool
        """

        self._maximum_file_size = maximum_file_size

    @property
    def file_size_restrictions(self):
        """Gets the file_size_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501

        Maximum file size.  # noqa: E501

        :return: The file_size_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: int
        """
        return self._file_size_restrictions

    @file_size_restrictions.setter
    def file_size_restrictions(self, file_size_restrictions):
        """Sets the file_size_restrictions of this InlineResponse2002ChatShareFilesRestrictions.

        Maximum file size.  # noqa: E501

        :param file_size_restrictions: The file_size_restrictions of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: int
        """
        allowed_values = [50, 100, 200, 300, 400, 500]  # noqa: E501
        if file_size_restrictions not in allowed_values:
            raise ValueError(
                "Invalid value for `file_size_restrictions` ({0}), must be one of {1}"  # noqa: E501
                .format(file_size_restrictions, allowed_values)
            )

        self._file_size_restrictions = file_size_restrictions

    @property
    def file_size_restrictions_for_external(self):
        """Gets the file_size_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501

        Maximum file size for external users.  # noqa: E501

        :return: The file_size_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :rtype: int
        """
        return self._file_size_restrictions_for_external

    @file_size_restrictions_for_external.setter
    def file_size_restrictions_for_external(self, file_size_restrictions_for_external):
        """Sets the file_size_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.

        Maximum file size for external users.  # noqa: E501

        :param file_size_restrictions_for_external: The file_size_restrictions_for_external of this InlineResponse2002ChatShareFilesRestrictions.  # noqa: E501
        :type: int
        """
        allowed_values = [50, 100, 200, 300, 400, 500]  # noqa: E501
        if file_size_restrictions_for_external not in allowed_values:
            raise ValueError(
                "Invalid value for `file_size_restrictions_for_external` ({0}), must be one of {1}"  # noqa: E501
                .format(file_size_restrictions_for_external, allowed_values)
            )

        self._file_size_restrictions_for_external = file_size_restrictions_for_external

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002ChatShareFilesRestrictions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002ChatShareFilesRestrictions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
