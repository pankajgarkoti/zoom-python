# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsScheduleMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_type': 'str',
        'enforce_login': 'bool',
        'enforce_login_domains': 'str',
        'enforce_login_with_domains': 'bool',
        'force_pmi_jbh_password': 'bool',
        'host_video': 'bool',
        'enable_dedicated_group_chat': 'bool',
        'jbh_time': 'int',
        'join_before_host': 'bool',
        'meeting_password_requirement': 'AccountsaccountIdsettingsScheduleMeetingMeetingPasswordRequirement',
        'not_store_meeting_topic': 'bool',
        'participant_video': 'bool',
        'allow_host_to_disable_participant_video': 'bool',
        'personal_meeting': 'bool',
        'require_password_for_instant_meetings': 'bool',
        'require_password_for_pmi_meetings': 'str',
        'require_password_for_scheduled_meetings': 'bool',
        'require_password_for_scheduling_new_meetings': 'bool',
        'use_pmi_for_instant_meetings': 'bool',
        'use_pmi_for_scheduled_meetings': 'bool',
        'always_display_zoom_meeting_as_topic': 'AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomMeetingAsTopic',
        'hide_meeting_description': 'AccountsaccountIdsettingsScheduleMeetingHideMeetingDescription',
        'always_display_zoom_webinar_as_topic': 'AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomWebinarAsTopic',
        'hide_webinar_description': 'AccountsaccountIdsettingsScheduleMeetingHideWebinarDescription',
        'meeting_template': 'AccountsaccountIdsettingsScheduleMeetingMeetingTemplate',
        'continuous_meeting_chat': 'AccountsaccountIdsettingsScheduleMeetingContinuousMeetingChat'
    }

    attribute_map = {
        'audio_type': 'audio_type',
        'enforce_login': 'enforce_login',
        'enforce_login_domains': 'enforce_login_domains',
        'enforce_login_with_domains': 'enforce_login_with_domains',
        'force_pmi_jbh_password': 'force_pmi_jbh_password',
        'host_video': 'host_video',
        'enable_dedicated_group_chat': 'enable_dedicated_group_chat',
        'jbh_time': 'jbh_time',
        'join_before_host': 'join_before_host',
        'meeting_password_requirement': 'meeting_password_requirement',
        'not_store_meeting_topic': 'not_store_meeting_topic',
        'participant_video': 'participant_video',
        'allow_host_to_disable_participant_video': 'allow_host_to_disable_participant_video',
        'personal_meeting': 'personal_meeting',
        'require_password_for_instant_meetings': 'require_password_for_instant_meetings',
        'require_password_for_pmi_meetings': 'require_password_for_pmi_meetings',
        'require_password_for_scheduled_meetings': 'require_password_for_scheduled_meetings',
        'require_password_for_scheduling_new_meetings': 'require_password_for_scheduling_new_meetings',
        'use_pmi_for_instant_meetings': 'use_pmi_for_instant_meetings',
        'use_pmi_for_scheduled_meetings': 'use_pmi_for_scheduled_meetings',
        'always_display_zoom_meeting_as_topic': 'always_display_zoom_meeting_as_topic',
        'hide_meeting_description': 'hide_meeting_description',
        'always_display_zoom_webinar_as_topic': 'always_display_zoom_webinar_as_topic',
        'hide_webinar_description': 'hide_webinar_description',
        'meeting_template': 'meeting_template',
        'continuous_meeting_chat': 'continuous_meeting_chat'
    }

    def __init__(self, audio_type='both', enforce_login=None, enforce_login_domains=None, enforce_login_with_domains=None, force_pmi_jbh_password=None, host_video=None, enable_dedicated_group_chat=None, jbh_time=None, join_before_host=None, meeting_password_requirement=None, not_store_meeting_topic=None, participant_video=None, allow_host_to_disable_participant_video=None, personal_meeting=None, require_password_for_instant_meetings=None, require_password_for_pmi_meetings=None, require_password_for_scheduled_meetings=None, require_password_for_scheduling_new_meetings=None, use_pmi_for_instant_meetings=None, use_pmi_for_scheduled_meetings=None, always_display_zoom_meeting_as_topic=None, hide_meeting_description=None, always_display_zoom_webinar_as_topic=None, hide_webinar_description=None, meeting_template=None, continuous_meeting_chat=None):  # noqa: E501
        """AccountsaccountIdsettingsScheduleMeeting - a model defined in Swagger"""  # noqa: E501
        self._audio_type = None
        self._enforce_login = None
        self._enforce_login_domains = None
        self._enforce_login_with_domains = None
        self._force_pmi_jbh_password = None
        self._host_video = None
        self._enable_dedicated_group_chat = None
        self._jbh_time = None
        self._join_before_host = None
        self._meeting_password_requirement = None
        self._not_store_meeting_topic = None
        self._participant_video = None
        self._allow_host_to_disable_participant_video = None
        self._personal_meeting = None
        self._require_password_for_instant_meetings = None
        self._require_password_for_pmi_meetings = None
        self._require_password_for_scheduled_meetings = None
        self._require_password_for_scheduling_new_meetings = None
        self._use_pmi_for_instant_meetings = None
        self._use_pmi_for_scheduled_meetings = None
        self._always_display_zoom_meeting_as_topic = None
        self._hide_meeting_description = None
        self._always_display_zoom_webinar_as_topic = None
        self._hide_webinar_description = None
        self._meeting_template = None
        self._continuous_meeting_chat = None
        self.discriminator = None
        if audio_type is not None:
            self.audio_type = audio_type
        if enforce_login is not None:
            self.enforce_login = enforce_login
        if enforce_login_domains is not None:
            self.enforce_login_domains = enforce_login_domains
        if enforce_login_with_domains is not None:
            self.enforce_login_with_domains = enforce_login_with_domains
        if force_pmi_jbh_password is not None:
            self.force_pmi_jbh_password = force_pmi_jbh_password
        if host_video is not None:
            self.host_video = host_video
        if enable_dedicated_group_chat is not None:
            self.enable_dedicated_group_chat = enable_dedicated_group_chat
        if jbh_time is not None:
            self.jbh_time = jbh_time
        if join_before_host is not None:
            self.join_before_host = join_before_host
        if meeting_password_requirement is not None:
            self.meeting_password_requirement = meeting_password_requirement
        if not_store_meeting_topic is not None:
            self.not_store_meeting_topic = not_store_meeting_topic
        if participant_video is not None:
            self.participant_video = participant_video
        if allow_host_to_disable_participant_video is not None:
            self.allow_host_to_disable_participant_video = allow_host_to_disable_participant_video
        if personal_meeting is not None:
            self.personal_meeting = personal_meeting
        if require_password_for_instant_meetings is not None:
            self.require_password_for_instant_meetings = require_password_for_instant_meetings
        if require_password_for_pmi_meetings is not None:
            self.require_password_for_pmi_meetings = require_password_for_pmi_meetings
        if require_password_for_scheduled_meetings is not None:
            self.require_password_for_scheduled_meetings = require_password_for_scheduled_meetings
        if require_password_for_scheduling_new_meetings is not None:
            self.require_password_for_scheduling_new_meetings = require_password_for_scheduling_new_meetings
        if use_pmi_for_instant_meetings is not None:
            self.use_pmi_for_instant_meetings = use_pmi_for_instant_meetings
        if use_pmi_for_scheduled_meetings is not None:
            self.use_pmi_for_scheduled_meetings = use_pmi_for_scheduled_meetings
        if always_display_zoom_meeting_as_topic is not None:
            self.always_display_zoom_meeting_as_topic = always_display_zoom_meeting_as_topic
        if hide_meeting_description is not None:
            self.hide_meeting_description = hide_meeting_description
        if always_display_zoom_webinar_as_topic is not None:
            self.always_display_zoom_webinar_as_topic = always_display_zoom_webinar_as_topic
        if hide_webinar_description is not None:
            self.hide_webinar_description = hide_webinar_description
        if meeting_template is not None:
            self.meeting_template = meeting_template
        if continuous_meeting_chat is not None:
            self.continuous_meeting_chat = continuous_meeting_chat

    @property
    def audio_type(self):
        """Gets the audio_type of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Determine how participants can join the audio portion of the meeting.    `both` - Telephony and VoIP.    `telephony` - Audio PSTN telephony only.    `voip` - VoIP only.    `thirdParty` - 3rd party audio conference.  # noqa: E501

        :return: The audio_type of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: str
        """
        return self._audio_type

    @audio_type.setter
    def audio_type(self, audio_type):
        """Sets the audio_type of this AccountsaccountIdsettingsScheduleMeeting.

        Determine how participants can join the audio portion of the meeting.    `both` - Telephony and VoIP.    `telephony` - Audio PSTN telephony only.    `voip` - VoIP only.    `thirdParty` - 3rd party audio conference.  # noqa: E501

        :param audio_type: The audio_type of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["both", "telephony", "voip", "thirdParty"]  # noqa: E501
        if audio_type not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_type` ({0}), must be one of {1}"  # noqa: E501
                .format(audio_type, allowed_values)
            )

        self._audio_type = audio_type

    @property
    def enforce_login(self):
        """Gets the enforce_login of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Only Zoom users who are signed in can join meetings.  # noqa: E501

        :return: The enforce_login of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_login

    @enforce_login.setter
    def enforce_login(self, enforce_login):
        """Sets the enforce_login of this AccountsaccountIdsettingsScheduleMeeting.

        Only Zoom users who are signed in can join meetings.  # noqa: E501

        :param enforce_login: The enforce_login of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._enforce_login = enforce_login

    @property
    def enforce_login_domains(self):
        """Gets the enforce_login_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Only signed in users with a specified domain can join the meeting.   # noqa: E501

        :return: The enforce_login_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: str
        """
        return self._enforce_login_domains

    @enforce_login_domains.setter
    def enforce_login_domains(self, enforce_login_domains):
        """Sets the enforce_login_domains of this AccountsaccountIdsettingsScheduleMeeting.

        Only signed in users with a specified domain can join the meeting.   # noqa: E501

        :param enforce_login_domains: The enforce_login_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: str
        """

        self._enforce_login_domains = enforce_login_domains

    @property
    def enforce_login_with_domains(self):
        """Gets the enforce_login_with_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Only signed in users with a specific domain can join meetings.  # noqa: E501

        :return: The enforce_login_with_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_login_with_domains

    @enforce_login_with_domains.setter
    def enforce_login_with_domains(self, enforce_login_with_domains):
        """Sets the enforce_login_with_domains of this AccountsaccountIdsettingsScheduleMeeting.

        Only signed in users with a specific domain can join meetings.  # noqa: E501

        :param enforce_login_with_domains: The enforce_login_with_domains of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._enforce_login_with_domains = enforce_login_with_domains

    @property
    def force_pmi_jbh_password(self):
        """Gets the force_pmi_jbh_password of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Require a passcode for Personal Meetings if attendees can join before host.  # noqa: E501

        :return: The force_pmi_jbh_password of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._force_pmi_jbh_password

    @force_pmi_jbh_password.setter
    def force_pmi_jbh_password(self, force_pmi_jbh_password):
        """Sets the force_pmi_jbh_password of this AccountsaccountIdsettingsScheduleMeeting.

        Require a passcode for Personal Meetings if attendees can join before host.  # noqa: E501

        :param force_pmi_jbh_password: The force_pmi_jbh_password of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._force_pmi_jbh_password = force_pmi_jbh_password

    @property
    def host_video(self):
        """Gets the host_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Start meetings with the host video on.  # noqa: E501

        :return: The host_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._host_video

    @host_video.setter
    def host_video(self, host_video):
        """Sets the host_video of this AccountsaccountIdsettingsScheduleMeeting.

        Start meetings with the host video on.  # noqa: E501

        :param host_video: The host_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._host_video = host_video

    @property
    def enable_dedicated_group_chat(self):
        """Gets the enable_dedicated_group_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Enable dedicated group chats for meeting conversations.  # noqa: E501

        :return: The enable_dedicated_group_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dedicated_group_chat

    @enable_dedicated_group_chat.setter
    def enable_dedicated_group_chat(self, enable_dedicated_group_chat):
        """Sets the enable_dedicated_group_chat of this AccountsaccountIdsettingsScheduleMeeting.

        Enable dedicated group chats for meeting conversations.  # noqa: E501

        :param enable_dedicated_group_chat: The enable_dedicated_group_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._enable_dedicated_group_chat = enable_dedicated_group_chat

    @property
    def jbh_time(self):
        """Gets the jbh_time of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        If the value of `join_before_host` field is set to `true`, this field can be used to indicate time limits within which a participant may join a meeting before a host.  *  `0`: Allow participant to join anytime. *  `5`: Allow participant to join 5 minutes before meeting start time.  * `10`: Allow participant to join 10 minutes before meeting start time.  # noqa: E501

        :return: The jbh_time of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: int
        """
        return self._jbh_time

    @jbh_time.setter
    def jbh_time(self, jbh_time):
        """Sets the jbh_time of this AccountsaccountIdsettingsScheduleMeeting.

        If the value of `join_before_host` field is set to `true`, this field can be used to indicate time limits within which a participant may join a meeting before a host.  *  `0`: Allow participant to join anytime. *  `5`: Allow participant to join 5 minutes before meeting start time.  * `10`: Allow participant to join 10 minutes before meeting start time.  # noqa: E501

        :param jbh_time: The jbh_time of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 5, 10, 15]  # noqa: E501
        if jbh_time not in allowed_values:
            raise ValueError(
                "Invalid value for `jbh_time` ({0}), must be one of {1}"  # noqa: E501
                .format(jbh_time, allowed_values)
            )

        self._jbh_time = jbh_time

    @property
    def join_before_host(self):
        """Gets the join_before_host of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Allow participants to join the meeting before the host arrives.  # noqa: E501

        :return: The join_before_host of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._join_before_host

    @join_before_host.setter
    def join_before_host(self, join_before_host):
        """Sets the join_before_host of this AccountsaccountIdsettingsScheduleMeeting.

        Allow participants to join the meeting before the host arrives.  # noqa: E501

        :param join_before_host: The join_before_host of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._join_before_host = join_before_host

    @property
    def meeting_password_requirement(self):
        """Gets the meeting_password_requirement of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The meeting_password_requirement of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingMeetingPasswordRequirement
        """
        return self._meeting_password_requirement

    @meeting_password_requirement.setter
    def meeting_password_requirement(self, meeting_password_requirement):
        """Sets the meeting_password_requirement of this AccountsaccountIdsettingsScheduleMeeting.


        :param meeting_password_requirement: The meeting_password_requirement of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingMeetingPasswordRequirement
        """

        self._meeting_password_requirement = meeting_password_requirement

    @property
    def not_store_meeting_topic(self):
        """Gets the not_store_meeting_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Always display **Zoom Meeting** as the meeting topic.  # noqa: E501

        :return: The not_store_meeting_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._not_store_meeting_topic

    @not_store_meeting_topic.setter
    def not_store_meeting_topic(self, not_store_meeting_topic):
        """Sets the not_store_meeting_topic of this AccountsaccountIdsettingsScheduleMeeting.

        Always display **Zoom Meeting** as the meeting topic.  # noqa: E501

        :param not_store_meeting_topic: The not_store_meeting_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._not_store_meeting_topic = not_store_meeting_topic

    @property
    def participant_video(self):
        """Gets the participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Start meetings with the participant video on. Participants can change this setting during the meeting.  # noqa: E501

        :return: The participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._participant_video

    @participant_video.setter
    def participant_video(self, participant_video):
        """Sets the participant_video of this AccountsaccountIdsettingsScheduleMeeting.

        Start meetings with the participant video on. Participants can change this setting during the meeting.  # noqa: E501

        :param participant_video: The participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._participant_video = participant_video

    @property
    def allow_host_to_disable_participant_video(self):
        """Gets the allow_host_to_disable_participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Allow host to disable participant video when scheduling a meeting.  # noqa: E501

        :return: The allow_host_to_disable_participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_to_disable_participant_video

    @allow_host_to_disable_participant_video.setter
    def allow_host_to_disable_participant_video(self, allow_host_to_disable_participant_video):
        """Sets the allow_host_to_disable_participant_video of this AccountsaccountIdsettingsScheduleMeeting.

        Allow host to disable participant video when scheduling a meeting.  # noqa: E501

        :param allow_host_to_disable_participant_video: The allow_host_to_disable_participant_video of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_host_to_disable_participant_video = allow_host_to_disable_participant_video

    @property
    def personal_meeting(self):
        """Gets the personal_meeting of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Personal meeting setting.     `true`: Indicates that the **Enable Personal Meeting ID** setting is turned on. Users can choose to use personal meeting ID for their meetings.          `false`: Indicates that the **Enable Personal Meeting ID** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with a PMI will be invalid. Scheduled meetings will need to be manually updated. For Zoom Phone only: If a user has been assigned a desk phone, **Elevate to Zoom Meeting** on desk phone will be disabled.     # noqa: E501

        :return: The personal_meeting of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._personal_meeting

    @personal_meeting.setter
    def personal_meeting(self, personal_meeting):
        """Sets the personal_meeting of this AccountsaccountIdsettingsScheduleMeeting.

        Personal meeting setting.     `true`: Indicates that the **Enable Personal Meeting ID** setting is turned on. Users can choose to use personal meeting ID for their meetings.          `false`: Indicates that the **Enable Personal Meeting ID** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with a PMI will be invalid. Scheduled meetings will need to be manually updated. For Zoom Phone only: If a user has been assigned a desk phone, **Elevate to Zoom Meeting** on desk phone will be disabled.     # noqa: E501

        :param personal_meeting: The personal_meeting of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._personal_meeting = personal_meeting

    @property
    def require_password_for_instant_meetings(self):
        """Gets the require_password_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Require a passcode for instant meetings. If you use a PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.   # noqa: E501

        :return: The require_password_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._require_password_for_instant_meetings

    @require_password_for_instant_meetings.setter
    def require_password_for_instant_meetings(self, require_password_for_instant_meetings):
        """Sets the require_password_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Require a passcode for instant meetings. If you use a PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.   # noqa: E501

        :param require_password_for_instant_meetings: The require_password_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._require_password_for_instant_meetings = require_password_for_instant_meetings

    @property
    def require_password_for_pmi_meetings(self):
        """Gets the require_password_for_pmi_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Require a passcode for a meeting held using a Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.   # noqa: E501

        :return: The require_password_for_pmi_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: str
        """
        return self._require_password_for_pmi_meetings

    @require_password_for_pmi_meetings.setter
    def require_password_for_pmi_meetings(self, require_password_for_pmi_meetings):
        """Sets the require_password_for_pmi_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Require a passcode for a meeting held using a Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.   # noqa: E501

        :param require_password_for_pmi_meetings: The require_password_for_pmi_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["jbh_only", "all", "none"]  # noqa: E501
        if require_password_for_pmi_meetings not in allowed_values:
            raise ValueError(
                "Invalid value for `require_password_for_pmi_meetings` ({0}), must be one of {1}"  # noqa: E501
                .format(require_password_for_pmi_meetings, allowed_values)
            )

        self._require_password_for_pmi_meetings = require_password_for_pmi_meetings

    @property
    def require_password_for_scheduled_meetings(self):
        """Gets the require_password_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Require a passcode for meetings which have already been scheduled.   # noqa: E501

        :return: The require_password_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._require_password_for_scheduled_meetings

    @require_password_for_scheduled_meetings.setter
    def require_password_for_scheduled_meetings(self, require_password_for_scheduled_meetings):
        """Sets the require_password_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Require a passcode for meetings which have already been scheduled.   # noqa: E501

        :param require_password_for_scheduled_meetings: The require_password_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._require_password_for_scheduled_meetings = require_password_for_scheduled_meetings

    @property
    def require_password_for_scheduling_new_meetings(self):
        """Gets the require_password_for_scheduling_new_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Require a passcode when scheduling new meetings. This setting applies for regular meetings that do not use a PMI. If enabled, a passcode will be generated while a host schedules a new meeting and participants will be required to enter the passcode before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.  # noqa: E501

        :return: The require_password_for_scheduling_new_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._require_password_for_scheduling_new_meetings

    @require_password_for_scheduling_new_meetings.setter
    def require_password_for_scheduling_new_meetings(self, require_password_for_scheduling_new_meetings):
        """Sets the require_password_for_scheduling_new_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Require a passcode when scheduling new meetings. This setting applies for regular meetings that do not use a PMI. If enabled, a passcode will be generated while a host schedules a new meeting and participants will be required to enter the passcode before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.  # noqa: E501

        :param require_password_for_scheduling_new_meetings: The require_password_for_scheduling_new_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._require_password_for_scheduling_new_meetings = require_password_for_scheduling_new_meetings

    @property
    def use_pmi_for_instant_meetings(self):
        """Gets the use_pmi_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Use a Personal Meeting ID (PMI) when starting an instant meeting.  # noqa: E501

        :return: The use_pmi_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi_for_instant_meetings

    @use_pmi_for_instant_meetings.setter
    def use_pmi_for_instant_meetings(self, use_pmi_for_instant_meetings):
        """Sets the use_pmi_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Use a Personal Meeting ID (PMI) when starting an instant meeting.  # noqa: E501

        :param use_pmi_for_instant_meetings: The use_pmi_for_instant_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._use_pmi_for_instant_meetings = use_pmi_for_instant_meetings

    @property
    def use_pmi_for_scheduled_meetings(self):
        """Gets the use_pmi_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501

        Use a Personal Meeting ID (PMI) when scheduling a meeting.  # noqa: E501

        :return: The use_pmi_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi_for_scheduled_meetings

    @use_pmi_for_scheduled_meetings.setter
    def use_pmi_for_scheduled_meetings(self, use_pmi_for_scheduled_meetings):
        """Sets the use_pmi_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.

        Use a Personal Meeting ID (PMI) when scheduling a meeting.  # noqa: E501

        :param use_pmi_for_scheduled_meetings: The use_pmi_for_scheduled_meetings of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._use_pmi_for_scheduled_meetings = use_pmi_for_scheduled_meetings

    @property
    def always_display_zoom_meeting_as_topic(self):
        """Gets the always_display_zoom_meeting_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The always_display_zoom_meeting_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
        """
        return self._always_display_zoom_meeting_as_topic

    @always_display_zoom_meeting_as_topic.setter
    def always_display_zoom_meeting_as_topic(self, always_display_zoom_meeting_as_topic):
        """Sets the always_display_zoom_meeting_as_topic of this AccountsaccountIdsettingsScheduleMeeting.


        :param always_display_zoom_meeting_as_topic: The always_display_zoom_meeting_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
        """

        self._always_display_zoom_meeting_as_topic = always_display_zoom_meeting_as_topic

    @property
    def hide_meeting_description(self):
        """Gets the hide_meeting_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The hide_meeting_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingHideMeetingDescription
        """
        return self._hide_meeting_description

    @hide_meeting_description.setter
    def hide_meeting_description(self, hide_meeting_description):
        """Sets the hide_meeting_description of this AccountsaccountIdsettingsScheduleMeeting.


        :param hide_meeting_description: The hide_meeting_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingHideMeetingDescription
        """

        self._hide_meeting_description = hide_meeting_description

    @property
    def always_display_zoom_webinar_as_topic(self):
        """Gets the always_display_zoom_webinar_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The always_display_zoom_webinar_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
        """
        return self._always_display_zoom_webinar_as_topic

    @always_display_zoom_webinar_as_topic.setter
    def always_display_zoom_webinar_as_topic(self, always_display_zoom_webinar_as_topic):
        """Sets the always_display_zoom_webinar_as_topic of this AccountsaccountIdsettingsScheduleMeeting.


        :param always_display_zoom_webinar_as_topic: The always_display_zoom_webinar_as_topic of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
        """

        self._always_display_zoom_webinar_as_topic = always_display_zoom_webinar_as_topic

    @property
    def hide_webinar_description(self):
        """Gets the hide_webinar_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The hide_webinar_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingHideWebinarDescription
        """
        return self._hide_webinar_description

    @hide_webinar_description.setter
    def hide_webinar_description(self, hide_webinar_description):
        """Sets the hide_webinar_description of this AccountsaccountIdsettingsScheduleMeeting.


        :param hide_webinar_description: The hide_webinar_description of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingHideWebinarDescription
        """

        self._hide_webinar_description = hide_webinar_description

    @property
    def meeting_template(self):
        """Gets the meeting_template of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The meeting_template of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingMeetingTemplate
        """
        return self._meeting_template

    @meeting_template.setter
    def meeting_template(self, meeting_template):
        """Sets the meeting_template of this AccountsaccountIdsettingsScheduleMeeting.


        :param meeting_template: The meeting_template of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingMeetingTemplate
        """

        self._meeting_template = meeting_template

    @property
    def continuous_meeting_chat(self):
        """Gets the continuous_meeting_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501


        :return: The continuous_meeting_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :rtype: AccountsaccountIdsettingsScheduleMeetingContinuousMeetingChat
        """
        return self._continuous_meeting_chat

    @continuous_meeting_chat.setter
    def continuous_meeting_chat(self, continuous_meeting_chat):
        """Sets the continuous_meeting_chat of this AccountsaccountIdsettingsScheduleMeeting.


        :param continuous_meeting_chat: The continuous_meeting_chat of this AccountsaccountIdsettingsScheduleMeeting.  # noqa: E501
        :type: AccountsaccountIdsettingsScheduleMeetingContinuousMeetingChat
        """

        self._continuous_meeting_chat = continuous_meeting_chat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsScheduleMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsScheduleMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
