# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007StatisticByFileExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mp4_file_count': 'int',
        'm4a_file_count': 'int',
        'txt_file_count': 'int',
        'json_file_count': 'int',
        'vtt_file_count': 'int'
    }

    attribute_map = {
        'mp4_file_count': 'mp4_file_count',
        'm4a_file_count': 'm4a_file_count',
        'txt_file_count': 'txt_file_count',
        'json_file_count': 'json_file_count',
        'vtt_file_count': 'vtt_file_count'
    }

    def __init__(self, mp4_file_count=None, m4a_file_count=None, txt_file_count=None, json_file_count=None, vtt_file_count=None):  # noqa: E501
        """InlineResponse2007StatisticByFileExtension - a model defined in Swagger"""  # noqa: E501
        self._mp4_file_count = None
        self._m4a_file_count = None
        self._txt_file_count = None
        self._json_file_count = None
        self._vtt_file_count = None
        self.discriminator = None
        if mp4_file_count is not None:
            self.mp4_file_count = mp4_file_count
        if m4a_file_count is not None:
            self.m4a_file_count = m4a_file_count
        if txt_file_count is not None:
            self.txt_file_count = txt_file_count
        if json_file_count is not None:
            self.json_file_count = json_file_count
        if vtt_file_count is not None:
            self.vtt_file_count = vtt_file_count

    @property
    def mp4_file_count(self):
        """Gets the mp4_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501

        The number of mp4 files.  # noqa: E501

        :return: The mp4_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :rtype: int
        """
        return self._mp4_file_count

    @mp4_file_count.setter
    def mp4_file_count(self, mp4_file_count):
        """Sets the mp4_file_count of this InlineResponse2007StatisticByFileExtension.

        The number of mp4 files.  # noqa: E501

        :param mp4_file_count: The mp4_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :type: int
        """

        self._mp4_file_count = mp4_file_count

    @property
    def m4a_file_count(self):
        """Gets the m4a_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501

        The number of m4a files.  # noqa: E501

        :return: The m4a_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :rtype: int
        """
        return self._m4a_file_count

    @m4a_file_count.setter
    def m4a_file_count(self, m4a_file_count):
        """Sets the m4a_file_count of this InlineResponse2007StatisticByFileExtension.

        The number of m4a files.  # noqa: E501

        :param m4a_file_count: The m4a_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :type: int
        """

        self._m4a_file_count = m4a_file_count

    @property
    def txt_file_count(self):
        """Gets the txt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501

        The number of txt files.  # noqa: E501

        :return: The txt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :rtype: int
        """
        return self._txt_file_count

    @txt_file_count.setter
    def txt_file_count(self, txt_file_count):
        """Sets the txt_file_count of this InlineResponse2007StatisticByFileExtension.

        The number of txt files.  # noqa: E501

        :param txt_file_count: The txt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :type: int
        """

        self._txt_file_count = txt_file_count

    @property
    def json_file_count(self):
        """Gets the json_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501

        The number of json files.  # noqa: E501

        :return: The json_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :rtype: int
        """
        return self._json_file_count

    @json_file_count.setter
    def json_file_count(self, json_file_count):
        """Sets the json_file_count of this InlineResponse2007StatisticByFileExtension.

        The number of json files.  # noqa: E501

        :param json_file_count: The json_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :type: int
        """

        self._json_file_count = json_file_count

    @property
    def vtt_file_count(self):
        """Gets the vtt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501

        The number of vtt files.  # noqa: E501

        :return: The vtt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :rtype: int
        """
        return self._vtt_file_count

    @vtt_file_count.setter
    def vtt_file_count(self, vtt_file_count):
        """Sets the vtt_file_count of this InlineResponse2007StatisticByFileExtension.

        The number of vtt files.  # noqa: E501

        :param vtt_file_count: The vtt_file_count of this InlineResponse2007StatisticByFileExtension.  # noqa: E501
        :type: int
        """

        self._vtt_file_count = vtt_file_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007StatisticByFileExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007StatisticByFileExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
