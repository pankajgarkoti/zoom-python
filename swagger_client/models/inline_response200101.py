# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200101(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wallpaper': 'InlineResponse200101Wallpaper',
        'virtual_backgrounds': 'list[InlineResponse200101VirtualBackgrounds]',
        'name_tags': 'list[InlineResponse200101NameTags]'
    }

    attribute_map = {
        'wallpaper': 'wallpaper',
        'virtual_backgrounds': 'virtual_backgrounds',
        'name_tags': 'name_tags'
    }

    def __init__(self, wallpaper=None, virtual_backgrounds=None, name_tags=None):  # noqa: E501
        """InlineResponse200101 - a model defined in Swagger"""  # noqa: E501
        self._wallpaper = None
        self._virtual_backgrounds = None
        self._name_tags = None
        self.discriminator = None
        if wallpaper is not None:
            self.wallpaper = wallpaper
        if virtual_backgrounds is not None:
            self.virtual_backgrounds = virtual_backgrounds
        if name_tags is not None:
            self.name_tags = name_tags

    @property
    def wallpaper(self):
        """Gets the wallpaper of this InlineResponse200101.  # noqa: E501


        :return: The wallpaper of this InlineResponse200101.  # noqa: E501
        :rtype: InlineResponse200101Wallpaper
        """
        return self._wallpaper

    @wallpaper.setter
    def wallpaper(self, wallpaper):
        """Sets the wallpaper of this InlineResponse200101.


        :param wallpaper: The wallpaper of this InlineResponse200101.  # noqa: E501
        :type: InlineResponse200101Wallpaper
        """

        self._wallpaper = wallpaper

    @property
    def virtual_backgrounds(self):
        """Gets the virtual_backgrounds of this InlineResponse200101.  # noqa: E501

        Information about the webinar's [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) files.  # noqa: E501

        :return: The virtual_backgrounds of this InlineResponse200101.  # noqa: E501
        :rtype: list[InlineResponse200101VirtualBackgrounds]
        """
        return self._virtual_backgrounds

    @virtual_backgrounds.setter
    def virtual_backgrounds(self, virtual_backgrounds):
        """Sets the virtual_backgrounds of this InlineResponse200101.

        Information about the webinar's [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) files.  # noqa: E501

        :param virtual_backgrounds: The virtual_backgrounds of this InlineResponse200101.  # noqa: E501
        :type: list[InlineResponse200101VirtualBackgrounds]
        """

        self._virtual_backgrounds = virtual_backgrounds

    @property
    def name_tags(self):
        """Gets the name_tags of this InlineResponse200101.  # noqa: E501

        Information about the webinar's name tag.  # noqa: E501

        :return: The name_tags of this InlineResponse200101.  # noqa: E501
        :rtype: list[InlineResponse200101NameTags]
        """
        return self._name_tags

    @name_tags.setter
    def name_tags(self, name_tags):
        """Sets the name_tags of this InlineResponse200101.

        Information about the webinar's name tag.  # noqa: E501

        :param name_tags: The name_tags of this InlineResponse200101.  # noqa: E501
        :type: list[InlineResponse200101NameTags]
        """

        self._name_tags = name_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200101, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200101):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
