# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsRecording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_user_access_recording': 'bool',
        'allow_recovery_deleted_cloud_recordings': 'bool',
        'archive': 'AccountsaccountIdsettingsRecordingArchive',
        'auto_delete_cmr': 'bool',
        'auto_delete_cmr_days': 'int',
        'auto_recording': 'str',
        'cloud_recording': 'bool',
        'cloud_recording_download': 'bool',
        'cloud_recording_download_host': 'bool',
        'display_participant_name': 'bool',
        'host_delete_cloud_recording': 'bool',
        'ip_address_access_control': 'AccountsaccountIdsettingsRecordingIpAddressAccessControl',
        'local_recording': 'bool',
        'optimize_recording_for_3rd_party_video_editor': 'bool',
        'prevent_host_access_recording': 'bool',
        'record_audio_file': 'bool',
        'record_audio_file_each_participant': 'bool',
        'record_files_separately': 'AccountsaccountIdsettingsRecordingRecordFilesSeparately',
        'record_gallery_view': 'bool',
        'record_speaker_view': 'bool',
        'recording_audio_transcript': 'bool',
        'recording_disclaimer': 'bool',
        'recording_highlight': 'bool',
        'smart_recording': 'AccountsaccountIdsettingsRecordingSmartRecording',
        'recording_password_requirement': 'AccountsaccountIdsettingsRecordingRecordingPasswordRequirement',
        'recording_thumbnails': 'bool',
        'required_password_for_existing_cloud_recordings': 'bool',
        'required_password_for_shared_cloud_recordings': 'bool',
        'save_chat_text': 'bool',
        'save_close_caption': 'bool',
        'save_panelist_chat': 'bool',
        'save_poll_results': 'bool',
        'show_timestamp': 'bool'
    }

    attribute_map = {
        'account_user_access_recording': 'account_user_access_recording',
        'allow_recovery_deleted_cloud_recordings': 'allow_recovery_deleted_cloud_recordings',
        'archive': 'archive',
        'auto_delete_cmr': 'auto_delete_cmr',
        'auto_delete_cmr_days': 'auto_delete_cmr_days',
        'auto_recording': 'auto_recording',
        'cloud_recording': 'cloud_recording',
        'cloud_recording_download': 'cloud_recording_download',
        'cloud_recording_download_host': 'cloud_recording_download_host',
        'display_participant_name': 'display_participant_name',
        'host_delete_cloud_recording': 'host_delete_cloud_recording',
        'ip_address_access_control': 'ip_address_access_control',
        'local_recording': 'local_recording',
        'optimize_recording_for_3rd_party_video_editor': 'optimize_recording_for_3rd_party_video_editor',
        'prevent_host_access_recording': 'prevent_host_access_recording',
        'record_audio_file': 'record_audio_file',
        'record_audio_file_each_participant': 'record_audio_file_each_participant',
        'record_files_separately': 'record_files_separately',
        'record_gallery_view': 'record_gallery_view',
        'record_speaker_view': 'record_speaker_view',
        'recording_audio_transcript': 'recording_audio_transcript',
        'recording_disclaimer': 'recording_disclaimer',
        'recording_highlight': 'recording_highlight',
        'smart_recording': 'smart_recording',
        'recording_password_requirement': 'recording_password_requirement',
        'recording_thumbnails': 'recording_thumbnails',
        'required_password_for_existing_cloud_recordings': 'required_password_for_existing_cloud_recordings',
        'required_password_for_shared_cloud_recordings': 'required_password_for_shared_cloud_recordings',
        'save_chat_text': 'save_chat_text',
        'save_close_caption': 'save_close_caption',
        'save_panelist_chat': 'save_panelist_chat',
        'save_poll_results': 'save_poll_results',
        'show_timestamp': 'show_timestamp'
    }

    def __init__(self, account_user_access_recording=None, allow_recovery_deleted_cloud_recordings=None, archive=None, auto_delete_cmr=None, auto_delete_cmr_days=None, auto_recording=None, cloud_recording=None, cloud_recording_download=None, cloud_recording_download_host=None, display_participant_name=None, host_delete_cloud_recording=None, ip_address_access_control=None, local_recording=None, optimize_recording_for_3rd_party_video_editor=None, prevent_host_access_recording=None, record_audio_file=None, record_audio_file_each_participant=None, record_files_separately=None, record_gallery_view=None, record_speaker_view=None, recording_audio_transcript=None, recording_disclaimer=None, recording_highlight=None, smart_recording=None, recording_password_requirement=None, recording_thumbnails=None, required_password_for_existing_cloud_recordings=None, required_password_for_shared_cloud_recordings=None, save_chat_text=None, save_close_caption=None, save_panelist_chat=None, save_poll_results=None, show_timestamp=None):  # noqa: E501
        """AccountsaccountIdsettingsRecording - a model defined in Swagger"""  # noqa: E501
        self._account_user_access_recording = None
        self._allow_recovery_deleted_cloud_recordings = None
        self._archive = None
        self._auto_delete_cmr = None
        self._auto_delete_cmr_days = None
        self._auto_recording = None
        self._cloud_recording = None
        self._cloud_recording_download = None
        self._cloud_recording_download_host = None
        self._display_participant_name = None
        self._host_delete_cloud_recording = None
        self._ip_address_access_control = None
        self._local_recording = None
        self._optimize_recording_for_3rd_party_video_editor = None
        self._prevent_host_access_recording = None
        self._record_audio_file = None
        self._record_audio_file_each_participant = None
        self._record_files_separately = None
        self._record_gallery_view = None
        self._record_speaker_view = None
        self._recording_audio_transcript = None
        self._recording_disclaimer = None
        self._recording_highlight = None
        self._smart_recording = None
        self._recording_password_requirement = None
        self._recording_thumbnails = None
        self._required_password_for_existing_cloud_recordings = None
        self._required_password_for_shared_cloud_recordings = None
        self._save_chat_text = None
        self._save_close_caption = None
        self._save_panelist_chat = None
        self._save_poll_results = None
        self._show_timestamp = None
        self.discriminator = None
        if account_user_access_recording is not None:
            self.account_user_access_recording = account_user_access_recording
        if allow_recovery_deleted_cloud_recordings is not None:
            self.allow_recovery_deleted_cloud_recordings = allow_recovery_deleted_cloud_recordings
        if archive is not None:
            self.archive = archive
        if auto_delete_cmr is not None:
            self.auto_delete_cmr = auto_delete_cmr
        if auto_delete_cmr_days is not None:
            self.auto_delete_cmr_days = auto_delete_cmr_days
        if auto_recording is not None:
            self.auto_recording = auto_recording
        if cloud_recording is not None:
            self.cloud_recording = cloud_recording
        if cloud_recording_download is not None:
            self.cloud_recording_download = cloud_recording_download
        if cloud_recording_download_host is not None:
            self.cloud_recording_download_host = cloud_recording_download_host
        if display_participant_name is not None:
            self.display_participant_name = display_participant_name
        if host_delete_cloud_recording is not None:
            self.host_delete_cloud_recording = host_delete_cloud_recording
        if ip_address_access_control is not None:
            self.ip_address_access_control = ip_address_access_control
        if local_recording is not None:
            self.local_recording = local_recording
        if optimize_recording_for_3rd_party_video_editor is not None:
            self.optimize_recording_for_3rd_party_video_editor = optimize_recording_for_3rd_party_video_editor
        if prevent_host_access_recording is not None:
            self.prevent_host_access_recording = prevent_host_access_recording
        if record_audio_file is not None:
            self.record_audio_file = record_audio_file
        if record_audio_file_each_participant is not None:
            self.record_audio_file_each_participant = record_audio_file_each_participant
        if record_files_separately is not None:
            self.record_files_separately = record_files_separately
        if record_gallery_view is not None:
            self.record_gallery_view = record_gallery_view
        if record_speaker_view is not None:
            self.record_speaker_view = record_speaker_view
        if recording_audio_transcript is not None:
            self.recording_audio_transcript = recording_audio_transcript
        if recording_disclaimer is not None:
            self.recording_disclaimer = recording_disclaimer
        if recording_highlight is not None:
            self.recording_highlight = recording_highlight
        if smart_recording is not None:
            self.smart_recording = smart_recording
        if recording_password_requirement is not None:
            self.recording_password_requirement = recording_password_requirement
        if recording_thumbnails is not None:
            self.recording_thumbnails = recording_thumbnails
        if required_password_for_existing_cloud_recordings is not None:
            self.required_password_for_existing_cloud_recordings = required_password_for_existing_cloud_recordings
        if required_password_for_shared_cloud_recordings is not None:
            self.required_password_for_shared_cloud_recordings = required_password_for_shared_cloud_recordings
        if save_chat_text is not None:
            self.save_chat_text = save_chat_text
        if save_close_caption is not None:
            self.save_close_caption = save_close_caption
        if save_panelist_chat is not None:
            self.save_panelist_chat = save_panelist_chat
        if save_poll_results is not None:
            self.save_poll_results = save_poll_results
        if show_timestamp is not None:
            self.show_timestamp = show_timestamp

    @property
    def account_user_access_recording(self):
        """Gets the account_user_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings.  # noqa: E501

        :return: The account_user_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._account_user_access_recording

    @account_user_access_recording.setter
    def account_user_access_recording(self, account_user_access_recording):
        """Sets the account_user_access_recording of this AccountsaccountIdsettingsRecording.

        Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings.  # noqa: E501

        :param account_user_access_recording: The account_user_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._account_user_access_recording = account_user_access_recording

    @property
    def allow_recovery_deleted_cloud_recordings(self):
        """Gets the allow_recovery_deleted_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Allow recovery of deleted cloud recordings from trash.  If the value of this field is set to `true`, deleted cloud recordings will be kept in trash for 30 days after deletion and can be recovered within that period.   # noqa: E501

        :return: The allow_recovery_deleted_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._allow_recovery_deleted_cloud_recordings

    @allow_recovery_deleted_cloud_recordings.setter
    def allow_recovery_deleted_cloud_recordings(self, allow_recovery_deleted_cloud_recordings):
        """Sets the allow_recovery_deleted_cloud_recordings of this AccountsaccountIdsettingsRecording.

        Allow recovery of deleted cloud recordings from trash.  If the value of this field is set to `true`, deleted cloud recordings will be kept in trash for 30 days after deletion and can be recovered within that period.   # noqa: E501

        :param allow_recovery_deleted_cloud_recordings: The allow_recovery_deleted_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._allow_recovery_deleted_cloud_recordings = allow_recovery_deleted_cloud_recordings

    @property
    def archive(self):
        """Gets the archive of this AccountsaccountIdsettingsRecording.  # noqa: E501


        :return: The archive of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: AccountsaccountIdsettingsRecordingArchive
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this AccountsaccountIdsettingsRecording.


        :param archive: The archive of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: AccountsaccountIdsettingsRecordingArchive
        """

        self._archive = archive

    @property
    def auto_delete_cmr(self):
        """Gets the auto_delete_cmr of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Allow Zoom to permanently delete recordings automatically after a specified number of days.  # noqa: E501

        :return: The auto_delete_cmr of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete_cmr

    @auto_delete_cmr.setter
    def auto_delete_cmr(self, auto_delete_cmr):
        """Sets the auto_delete_cmr of this AccountsaccountIdsettingsRecording.

        Allow Zoom to permanently delete recordings automatically after a specified number of days.  # noqa: E501

        :param auto_delete_cmr: The auto_delete_cmr of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._auto_delete_cmr = auto_delete_cmr

    @property
    def auto_delete_cmr_days(self):
        """Gets the auto_delete_cmr_days of this AccountsaccountIdsettingsRecording.  # noqa: E501

        When the `auto_delete_cmr` value is `true`, this value is the number of days before the auto-deletion of cloud recordings.  * `30` - 30 days.  * `60` - 60 days.  * `90` - 90 days.  * `120` - 120 days.  # noqa: E501

        :return: The auto_delete_cmr_days of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: int
        """
        return self._auto_delete_cmr_days

    @auto_delete_cmr_days.setter
    def auto_delete_cmr_days(self, auto_delete_cmr_days):
        """Sets the auto_delete_cmr_days of this AccountsaccountIdsettingsRecording.

        When the `auto_delete_cmr` value is `true`, this value is the number of days before the auto-deletion of cloud recordings.  * `30` - 30 days.  * `60` - 60 days.  * `90` - 90 days.  * `120` - 120 days.  # noqa: E501

        :param auto_delete_cmr_days: The auto_delete_cmr_days of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: int
        """
        allowed_values = [30, 60, 90, 120]  # noqa: E501
        if auto_delete_cmr_days not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_delete_cmr_days` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_delete_cmr_days, allowed_values)
            )

        self._auto_delete_cmr_days = auto_delete_cmr_days

    @property
    def auto_recording(self):
        """Gets the auto_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Automatic recording:    `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :return: The auto_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: str
        """
        return self._auto_recording

    @auto_recording.setter
    def auto_recording(self, auto_recording):
        """Sets the auto_recording of this AccountsaccountIdsettingsRecording.

        Automatic recording:    `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :param auto_recording: The auto_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "cloud", "none"]  # noqa: E501
        if auto_recording not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_recording` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_recording, allowed_values)
            )

        self._auto_recording = auto_recording

    @property
    def cloud_recording(self):
        """Gets the cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Allow hosts to record and save the meeting in the cloud.  # noqa: E501

        :return: The cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording

    @cloud_recording.setter
    def cloud_recording(self, cloud_recording):
        """Sets the cloud_recording of this AccountsaccountIdsettingsRecording.

        Allow hosts to record and save the meeting in the cloud.  # noqa: E501

        :param cloud_recording: The cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._cloud_recording = cloud_recording

    @property
    def cloud_recording_download(self):
        """Gets the cloud_recording_download of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Cloud recording downloads.  # noqa: E501

        :return: The cloud_recording_download of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording_download

    @cloud_recording_download.setter
    def cloud_recording_download(self, cloud_recording_download):
        """Sets the cloud_recording_download of this AccountsaccountIdsettingsRecording.

        Cloud recording downloads.  # noqa: E501

        :param cloud_recording_download: The cloud_recording_download of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._cloud_recording_download = cloud_recording_download

    @property
    def cloud_recording_download_host(self):
        """Gets the cloud_recording_download_host of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Only the host can download cloud recordings.  # noqa: E501

        :return: The cloud_recording_download_host of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording_download_host

    @cloud_recording_download_host.setter
    def cloud_recording_download_host(self, cloud_recording_download_host):
        """Sets the cloud_recording_download_host of this AccountsaccountIdsettingsRecording.

        Only the host can download cloud recordings.  # noqa: E501

        :param cloud_recording_download_host: The cloud_recording_download_host of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._cloud_recording_download_host = cloud_recording_download_host

    @property
    def display_participant_name(self):
        """Gets the display_participant_name of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to display participants' names in the recording.  # noqa: E501

        :return: The display_participant_name of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._display_participant_name

    @display_participant_name.setter
    def display_participant_name(self, display_participant_name):
        """Sets the display_participant_name of this AccountsaccountIdsettingsRecording.

        Whether to display participants' names in the recording.  # noqa: E501

        :param display_participant_name: The display_participant_name of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._display_participant_name = display_participant_name

    @property
    def host_delete_cloud_recording(self):
        """Gets the host_delete_cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        If the value of this field is set to `true`, hosts will be able to delete the recordings. If this option is set to `false`, the recordings cannot be deleted by the host and only admin can delete them.   # noqa: E501

        :return: The host_delete_cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._host_delete_cloud_recording

    @host_delete_cloud_recording.setter
    def host_delete_cloud_recording(self, host_delete_cloud_recording):
        """Sets the host_delete_cloud_recording of this AccountsaccountIdsettingsRecording.

        If the value of this field is set to `true`, hosts will be able to delete the recordings. If this option is set to `false`, the recordings cannot be deleted by the host and only admin can delete them.   # noqa: E501

        :param host_delete_cloud_recording: The host_delete_cloud_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._host_delete_cloud_recording = host_delete_cloud_recording

    @property
    def ip_address_access_control(self):
        """Gets the ip_address_access_control of this AccountsaccountIdsettingsRecording.  # noqa: E501


        :return: The ip_address_access_control of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: AccountsaccountIdsettingsRecordingIpAddressAccessControl
        """
        return self._ip_address_access_control

    @ip_address_access_control.setter
    def ip_address_access_control(self, ip_address_access_control):
        """Sets the ip_address_access_control of this AccountsaccountIdsettingsRecording.


        :param ip_address_access_control: The ip_address_access_control of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: AccountsaccountIdsettingsRecordingIpAddressAccessControl
        """

        self._ip_address_access_control = ip_address_access_control

    @property
    def local_recording(self):
        """Gets the local_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Allow hosts and participants to record the meeting using a local file.  # noqa: E501

        :return: The local_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._local_recording

    @local_recording.setter
    def local_recording(self, local_recording):
        """Sets the local_recording of this AccountsaccountIdsettingsRecording.

        Allow hosts and participants to record the meeting using a local file.  # noqa: E501

        :param local_recording: The local_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._local_recording = local_recording

    @property
    def optimize_recording_for_3rd_party_video_editor(self):
        """Gets the optimize_recording_for_3rd_party_video_editor of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to optimize recordings for a 3rd party video editor. This may increase the file size and the time it takes to generate recording files.  # noqa: E501

        :return: The optimize_recording_for_3rd_party_video_editor of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._optimize_recording_for_3rd_party_video_editor

    @optimize_recording_for_3rd_party_video_editor.setter
    def optimize_recording_for_3rd_party_video_editor(self, optimize_recording_for_3rd_party_video_editor):
        """Sets the optimize_recording_for_3rd_party_video_editor of this AccountsaccountIdsettingsRecording.

        Whether to optimize recordings for a 3rd party video editor. This may increase the file size and the time it takes to generate recording files.  # noqa: E501

        :param optimize_recording_for_3rd_party_video_editor: The optimize_recording_for_3rd_party_video_editor of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._optimize_recording_for_3rd_party_video_editor = optimize_recording_for_3rd_party_video_editor

    @property
    def prevent_host_access_recording(self):
        """Gets the prevent_host_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501

        If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.   # noqa: E501

        :return: The prevent_host_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_host_access_recording

    @prevent_host_access_recording.setter
    def prevent_host_access_recording(self, prevent_host_access_recording):
        """Sets the prevent_host_access_recording of this AccountsaccountIdsettingsRecording.

        If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.   # noqa: E501

        :param prevent_host_access_recording: The prevent_host_access_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._prevent_host_access_recording = prevent_host_access_recording

    @property
    def record_audio_file(self):
        """Gets the record_audio_file of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to record one audio file for all participants.  # noqa: E501

        :return: The record_audio_file of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._record_audio_file

    @record_audio_file.setter
    def record_audio_file(self, record_audio_file):
        """Sets the record_audio_file of this AccountsaccountIdsettingsRecording.

        Whether to record one audio file for all participants.  # noqa: E501

        :param record_audio_file: The record_audio_file of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._record_audio_file = record_audio_file

    @property
    def record_audio_file_each_participant(self):
        """Gets the record_audio_file_each_participant of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to record a separate audio file for each participant. This only supports a maximum of 200 participants' audio files.  # noqa: E501

        :return: The record_audio_file_each_participant of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._record_audio_file_each_participant

    @record_audio_file_each_participant.setter
    def record_audio_file_each_participant(self, record_audio_file_each_participant):
        """Sets the record_audio_file_each_participant of this AccountsaccountIdsettingsRecording.

        Whether to record a separate audio file for each participant. This only supports a maximum of 200 participants' audio files.  # noqa: E501

        :param record_audio_file_each_participant: The record_audio_file_each_participant of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._record_audio_file_each_participant = record_audio_file_each_participant

    @property
    def record_files_separately(self):
        """Gets the record_files_separately of this AccountsaccountIdsettingsRecording.  # noqa: E501


        :return: The record_files_separately of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: AccountsaccountIdsettingsRecordingRecordFilesSeparately
        """
        return self._record_files_separately

    @record_files_separately.setter
    def record_files_separately(self, record_files_separately):
        """Sets the record_files_separately of this AccountsaccountIdsettingsRecording.


        :param record_files_separately: The record_files_separately of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: AccountsaccountIdsettingsRecordingRecordFilesSeparately
        """

        self._record_files_separately = record_files_separately

    @property
    def record_gallery_view(self):
        """Gets the record_gallery_view of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Record the gallery view with a shared screen.  # noqa: E501

        :return: The record_gallery_view of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._record_gallery_view

    @record_gallery_view.setter
    def record_gallery_view(self, record_gallery_view):
        """Sets the record_gallery_view of this AccountsaccountIdsettingsRecording.

        Record the gallery view with a shared screen.  # noqa: E501

        :param record_gallery_view: The record_gallery_view of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._record_gallery_view = record_gallery_view

    @property
    def record_speaker_view(self):
        """Gets the record_speaker_view of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Record the active speaker with a shared screen.  # noqa: E501

        :return: The record_speaker_view of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._record_speaker_view

    @record_speaker_view.setter
    def record_speaker_view(self, record_speaker_view):
        """Sets the record_speaker_view of this AccountsaccountIdsettingsRecording.

        Record the active speaker with a shared screen.  # noqa: E501

        :param record_speaker_view: The record_speaker_view of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._record_speaker_view = record_speaker_view

    @property
    def recording_audio_transcript(self):
        """Gets the recording_audio_transcript of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Automatically transcribe the audio of the meeting or webinar to the cloud.  # noqa: E501

        :return: The recording_audio_transcript of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._recording_audio_transcript

    @recording_audio_transcript.setter
    def recording_audio_transcript(self, recording_audio_transcript):
        """Sets the recording_audio_transcript of this AccountsaccountIdsettingsRecording.

        Automatically transcribe the audio of the meeting or webinar to the cloud.  # noqa: E501

        :param recording_audio_transcript: The recording_audio_transcript of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._recording_audio_transcript = recording_audio_transcript

    @property
    def recording_disclaimer(self):
        """Gets the recording_disclaimer of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Show a disclaimer to participants before a recording starts   # noqa: E501

        :return: The recording_disclaimer of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._recording_disclaimer

    @recording_disclaimer.setter
    def recording_disclaimer(self, recording_disclaimer):
        """Sets the recording_disclaimer of this AccountsaccountIdsettingsRecording.

        Show a disclaimer to participants before a recording starts   # noqa: E501

        :param recording_disclaimer: The recording_disclaimer of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._recording_disclaimer = recording_disclaimer

    @property
    def recording_highlight(self):
        """Gets the recording_highlight of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to enable the [recording highlights](https://support.zoom.us/hc/en-us/articles/360060802432) feature.  # noqa: E501

        :return: The recording_highlight of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._recording_highlight

    @recording_highlight.setter
    def recording_highlight(self, recording_highlight):
        """Sets the recording_highlight of this AccountsaccountIdsettingsRecording.

        Whether to enable the [recording highlights](https://support.zoom.us/hc/en-us/articles/360060802432) feature.  # noqa: E501

        :param recording_highlight: The recording_highlight of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._recording_highlight = recording_highlight

    @property
    def smart_recording(self):
        """Gets the smart_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501


        :return: The smart_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: AccountsaccountIdsettingsRecordingSmartRecording
        """
        return self._smart_recording

    @smart_recording.setter
    def smart_recording(self, smart_recording):
        """Sets the smart_recording of this AccountsaccountIdsettingsRecording.


        :param smart_recording: The smart_recording of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: AccountsaccountIdsettingsRecordingSmartRecording
        """

        self._smart_recording = smart_recording

    @property
    def recording_password_requirement(self):
        """Gets the recording_password_requirement of this AccountsaccountIdsettingsRecording.  # noqa: E501


        :return: The recording_password_requirement of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: AccountsaccountIdsettingsRecordingRecordingPasswordRequirement
        """
        return self._recording_password_requirement

    @recording_password_requirement.setter
    def recording_password_requirement(self, recording_password_requirement):
        """Sets the recording_password_requirement of this AccountsaccountIdsettingsRecording.


        :param recording_password_requirement: The recording_password_requirement of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: AccountsaccountIdsettingsRecordingRecordingPasswordRequirement
        """

        self._recording_password_requirement = recording_password_requirement

    @property
    def recording_thumbnails(self):
        """Gets the recording_thumbnails of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to record thumbnails of the presenter when they are sharing their screen.  # noqa: E501

        :return: The recording_thumbnails of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._recording_thumbnails

    @recording_thumbnails.setter
    def recording_thumbnails(self, recording_thumbnails):
        """Sets the recording_thumbnails of this AccountsaccountIdsettingsRecording.

        Whether to record thumbnails of the presenter when they are sharing their screen.  # noqa: E501

        :param recording_thumbnails: The recording_thumbnails of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._recording_thumbnails = recording_thumbnails

    @property
    def required_password_for_existing_cloud_recordings(self):
        """Gets the required_password_for_existing_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Require a passcode to access existing cloud recordings.  # noqa: E501

        :return: The required_password_for_existing_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._required_password_for_existing_cloud_recordings

    @required_password_for_existing_cloud_recordings.setter
    def required_password_for_existing_cloud_recordings(self, required_password_for_existing_cloud_recordings):
        """Sets the required_password_for_existing_cloud_recordings of this AccountsaccountIdsettingsRecording.

        Require a passcode to access existing cloud recordings.  # noqa: E501

        :param required_password_for_existing_cloud_recordings: The required_password_for_existing_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._required_password_for_existing_cloud_recordings = required_password_for_existing_cloud_recordings

    @property
    def required_password_for_shared_cloud_recordings(self):
        """Gets the required_password_for_shared_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to require a passcode to share cloud recordings.  # noqa: E501

        :return: The required_password_for_shared_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._required_password_for_shared_cloud_recordings

    @required_password_for_shared_cloud_recordings.setter
    def required_password_for_shared_cloud_recordings(self, required_password_for_shared_cloud_recordings):
        """Sets the required_password_for_shared_cloud_recordings of this AccountsaccountIdsettingsRecording.

        Whether to require a passcode to share cloud recordings.  # noqa: E501

        :param required_password_for_shared_cloud_recordings: The required_password_for_shared_cloud_recordings of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._required_password_for_shared_cloud_recordings = required_password_for_shared_cloud_recordings

    @property
    def save_chat_text(self):
        """Gets the save_chat_text of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Save the chat text from the meeting.  # noqa: E501

        :return: The save_chat_text of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._save_chat_text

    @save_chat_text.setter
    def save_chat_text(self, save_chat_text):
        """Sets the save_chat_text of this AccountsaccountIdsettingsRecording.

        Save the chat text from the meeting.  # noqa: E501

        :param save_chat_text: The save_chat_text of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._save_chat_text = save_chat_text

    @property
    def save_close_caption(self):
        """Gets the save_close_caption of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to save [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) as a VTT (Video Track Text) file.  # noqa: E501

        :return: The save_close_caption of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._save_close_caption

    @save_close_caption.setter
    def save_close_caption(self, save_close_caption):
        """Sets the save_close_caption of this AccountsaccountIdsettingsRecording.

        Whether to save [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) as a VTT (Video Track Text) file.  # noqa: E501

        :param save_close_caption: The save_close_caption of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._save_close_caption = save_close_caption

    @property
    def save_panelist_chat(self):
        """Gets the save_panelist_chat of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to save panelist chat to the recording. This setting saves messages sent by panelists during a webinar to either all panelists or all panelists and attendees to the recording.  # noqa: E501

        :return: The save_panelist_chat of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._save_panelist_chat

    @save_panelist_chat.setter
    def save_panelist_chat(self, save_panelist_chat):
        """Sets the save_panelist_chat of this AccountsaccountIdsettingsRecording.

        Whether to save panelist chat to the recording. This setting saves messages sent by panelists during a webinar to either all panelists or all panelists and attendees to the recording.  # noqa: E501

        :param save_panelist_chat: The save_panelist_chat of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._save_panelist_chat = save_panelist_chat

    @property
    def save_poll_results(self):
        """Gets the save_poll_results of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Whether to save poll results shared during the meeting or webinar. This also includes poll results shared during the meeting or webinar.  # noqa: E501

        :return: The save_poll_results of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._save_poll_results

    @save_poll_results.setter
    def save_poll_results(self, save_poll_results):
        """Sets the save_poll_results of this AccountsaccountIdsettingsRecording.

        Whether to save poll results shared during the meeting or webinar. This also includes poll results shared during the meeting or webinar.  # noqa: E501

        :param save_poll_results: The save_poll_results of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._save_poll_results = save_poll_results

    @property
    def show_timestamp(self):
        """Gets the show_timestamp of this AccountsaccountIdsettingsRecording.  # noqa: E501

        Add a timestamp to the recording.  # noqa: E501

        :return: The show_timestamp of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :rtype: bool
        """
        return self._show_timestamp

    @show_timestamp.setter
    def show_timestamp(self, show_timestamp):
        """Sets the show_timestamp of this AccountsaccountIdsettingsRecording.

        Add a timestamp to the recording.  # noqa: E501

        :param show_timestamp: The show_timestamp of this AccountsaccountIdsettingsRecording.  # noqa: E501
        :type: bool
        """

        self._show_timestamp = show_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsRecording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsRecording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
