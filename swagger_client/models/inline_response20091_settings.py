# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20091Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_meeting': 'InlineResponse20091SettingsInMeeting',
        'recording': 'InlineResponse20091SettingsRecording',
        'schedule_meeting': 'InlineResponse20091SettingsScheduleMeeting',
        'meeting_security': 'InlineResponse20091SettingsMeetingSecurity'
    }

    attribute_map = {
        'in_meeting': 'in_meeting',
        'recording': 'recording',
        'schedule_meeting': 'schedule_meeting',
        'meeting_security': 'meeting_security'
    }

    def __init__(self, in_meeting=None, recording=None, schedule_meeting=None, meeting_security=None):  # noqa: E501
        """InlineResponse20091Settings - a model defined in Swagger"""  # noqa: E501
        self._in_meeting = None
        self._recording = None
        self._schedule_meeting = None
        self._meeting_security = None
        self.discriminator = None
        if in_meeting is not None:
            self.in_meeting = in_meeting
        if recording is not None:
            self.recording = recording
        if schedule_meeting is not None:
            self.schedule_meeting = schedule_meeting
        if meeting_security is not None:
            self.meeting_security = meeting_security

    @property
    def in_meeting(self):
        """Gets the in_meeting of this InlineResponse20091Settings.  # noqa: E501


        :return: The in_meeting of this InlineResponse20091Settings.  # noqa: E501
        :rtype: InlineResponse20091SettingsInMeeting
        """
        return self._in_meeting

    @in_meeting.setter
    def in_meeting(self, in_meeting):
        """Sets the in_meeting of this InlineResponse20091Settings.


        :param in_meeting: The in_meeting of this InlineResponse20091Settings.  # noqa: E501
        :type: InlineResponse20091SettingsInMeeting
        """

        self._in_meeting = in_meeting

    @property
    def recording(self):
        """Gets the recording of this InlineResponse20091Settings.  # noqa: E501


        :return: The recording of this InlineResponse20091Settings.  # noqa: E501
        :rtype: InlineResponse20091SettingsRecording
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this InlineResponse20091Settings.


        :param recording: The recording of this InlineResponse20091Settings.  # noqa: E501
        :type: InlineResponse20091SettingsRecording
        """

        self._recording = recording

    @property
    def schedule_meeting(self):
        """Gets the schedule_meeting of this InlineResponse20091Settings.  # noqa: E501


        :return: The schedule_meeting of this InlineResponse20091Settings.  # noqa: E501
        :rtype: InlineResponse20091SettingsScheduleMeeting
        """
        return self._schedule_meeting

    @schedule_meeting.setter
    def schedule_meeting(self, schedule_meeting):
        """Sets the schedule_meeting of this InlineResponse20091Settings.


        :param schedule_meeting: The schedule_meeting of this InlineResponse20091Settings.  # noqa: E501
        :type: InlineResponse20091SettingsScheduleMeeting
        """

        self._schedule_meeting = schedule_meeting

    @property
    def meeting_security(self):
        """Gets the meeting_security of this InlineResponse20091Settings.  # noqa: E501


        :return: The meeting_security of this InlineResponse20091Settings.  # noqa: E501
        :rtype: InlineResponse20091SettingsMeetingSecurity
        """
        return self._meeting_security

    @meeting_security.setter
    def meeting_security(self, meeting_security):
        """Sets the meeting_security of this InlineResponse20091Settings.


        :param meeting_security: The meeting_security of this InlineResponse20091Settings.  # noqa: E501
        :type: InlineResponse20091SettingsMeetingSecurity
        """

        self._meeting_security = meeting_security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20091Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20091Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
