# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20091SettingsScheduleMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_video': 'bool',
        'participant_video': 'bool',
        'mute_upon_entry': 'bool'
    }

    attribute_map = {
        'host_video': 'host_video',
        'participant_video': 'participant_video',
        'mute_upon_entry': 'mute_upon_entry'
    }

    def __init__(self, host_video=None, participant_video=None, mute_upon_entry=False):  # noqa: E501
        """InlineResponse20091SettingsScheduleMeeting - a model defined in Swagger"""  # noqa: E501
        self._host_video = None
        self._participant_video = None
        self._mute_upon_entry = None
        self.discriminator = None
        if host_video is not None:
            self.host_video = host_video
        if participant_video is not None:
            self.participant_video = participant_video
        if mute_upon_entry is not None:
            self.mute_upon_entry = mute_upon_entry

    @property
    def host_video(self):
        """Gets the host_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501

        Start meetings with host video on.  # noqa: E501

        :return: The host_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._host_video

    @host_video.setter
    def host_video(self, host_video):
        """Sets the host_video of this InlineResponse20091SettingsScheduleMeeting.

        Start meetings with host video on.  # noqa: E501

        :param host_video: The host_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._host_video = host_video

    @property
    def participant_video(self):
        """Gets the participant_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501

        Start meetings with the participant video on. Participants can change this setting during the meeting.  # noqa: E501

        :return: The participant_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._participant_video

    @participant_video.setter
    def participant_video(self, participant_video):
        """Sets the participant_video of this InlineResponse20091SettingsScheduleMeeting.

        Start meetings with the participant video on. Participants can change this setting during the meeting.  # noqa: E501

        :param participant_video: The participant_video of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._participant_video = participant_video

    @property
    def mute_upon_entry(self):
        """Gets the mute_upon_entry of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501

        Mute participants upon entry.  # noqa: E501

        :return: The mute_upon_entry of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._mute_upon_entry

    @mute_upon_entry.setter
    def mute_upon_entry(self, mute_upon_entry):
        """Sets the mute_upon_entry of this InlineResponse20091SettingsScheduleMeeting.

        Mute participants upon entry.  # noqa: E501

        :param mute_upon_entry: The mute_upon_entry of this InlineResponse20091SettingsScheduleMeeting.  # noqa: E501
        :type: bool
        """

        self._mute_upon_entry = mute_upon_entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20091SettingsScheduleMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20091SettingsScheduleMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
