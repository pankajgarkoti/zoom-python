# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20045Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_multiple_devices': 'bool',
        'alternative_hosts': 'str',
        'alternative_hosts_email_notification': 'bool',
        'alternative_host_update_polls': 'bool',
        'approval_type': 'int',
        'approved_or_denied_countries_or_regions': 'InlineResponse20045SettingsApprovedOrDeniedCountriesOrRegions',
        'audio': 'str',
        'audio_conference_info': 'str',
        'authentication_domains': 'str',
        'authentication_exception': 'list[InlineResponse20045SettingsAuthenticationException]',
        'authentication_name': 'str',
        'authentication_option': 'str',
        'auto_recording': 'str',
        'breakout_room': 'InlineResponse20045SettingsBreakoutRoom',
        'calendar_type': 'int',
        'close_registration': 'bool',
        'cn_meeting': 'bool',
        'contact_email': 'str',
        'contact_name': 'str',
        'custom_keys': 'list[MeetingsmeetingIdSettingsCustomKeys]',
        'email_notification': 'bool',
        'encryption_type': 'str',
        'enforce_login': 'bool',
        'enforce_login_domains': 'str',
        'focus_mode': 'bool',
        'global_dial_in_countries': 'list[str]',
        'global_dial_in_numbers': 'list[InlineResponse20045SettingsGlobalDialInNumbers]',
        'host_video': 'bool',
        'in_meeting': 'bool',
        'jbh_time': 'int',
        'join_before_host': 'bool',
        'language_interpretation': 'MeetingsmeetingIdSettingsLanguageInterpretation',
        'sign_language_interpretation': 'MeetingsmeetingIdSettingsSignLanguageInterpretation',
        'meeting_authentication': 'bool',
        'mute_upon_entry': 'bool',
        'participant_video': 'bool',
        'private_meeting': 'bool',
        'registrants_confirmation_email': 'bool',
        'registrants_email_notification': 'bool',
        'registration_type': 'int',
        'show_share_button': 'bool',
        'use_pmi': 'bool',
        'waiting_room': 'bool',
        'watermark': 'bool',
        'host_save_video_order': 'bool',
        'internal_meeting': 'bool',
        'continuous_meeting_chat': 'MeetingsmeetingIdSettingsContinuousMeetingChat',
        'participant_focused_meeting': 'bool',
        'push_change_to_calendar': 'bool',
        'resources': 'list[MeetingsmeetingIdSettingsResources]'
    }

    attribute_map = {
        'allow_multiple_devices': 'allow_multiple_devices',
        'alternative_hosts': 'alternative_hosts',
        'alternative_hosts_email_notification': 'alternative_hosts_email_notification',
        'alternative_host_update_polls': 'alternative_host_update_polls',
        'approval_type': 'approval_type',
        'approved_or_denied_countries_or_regions': 'approved_or_denied_countries_or_regions',
        'audio': 'audio',
        'audio_conference_info': 'audio_conference_info',
        'authentication_domains': 'authentication_domains',
        'authentication_exception': 'authentication_exception',
        'authentication_name': 'authentication_name',
        'authentication_option': 'authentication_option',
        'auto_recording': 'auto_recording',
        'breakout_room': 'breakout_room',
        'calendar_type': 'calendar_type',
        'close_registration': 'close_registration',
        'cn_meeting': 'cn_meeting',
        'contact_email': 'contact_email',
        'contact_name': 'contact_name',
        'custom_keys': 'custom_keys',
        'email_notification': 'email_notification',
        'encryption_type': 'encryption_type',
        'enforce_login': 'enforce_login',
        'enforce_login_domains': 'enforce_login_domains',
        'focus_mode': 'focus_mode',
        'global_dial_in_countries': 'global_dial_in_countries',
        'global_dial_in_numbers': 'global_dial_in_numbers',
        'host_video': 'host_video',
        'in_meeting': 'in_meeting',
        'jbh_time': 'jbh_time',
        'join_before_host': 'join_before_host',
        'language_interpretation': 'language_interpretation',
        'sign_language_interpretation': 'sign_language_interpretation',
        'meeting_authentication': 'meeting_authentication',
        'mute_upon_entry': 'mute_upon_entry',
        'participant_video': 'participant_video',
        'private_meeting': 'private_meeting',
        'registrants_confirmation_email': 'registrants_confirmation_email',
        'registrants_email_notification': 'registrants_email_notification',
        'registration_type': 'registration_type',
        'show_share_button': 'show_share_button',
        'use_pmi': 'use_pmi',
        'waiting_room': 'waiting_room',
        'watermark': 'watermark',
        'host_save_video_order': 'host_save_video_order',
        'internal_meeting': 'internal_meeting',
        'continuous_meeting_chat': 'continuous_meeting_chat',
        'participant_focused_meeting': 'participant_focused_meeting',
        'push_change_to_calendar': 'push_change_to_calendar',
        'resources': 'resources'
    }

    def __init__(self, allow_multiple_devices=None, alternative_hosts=None, alternative_hosts_email_notification=True, alternative_host_update_polls=None, approval_type=Approval_typeEnum._2, approved_or_denied_countries_or_regions=None, audio='both', audio_conference_info=None, authentication_domains=None, authentication_exception=None, authentication_name=None, authentication_option=None, auto_recording='none', breakout_room=None, calendar_type=None, close_registration=False, cn_meeting=False, contact_email=None, contact_name=None, custom_keys=None, email_notification=True, encryption_type=None, enforce_login=None, enforce_login_domains=None, focus_mode=None, global_dial_in_countries=None, global_dial_in_numbers=None, host_video=None, in_meeting=False, jbh_time=None, join_before_host=False, language_interpretation=None, sign_language_interpretation=None, meeting_authentication=None, mute_upon_entry=False, participant_video=None, private_meeting=None, registrants_confirmation_email=None, registrants_email_notification=None, registration_type=Registration_typeEnum._1, show_share_button=None, use_pmi=False, waiting_room=False, watermark=False, host_save_video_order=None, internal_meeting=False, continuous_meeting_chat=None, participant_focused_meeting=False, push_change_to_calendar=False, resources=None):  # noqa: E501
        """InlineResponse20045Settings - a model defined in Swagger"""  # noqa: E501
        self._allow_multiple_devices = None
        self._alternative_hosts = None
        self._alternative_hosts_email_notification = None
        self._alternative_host_update_polls = None
        self._approval_type = None
        self._approved_or_denied_countries_or_regions = None
        self._audio = None
        self._audio_conference_info = None
        self._authentication_domains = None
        self._authentication_exception = None
        self._authentication_name = None
        self._authentication_option = None
        self._auto_recording = None
        self._breakout_room = None
        self._calendar_type = None
        self._close_registration = None
        self._cn_meeting = None
        self._contact_email = None
        self._contact_name = None
        self._custom_keys = None
        self._email_notification = None
        self._encryption_type = None
        self._enforce_login = None
        self._enforce_login_domains = None
        self._focus_mode = None
        self._global_dial_in_countries = None
        self._global_dial_in_numbers = None
        self._host_video = None
        self._in_meeting = None
        self._jbh_time = None
        self._join_before_host = None
        self._language_interpretation = None
        self._sign_language_interpretation = None
        self._meeting_authentication = None
        self._mute_upon_entry = None
        self._participant_video = None
        self._private_meeting = None
        self._registrants_confirmation_email = None
        self._registrants_email_notification = None
        self._registration_type = None
        self._show_share_button = None
        self._use_pmi = None
        self._waiting_room = None
        self._watermark = None
        self._host_save_video_order = None
        self._internal_meeting = None
        self._continuous_meeting_chat = None
        self._participant_focused_meeting = None
        self._push_change_to_calendar = None
        self._resources = None
        self.discriminator = None
        if allow_multiple_devices is not None:
            self.allow_multiple_devices = allow_multiple_devices
        if alternative_hosts is not None:
            self.alternative_hosts = alternative_hosts
        if alternative_hosts_email_notification is not None:
            self.alternative_hosts_email_notification = alternative_hosts_email_notification
        if alternative_host_update_polls is not None:
            self.alternative_host_update_polls = alternative_host_update_polls
        if approval_type is not None:
            self.approval_type = approval_type
        if approved_or_denied_countries_or_regions is not None:
            self.approved_or_denied_countries_or_regions = approved_or_denied_countries_or_regions
        if audio is not None:
            self.audio = audio
        if audio_conference_info is not None:
            self.audio_conference_info = audio_conference_info
        if authentication_domains is not None:
            self.authentication_domains = authentication_domains
        if authentication_exception is not None:
            self.authentication_exception = authentication_exception
        if authentication_name is not None:
            self.authentication_name = authentication_name
        if authentication_option is not None:
            self.authentication_option = authentication_option
        if auto_recording is not None:
            self.auto_recording = auto_recording
        if breakout_room is not None:
            self.breakout_room = breakout_room
        if calendar_type is not None:
            self.calendar_type = calendar_type
        if close_registration is not None:
            self.close_registration = close_registration
        if cn_meeting is not None:
            self.cn_meeting = cn_meeting
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_name is not None:
            self.contact_name = contact_name
        if custom_keys is not None:
            self.custom_keys = custom_keys
        if email_notification is not None:
            self.email_notification = email_notification
        if encryption_type is not None:
            self.encryption_type = encryption_type
        if enforce_login is not None:
            self.enforce_login = enforce_login
        if enforce_login_domains is not None:
            self.enforce_login_domains = enforce_login_domains
        if focus_mode is not None:
            self.focus_mode = focus_mode
        if global_dial_in_countries is not None:
            self.global_dial_in_countries = global_dial_in_countries
        if global_dial_in_numbers is not None:
            self.global_dial_in_numbers = global_dial_in_numbers
        if host_video is not None:
            self.host_video = host_video
        if in_meeting is not None:
            self.in_meeting = in_meeting
        if jbh_time is not None:
            self.jbh_time = jbh_time
        if join_before_host is not None:
            self.join_before_host = join_before_host
        if language_interpretation is not None:
            self.language_interpretation = language_interpretation
        if sign_language_interpretation is not None:
            self.sign_language_interpretation = sign_language_interpretation
        if meeting_authentication is not None:
            self.meeting_authentication = meeting_authentication
        if mute_upon_entry is not None:
            self.mute_upon_entry = mute_upon_entry
        if participant_video is not None:
            self.participant_video = participant_video
        if private_meeting is not None:
            self.private_meeting = private_meeting
        if registrants_confirmation_email is not None:
            self.registrants_confirmation_email = registrants_confirmation_email
        if registrants_email_notification is not None:
            self.registrants_email_notification = registrants_email_notification
        if registration_type is not None:
            self.registration_type = registration_type
        if show_share_button is not None:
            self.show_share_button = show_share_button
        if use_pmi is not None:
            self.use_pmi = use_pmi
        if waiting_room is not None:
            self.waiting_room = waiting_room
        if watermark is not None:
            self.watermark = watermark
        if host_save_video_order is not None:
            self.host_save_video_order = host_save_video_order
        if internal_meeting is not None:
            self.internal_meeting = internal_meeting
        if continuous_meeting_chat is not None:
            self.continuous_meeting_chat = continuous_meeting_chat
        if participant_focused_meeting is not None:
            self.participant_focused_meeting = participant_focused_meeting
        if push_change_to_calendar is not None:
            self.push_change_to_calendar = push_change_to_calendar
        if resources is not None:
            self.resources = resources

    @property
    def allow_multiple_devices(self):
        """Gets the allow_multiple_devices of this InlineResponse20045Settings.  # noqa: E501

        Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).  # noqa: E501

        :return: The allow_multiple_devices of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_devices

    @allow_multiple_devices.setter
    def allow_multiple_devices(self, allow_multiple_devices):
        """Sets the allow_multiple_devices of this InlineResponse20045Settings.

        Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).  # noqa: E501

        :param allow_multiple_devices: The allow_multiple_devices of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_devices = allow_multiple_devices

    @property
    def alternative_hosts(self):
        """Gets the alternative_hosts of this InlineResponse20045Settings.  # noqa: E501

        A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.  # noqa: E501

        :return: The alternative_hosts of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._alternative_hosts

    @alternative_hosts.setter
    def alternative_hosts(self, alternative_hosts):
        """Sets the alternative_hosts of this InlineResponse20045Settings.

        A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.  # noqa: E501

        :param alternative_hosts: The alternative_hosts of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._alternative_hosts = alternative_hosts

    @property
    def alternative_hosts_email_notification(self):
        """Gets the alternative_hosts_email_notification of this InlineResponse20045Settings.  # noqa: E501

        Flag to determine whether to send email notifications to alternative hosts, default value is true.  # noqa: E501

        :return: The alternative_hosts_email_notification of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alternative_hosts_email_notification

    @alternative_hosts_email_notification.setter
    def alternative_hosts_email_notification(self, alternative_hosts_email_notification):
        """Sets the alternative_hosts_email_notification of this InlineResponse20045Settings.

        Flag to determine whether to send email notifications to alternative hosts, default value is true.  # noqa: E501

        :param alternative_hosts_email_notification: The alternative_hosts_email_notification of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._alternative_hosts_email_notification = alternative_hosts_email_notification

    @property
    def alternative_host_update_polls(self):
        """Gets the alternative_host_update_polls of this InlineResponse20045Settings.  # noqa: E501

        Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.  # noqa: E501

        :return: The alternative_host_update_polls of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alternative_host_update_polls

    @alternative_host_update_polls.setter
    def alternative_host_update_polls(self, alternative_host_update_polls):
        """Sets the alternative_host_update_polls of this InlineResponse20045Settings.

        Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.  # noqa: E501

        :param alternative_host_update_polls: The alternative_host_update_polls of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._alternative_host_update_polls = alternative_host_update_polls

    @property
    def approval_type(self):
        """Gets the approval_type of this InlineResponse20045Settings.  # noqa: E501

        Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**           `0` - Automatically approve.    `1` - Manually approve.    `2` - No registration required.  # noqa: E501

        :return: The approval_type of this InlineResponse20045Settings.  # noqa: E501
        :rtype: int
        """
        return self._approval_type

    @approval_type.setter
    def approval_type(self, approval_type):
        """Sets the approval_type of this InlineResponse20045Settings.

        Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**           `0` - Automatically approve.    `1` - Manually approve.    `2` - No registration required.  # noqa: E501

        :param approval_type: The approval_type of this InlineResponse20045Settings.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if approval_type not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_type` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_type, allowed_values)
            )

        self._approval_type = approval_type

    @property
    def approved_or_denied_countries_or_regions(self):
        """Gets the approved_or_denied_countries_or_regions of this InlineResponse20045Settings.  # noqa: E501


        :return: The approved_or_denied_countries_or_regions of this InlineResponse20045Settings.  # noqa: E501
        :rtype: InlineResponse20045SettingsApprovedOrDeniedCountriesOrRegions
        """
        return self._approved_or_denied_countries_or_regions

    @approved_or_denied_countries_or_regions.setter
    def approved_or_denied_countries_or_regions(self, approved_or_denied_countries_or_regions):
        """Sets the approved_or_denied_countries_or_regions of this InlineResponse20045Settings.


        :param approved_or_denied_countries_or_regions: The approved_or_denied_countries_or_regions of this InlineResponse20045Settings.  # noqa: E501
        :type: InlineResponse20045SettingsApprovedOrDeniedCountriesOrRegions
        """

        self._approved_or_denied_countries_or_regions = approved_or_denied_countries_or_regions

    @property
    def audio(self):
        """Gets the audio of this InlineResponse20045Settings.  # noqa: E501

        Determine how participants can join the audio portion of the meeting.    `both` - Both Telephony and VoIP.    `telephony` - Telephony only.    `voip` - VoIP only.    `thirdParty` - Third party audio conference.  # noqa: E501

        :return: The audio of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this InlineResponse20045Settings.

        Determine how participants can join the audio portion of the meeting.    `both` - Both Telephony and VoIP.    `telephony` - Telephony only.    `voip` - VoIP only.    `thirdParty` - Third party audio conference.  # noqa: E501

        :param audio: The audio of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["both", "telephony", "voip", "thirdParty"]  # noqa: E501
        if audio not in allowed_values:
            raise ValueError(
                "Invalid value for `audio` ({0}), must be one of {1}"  # noqa: E501
                .format(audio, allowed_values)
            )

        self._audio = audio

    @property
    def audio_conference_info(self):
        """Gets the audio_conference_info of this InlineResponse20045Settings.  # noqa: E501

        Third party audio conference info.  # noqa: E501

        :return: The audio_conference_info of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._audio_conference_info

    @audio_conference_info.setter
    def audio_conference_info(self, audio_conference_info):
        """Sets the audio_conference_info of this InlineResponse20045Settings.

        Third party audio conference info.  # noqa: E501

        :param audio_conference_info: The audio_conference_info of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._audio_conference_info = audio_conference_info

    @property
    def authentication_domains(self):
        """Gets the authentication_domains of this InlineResponse20045Settings.  # noqa: E501

        If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.  # noqa: E501

        :return: The authentication_domains of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_domains

    @authentication_domains.setter
    def authentication_domains(self, authentication_domains):
        """Sets the authentication_domains of this InlineResponse20045Settings.

        If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.  # noqa: E501

        :param authentication_domains: The authentication_domains of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._authentication_domains = authentication_domains

    @property
    def authentication_exception(self):
        """Gets the authentication_exception of this InlineResponse20045Settings.  # noqa: E501

        The participants added here will receive unique meeting invite links and bypass authentication.  # noqa: E501

        :return: The authentication_exception of this InlineResponse20045Settings.  # noqa: E501
        :rtype: list[InlineResponse20045SettingsAuthenticationException]
        """
        return self._authentication_exception

    @authentication_exception.setter
    def authentication_exception(self, authentication_exception):
        """Sets the authentication_exception of this InlineResponse20045Settings.

        The participants added here will receive unique meeting invite links and bypass authentication.  # noqa: E501

        :param authentication_exception: The authentication_exception of this InlineResponse20045Settings.  # noqa: E501
        :type: list[InlineResponse20045SettingsAuthenticationException]
        """

        self._authentication_exception = authentication_exception

    @property
    def authentication_name(self):
        """Gets the authentication_name of this InlineResponse20045Settings.  # noqa: E501

        Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).  # noqa: E501

        :return: The authentication_name of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_name

    @authentication_name.setter
    def authentication_name(self, authentication_name):
        """Sets the authentication_name of this InlineResponse20045Settings.

        Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).  # noqa: E501

        :param authentication_name: The authentication_name of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._authentication_name = authentication_name

    @property
    def authentication_option(self):
        """Gets the authentication_option of this InlineResponse20045Settings.  # noqa: E501

        Meeting authentication option id.  # noqa: E501

        :return: The authentication_option of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_option

    @authentication_option.setter
    def authentication_option(self, authentication_option):
        """Sets the authentication_option of this InlineResponse20045Settings.

        Meeting authentication option id.  # noqa: E501

        :param authentication_option: The authentication_option of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._authentication_option = authentication_option

    @property
    def auto_recording(self):
        """Gets the auto_recording of this InlineResponse20045Settings.  # noqa: E501

        Automatic recording:    `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :return: The auto_recording of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._auto_recording

    @auto_recording.setter
    def auto_recording(self, auto_recording):
        """Sets the auto_recording of this InlineResponse20045Settings.

        Automatic recording:    `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :param auto_recording: The auto_recording of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "cloud", "none"]  # noqa: E501
        if auto_recording not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_recording` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_recording, allowed_values)
            )

        self._auto_recording = auto_recording

    @property
    def breakout_room(self):
        """Gets the breakout_room of this InlineResponse20045Settings.  # noqa: E501


        :return: The breakout_room of this InlineResponse20045Settings.  # noqa: E501
        :rtype: InlineResponse20045SettingsBreakoutRoom
        """
        return self._breakout_room

    @breakout_room.setter
    def breakout_room(self, breakout_room):
        """Sets the breakout_room of this InlineResponse20045Settings.


        :param breakout_room: The breakout_room of this InlineResponse20045Settings.  # noqa: E501
        :type: InlineResponse20045SettingsBreakoutRoom
        """

        self._breakout_room = breakout_room

    @property
    def calendar_type(self):
        """Gets the calendar_type of this InlineResponse20045Settings.  # noqa: E501

        Indicates the type of calendar integration used to schedule the meeting.  * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the `private_meeting` field to determine whether to share details of meetings or not.  # noqa: E501

        :return: The calendar_type of this InlineResponse20045Settings.  # noqa: E501
        :rtype: int
        """
        return self._calendar_type

    @calendar_type.setter
    def calendar_type(self, calendar_type):
        """Sets the calendar_type of this InlineResponse20045Settings.

        Indicates the type of calendar integration used to schedule the meeting.  * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the `private_meeting` field to determine whether to share details of meetings or not.  # noqa: E501

        :param calendar_type: The calendar_type of this InlineResponse20045Settings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if calendar_type not in allowed_values:
            raise ValueError(
                "Invalid value for `calendar_type` ({0}), must be one of {1}"  # noqa: E501
                .format(calendar_type, allowed_values)
            )

        self._calendar_type = calendar_type

    @property
    def close_registration(self):
        """Gets the close_registration of this InlineResponse20045Settings.  # noqa: E501

        Close registration after event date  # noqa: E501

        :return: The close_registration of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._close_registration

    @close_registration.setter
    def close_registration(self, close_registration):
        """Sets the close_registration of this InlineResponse20045Settings.

        Close registration after event date  # noqa: E501

        :param close_registration: The close_registration of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._close_registration = close_registration

    @property
    def cn_meeting(self):
        """Gets the cn_meeting of this InlineResponse20045Settings.  # noqa: E501

        Host meeting in China.  # noqa: E501

        :return: The cn_meeting of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._cn_meeting

    @cn_meeting.setter
    def cn_meeting(self, cn_meeting):
        """Sets the cn_meeting of this InlineResponse20045Settings.

        Host meeting in China.  # noqa: E501

        :param cn_meeting: The cn_meeting of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._cn_meeting = cn_meeting

    @property
    def contact_email(self):
        """Gets the contact_email of this InlineResponse20045Settings.  # noqa: E501

        Contact email for registration  # noqa: E501

        :return: The contact_email of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this InlineResponse20045Settings.

        Contact email for registration  # noqa: E501

        :param contact_email: The contact_email of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this InlineResponse20045Settings.  # noqa: E501

        Contact name for registration  # noqa: E501

        :return: The contact_name of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this InlineResponse20045Settings.

        Contact name for registration  # noqa: E501

        :param contact_name: The contact_name of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def custom_keys(self):
        """Gets the custom_keys of this InlineResponse20045Settings.  # noqa: E501

        Custom keys and values assigned to the meeting.  # noqa: E501

        :return: The custom_keys of this InlineResponse20045Settings.  # noqa: E501
        :rtype: list[MeetingsmeetingIdSettingsCustomKeys]
        """
        return self._custom_keys

    @custom_keys.setter
    def custom_keys(self, custom_keys):
        """Sets the custom_keys of this InlineResponse20045Settings.

        Custom keys and values assigned to the meeting.  # noqa: E501

        :param custom_keys: The custom_keys of this InlineResponse20045Settings.  # noqa: E501
        :type: list[MeetingsmeetingIdSettingsCustomKeys]
        """

        self._custom_keys = custom_keys

    @property
    def email_notification(self):
        """Gets the email_notification of this InlineResponse20045Settings.  # noqa: E501

        Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.  # noqa: E501

        :return: The email_notification of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._email_notification

    @email_notification.setter
    def email_notification(self, email_notification):
        """Sets the email_notification of this InlineResponse20045Settings.

        Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.  # noqa: E501

        :param email_notification: The email_notification of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._email_notification = email_notification

    @property
    def encryption_type(self):
        """Gets the encryption_type of this InlineResponse20045Settings.  # noqa: E501

        Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**.    `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.       `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions features.  # noqa: E501

        :return: The encryption_type of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this InlineResponse20045Settings.

        Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**.    `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.       `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions features.  # noqa: E501

        :param encryption_type: The encryption_type of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["enhanced_encryption", "e2ee"]  # noqa: E501
        if encryption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_type` ({0}), must be one of {1}"  # noqa: E501
                .format(encryption_type, allowed_values)
            )

        self._encryption_type = encryption_type

    @property
    def enforce_login(self):
        """Gets the enforce_login of this InlineResponse20045Settings.  # noqa: E501

        Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.  # noqa: E501

        :return: The enforce_login of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_login

    @enforce_login.setter
    def enforce_login(self, enforce_login):
        """Sets the enforce_login of this InlineResponse20045Settings.

        Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.  # noqa: E501

        :param enforce_login: The enforce_login of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._enforce_login = enforce_login

    @property
    def enforce_login_domains(self):
        """Gets the enforce_login_domains of this InlineResponse20045Settings.  # noqa: E501

        Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.  # noqa: E501

        :return: The enforce_login_domains of this InlineResponse20045Settings.  # noqa: E501
        :rtype: str
        """
        return self._enforce_login_domains

    @enforce_login_domains.setter
    def enforce_login_domains(self, enforce_login_domains):
        """Sets the enforce_login_domains of this InlineResponse20045Settings.

        Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.  # noqa: E501

        :param enforce_login_domains: The enforce_login_domains of this InlineResponse20045Settings.  # noqa: E501
        :type: str
        """

        self._enforce_login_domains = enforce_login_domains

    @property
    def focus_mode(self):
        """Gets the focus_mode of this InlineResponse20045Settings.  # noqa: E501

        Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.  # noqa: E501

        :return: The focus_mode of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._focus_mode

    @focus_mode.setter
    def focus_mode(self, focus_mode):
        """Sets the focus_mode of this InlineResponse20045Settings.

        Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.  # noqa: E501

        :param focus_mode: The focus_mode of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._focus_mode = focus_mode

    @property
    def global_dial_in_countries(self):
        """Gets the global_dial_in_countries of this InlineResponse20045Settings.  # noqa: E501

        List of global dial-in countries  # noqa: E501

        :return: The global_dial_in_countries of this InlineResponse20045Settings.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_dial_in_countries

    @global_dial_in_countries.setter
    def global_dial_in_countries(self, global_dial_in_countries):
        """Sets the global_dial_in_countries of this InlineResponse20045Settings.

        List of global dial-in countries  # noqa: E501

        :param global_dial_in_countries: The global_dial_in_countries of this InlineResponse20045Settings.  # noqa: E501
        :type: list[str]
        """

        self._global_dial_in_countries = global_dial_in_countries

    @property
    def global_dial_in_numbers(self):
        """Gets the global_dial_in_numbers of this InlineResponse20045Settings.  # noqa: E501

        Global Dial-in Countries/Regions  # noqa: E501

        :return: The global_dial_in_numbers of this InlineResponse20045Settings.  # noqa: E501
        :rtype: list[InlineResponse20045SettingsGlobalDialInNumbers]
        """
        return self._global_dial_in_numbers

    @global_dial_in_numbers.setter
    def global_dial_in_numbers(self, global_dial_in_numbers):
        """Sets the global_dial_in_numbers of this InlineResponse20045Settings.

        Global Dial-in Countries/Regions  # noqa: E501

        :param global_dial_in_numbers: The global_dial_in_numbers of this InlineResponse20045Settings.  # noqa: E501
        :type: list[InlineResponse20045SettingsGlobalDialInNumbers]
        """

        self._global_dial_in_numbers = global_dial_in_numbers

    @property
    def host_video(self):
        """Gets the host_video of this InlineResponse20045Settings.  # noqa: E501

        Start video when the host joins the meeting.  # noqa: E501

        :return: The host_video of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._host_video

    @host_video.setter
    def host_video(self, host_video):
        """Sets the host_video of this InlineResponse20045Settings.

        Start video when the host joins the meeting.  # noqa: E501

        :param host_video: The host_video of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._host_video = host_video

    @property
    def in_meeting(self):
        """Gets the in_meeting of this InlineResponse20045Settings.  # noqa: E501

        Host meeting in India.  # noqa: E501

        :return: The in_meeting of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._in_meeting

    @in_meeting.setter
    def in_meeting(self, in_meeting):
        """Sets the in_meeting of this InlineResponse20045Settings.

        Host meeting in India.  # noqa: E501

        :param in_meeting: The in_meeting of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._in_meeting = in_meeting

    @property
    def jbh_time(self):
        """Gets the jbh_time of this InlineResponse20045Settings.  # noqa: E501

        If the value of `join_before_host` field is set to true, this field can be used to indicate time limits when a participant may join a meeting before a host.  *  `0` - Allow participant to join anytime. *  `5` - Allow participant to join 5 minutes before meeting start time.  * `10` - Allow participant to join 10 minutes before meeting start time.  # noqa: E501

        :return: The jbh_time of this InlineResponse20045Settings.  # noqa: E501
        :rtype: int
        """
        return self._jbh_time

    @jbh_time.setter
    def jbh_time(self, jbh_time):
        """Sets the jbh_time of this InlineResponse20045Settings.

        If the value of `join_before_host` field is set to true, this field can be used to indicate time limits when a participant may join a meeting before a host.  *  `0` - Allow participant to join anytime. *  `5` - Allow participant to join 5 minutes before meeting start time.  * `10` - Allow participant to join 10 minutes before meeting start time.  # noqa: E501

        :param jbh_time: The jbh_time of this InlineResponse20045Settings.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 5, 10]  # noqa: E501
        if jbh_time not in allowed_values:
            raise ValueError(
                "Invalid value for `jbh_time` ({0}), must be one of {1}"  # noqa: E501
                .format(jbh_time, allowed_values)
            )

        self._jbh_time = jbh_time

    @property
    def join_before_host(self):
        """Gets the join_before_host of this InlineResponse20045Settings.  # noqa: E501

        Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.  # noqa: E501

        :return: The join_before_host of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._join_before_host

    @join_before_host.setter
    def join_before_host(self, join_before_host):
        """Sets the join_before_host of this InlineResponse20045Settings.

        Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.  # noqa: E501

        :param join_before_host: The join_before_host of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._join_before_host = join_before_host

    @property
    def language_interpretation(self):
        """Gets the language_interpretation of this InlineResponse20045Settings.  # noqa: E501


        :return: The language_interpretation of this InlineResponse20045Settings.  # noqa: E501
        :rtype: MeetingsmeetingIdSettingsLanguageInterpretation
        """
        return self._language_interpretation

    @language_interpretation.setter
    def language_interpretation(self, language_interpretation):
        """Sets the language_interpretation of this InlineResponse20045Settings.


        :param language_interpretation: The language_interpretation of this InlineResponse20045Settings.  # noqa: E501
        :type: MeetingsmeetingIdSettingsLanguageInterpretation
        """

        self._language_interpretation = language_interpretation

    @property
    def sign_language_interpretation(self):
        """Gets the sign_language_interpretation of this InlineResponse20045Settings.  # noqa: E501


        :return: The sign_language_interpretation of this InlineResponse20045Settings.  # noqa: E501
        :rtype: MeetingsmeetingIdSettingsSignLanguageInterpretation
        """
        return self._sign_language_interpretation

    @sign_language_interpretation.setter
    def sign_language_interpretation(self, sign_language_interpretation):
        """Sets the sign_language_interpretation of this InlineResponse20045Settings.


        :param sign_language_interpretation: The sign_language_interpretation of this InlineResponse20045Settings.  # noqa: E501
        :type: MeetingsmeetingIdSettingsSignLanguageInterpretation
        """

        self._sign_language_interpretation = sign_language_interpretation

    @property
    def meeting_authentication(self):
        """Gets the meeting_authentication of this InlineResponse20045Settings.  # noqa: E501

        `true`- Only authenticated users can join meetings.  # noqa: E501

        :return: The meeting_authentication of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_authentication

    @meeting_authentication.setter
    def meeting_authentication(self, meeting_authentication):
        """Sets the meeting_authentication of this InlineResponse20045Settings.

        `true`- Only authenticated users can join meetings.  # noqa: E501

        :param meeting_authentication: The meeting_authentication of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._meeting_authentication = meeting_authentication

    @property
    def mute_upon_entry(self):
        """Gets the mute_upon_entry of this InlineResponse20045Settings.  # noqa: E501

        Mute participants upon entry.  # noqa: E501

        :return: The mute_upon_entry of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._mute_upon_entry

    @mute_upon_entry.setter
    def mute_upon_entry(self, mute_upon_entry):
        """Sets the mute_upon_entry of this InlineResponse20045Settings.

        Mute participants upon entry.  # noqa: E501

        :param mute_upon_entry: The mute_upon_entry of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._mute_upon_entry = mute_upon_entry

    @property
    def participant_video(self):
        """Gets the participant_video of this InlineResponse20045Settings.  # noqa: E501

        Start video when participants join the meeting.  # noqa: E501

        :return: The participant_video of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._participant_video

    @participant_video.setter
    def participant_video(self, participant_video):
        """Sets the participant_video of this InlineResponse20045Settings.

        Start video when participants join the meeting.  # noqa: E501

        :param participant_video: The participant_video of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._participant_video = participant_video

    @property
    def private_meeting(self):
        """Gets the private_meeting of this InlineResponse20045Settings.  # noqa: E501

        Whether the meeting is set as private.  # noqa: E501

        :return: The private_meeting of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._private_meeting

    @private_meeting.setter
    def private_meeting(self, private_meeting):
        """Sets the private_meeting of this InlineResponse20045Settings.

        Whether the meeting is set as private.  # noqa: E501

        :param private_meeting: The private_meeting of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._private_meeting = private_meeting

    @property
    def registrants_confirmation_email(self):
        """Gets the registrants_confirmation_email of this InlineResponse20045Settings.  # noqa: E501

        Whether to send registrants an email confirmation. * `true` - Send a confirmation email. * `false` - Do not send a confirmation email.  # noqa: E501

        :return: The registrants_confirmation_email of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._registrants_confirmation_email

    @registrants_confirmation_email.setter
    def registrants_confirmation_email(self, registrants_confirmation_email):
        """Sets the registrants_confirmation_email of this InlineResponse20045Settings.

        Whether to send registrants an email confirmation. * `true` - Send a confirmation email. * `false` - Do not send a confirmation email.  # noqa: E501

        :param registrants_confirmation_email: The registrants_confirmation_email of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._registrants_confirmation_email = registrants_confirmation_email

    @property
    def registrants_email_notification(self):
        """Gets the registrants_email_notification of this InlineResponse20045Settings.  # noqa: E501

        Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * `true` - Send an email notification. * `false` - Do not send an email notification.   Set this value to `true` to also use the `registrants_confirmation_email` parameter.  # noqa: E501

        :return: The registrants_email_notification of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._registrants_email_notification

    @registrants_email_notification.setter
    def registrants_email_notification(self, registrants_email_notification):
        """Sets the registrants_email_notification of this InlineResponse20045Settings.

        Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * `true` - Send an email notification. * `false` - Do not send an email notification.   Set this value to `true` to also use the `registrants_confirmation_email` parameter.  # noqa: E501

        :param registrants_email_notification: The registrants_email_notification of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._registrants_email_notification = registrants_email_notification

    @property
    def registration_type(self):
        """Gets the registration_type of this InlineResponse20045Settings.  # noqa: E501

        Registration type. Used for recurring meeting with fixed time only.   `1` Attendees register once and can attend any of the occurrences.    `2` Attendees need to register for each occurrence to attend.    `3` Attendees register once and can choose one or more occurrences to attend.  # noqa: E501

        :return: The registration_type of this InlineResponse20045Settings.  # noqa: E501
        :rtype: int
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this InlineResponse20045Settings.

        Registration type. Used for recurring meeting with fixed time only.   `1` Attendees register once and can attend any of the occurrences.    `2` Attendees need to register for each occurrence to attend.    `3` Attendees register once and can choose one or more occurrences to attend.  # noqa: E501

        :param registration_type: The registration_type of this InlineResponse20045Settings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def show_share_button(self):
        """Gets the show_share_button of this InlineResponse20045Settings.  # noqa: E501

        Show social share buttons on the meeting registration page. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).  # noqa: E501

        :return: The show_share_button of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._show_share_button

    @show_share_button.setter
    def show_share_button(self, show_share_button):
        """Sets the show_share_button of this InlineResponse20045Settings.

        Show social share buttons on the meeting registration page. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).  # noqa: E501

        :param show_share_button: The show_share_button of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._show_share_button = show_share_button

    @property
    def use_pmi(self):
        """Gets the use_pmi of this InlineResponse20045Settings.  # noqa: E501

        Use a [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.  # noqa: E501

        :return: The use_pmi of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi

    @use_pmi.setter
    def use_pmi(self, use_pmi):
        """Sets the use_pmi of this InlineResponse20045Settings.

        Use a [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.  # noqa: E501

        :param use_pmi: The use_pmi of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._use_pmi = use_pmi

    @property
    def waiting_room(self):
        """Gets the waiting_room of this InlineResponse20045Settings.  # noqa: E501

        Enable waiting room  # noqa: E501

        :return: The waiting_room of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this InlineResponse20045Settings.

        Enable waiting room  # noqa: E501

        :param waiting_room: The waiting_room of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._waiting_room = waiting_room

    @property
    def watermark(self):
        """Gets the watermark of this InlineResponse20045Settings.  # noqa: E501

        Add watermark when viewing a shared screen.  # noqa: E501

        :return: The watermark of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this InlineResponse20045Settings.

        Add watermark when viewing a shared screen.  # noqa: E501

        :param watermark: The watermark of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._watermark = watermark

    @property
    def host_save_video_order(self):
        """Gets the host_save_video_order of this InlineResponse20045Settings.  # noqa: E501

        Whether the **Allow host to save video order** feature is enabled.  # noqa: E501

        :return: The host_save_video_order of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._host_save_video_order

    @host_save_video_order.setter
    def host_save_video_order(self, host_save_video_order):
        """Sets the host_save_video_order of this InlineResponse20045Settings.

        Whether the **Allow host to save video order** feature is enabled.  # noqa: E501

        :param host_save_video_order: The host_save_video_order of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._host_save_video_order = host_save_video_order

    @property
    def internal_meeting(self):
        """Gets the internal_meeting of this InlineResponse20045Settings.  # noqa: E501

        Whether to set the meeting as an internal meeting.  # noqa: E501

        :return: The internal_meeting of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._internal_meeting

    @internal_meeting.setter
    def internal_meeting(self, internal_meeting):
        """Sets the internal_meeting of this InlineResponse20045Settings.

        Whether to set the meeting as an internal meeting.  # noqa: E501

        :param internal_meeting: The internal_meeting of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._internal_meeting = internal_meeting

    @property
    def continuous_meeting_chat(self):
        """Gets the continuous_meeting_chat of this InlineResponse20045Settings.  # noqa: E501


        :return: The continuous_meeting_chat of this InlineResponse20045Settings.  # noqa: E501
        :rtype: MeetingsmeetingIdSettingsContinuousMeetingChat
        """
        return self._continuous_meeting_chat

    @continuous_meeting_chat.setter
    def continuous_meeting_chat(self, continuous_meeting_chat):
        """Sets the continuous_meeting_chat of this InlineResponse20045Settings.


        :param continuous_meeting_chat: The continuous_meeting_chat of this InlineResponse20045Settings.  # noqa: E501
        :type: MeetingsmeetingIdSettingsContinuousMeetingChat
        """

        self._continuous_meeting_chat = continuous_meeting_chat

    @property
    def participant_focused_meeting(self):
        """Gets the participant_focused_meeting of this InlineResponse20045Settings.  # noqa: E501

        Whether to set the meeting as a participant focused meeting.  # noqa: E501

        :return: The participant_focused_meeting of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._participant_focused_meeting

    @participant_focused_meeting.setter
    def participant_focused_meeting(self, participant_focused_meeting):
        """Sets the participant_focused_meeting of this InlineResponse20045Settings.

        Whether to set the meeting as a participant focused meeting.  # noqa: E501

        :param participant_focused_meeting: The participant_focused_meeting of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._participant_focused_meeting = participant_focused_meeting

    @property
    def push_change_to_calendar(self):
        """Gets the push_change_to_calendar of this InlineResponse20045Settings.  # noqa: E501

        Whether to push meeting changes to the calendar.    To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal. * `true` - Push meeting changes to the calendar. * `false` - Do not push meeting changes to the calendar.  # noqa: E501

        :return: The push_change_to_calendar of this InlineResponse20045Settings.  # noqa: E501
        :rtype: bool
        """
        return self._push_change_to_calendar

    @push_change_to_calendar.setter
    def push_change_to_calendar(self, push_change_to_calendar):
        """Sets the push_change_to_calendar of this InlineResponse20045Settings.

        Whether to push meeting changes to the calendar.    To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal. * `true` - Push meeting changes to the calendar. * `false` - Do not push meeting changes to the calendar.  # noqa: E501

        :param push_change_to_calendar: The push_change_to_calendar of this InlineResponse20045Settings.  # noqa: E501
        :type: bool
        """

        self._push_change_to_calendar = push_change_to_calendar

    @property
    def resources(self):
        """Gets the resources of this InlineResponse20045Settings.  # noqa: E501

        The meeting's resources.  # noqa: E501

        :return: The resources of this InlineResponse20045Settings.  # noqa: E501
        :rtype: list[MeetingsmeetingIdSettingsResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this InlineResponse20045Settings.

        The meeting's resources.  # noqa: E501

        :param resources: The resources of this InlineResponse20045Settings.  # noqa: E501
        :type: list[MeetingsmeetingIdSettingsResources]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20045Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20045Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
