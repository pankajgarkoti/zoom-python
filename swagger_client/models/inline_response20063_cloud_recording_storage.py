# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20063CloudRecordingStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'free_usage': 'str',
        'plan_usage': 'str',
        'usage': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'free_usage': 'free_usage',
        'plan_usage': 'plan_usage',
        'usage': 'usage'
    }

    def __init__(self, _date=None, free_usage=None, plan_usage=None, usage=None):  # noqa: E501
        """InlineResponse20063CloudRecordingStorage - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._free_usage = None
        self._plan_usage = None
        self._usage = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if free_usage is not None:
            self.free_usage = free_usage
        if plan_usage is not None:
            self.plan_usage = plan_usage
        if usage is not None:
            self.usage = usage

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20063CloudRecordingStorage.  # noqa: E501

        Date of the usage  # noqa: E501

        :return: The _date of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20063CloudRecordingStorage.

        Date of the usage  # noqa: E501

        :param _date: The _date of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def free_usage(self):
        """Gets the free_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501

        Free storage  # noqa: E501

        :return: The free_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :rtype: str
        """
        return self._free_usage

    @free_usage.setter
    def free_usage(self, free_usage):
        """Sets the free_usage of this InlineResponse20063CloudRecordingStorage.

        Free storage  # noqa: E501

        :param free_usage: The free_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :type: str
        """

        self._free_usage = free_usage

    @property
    def plan_usage(self):
        """Gets the plan_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501

        Paid storage  # noqa: E501

        :return: The plan_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :rtype: str
        """
        return self._plan_usage

    @plan_usage.setter
    def plan_usage(self, plan_usage):
        """Sets the plan_usage of this InlineResponse20063CloudRecordingStorage.

        Paid storage  # noqa: E501

        :param plan_usage: The plan_usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :type: str
        """

        self._plan_usage = plan_usage

    @property
    def usage(self):
        """Gets the usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501

        Storage used on the date  # noqa: E501

        :return: The usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this InlineResponse20063CloudRecordingStorage.

        Storage used on the date  # noqa: E501

        :param usage: The usage of this InlineResponse20063CloudRecordingStorage.  # noqa: E501
        :type: str
        """

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20063CloudRecordingStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20063CloudRecordingStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
