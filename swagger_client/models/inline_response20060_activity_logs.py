# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20060ActivityLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_type': 'str',
        'email': 'str',
        'ip_address': 'str',
        'time': 'datetime',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'client_type': 'client_type',
        'email': 'email',
        'ip_address': 'ip_address',
        'time': 'time',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, client_type=None, email=None, ip_address=None, time=None, type=None, version=None):  # noqa: E501
        """InlineResponse20060ActivityLogs - a model defined in Swagger"""  # noqa: E501
        self._client_type = None
        self._email = None
        self._ip_address = None
        self._time = None
        self._type = None
        self._version = None
        self.discriminator = None
        if client_type is not None:
            self.client_type = client_type
        if email is not None:
            self.email = email
        if ip_address is not None:
            self.ip_address = ip_address
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def client_type(self):
        """Gets the client_type of this InlineResponse20060ActivityLogs.  # noqa: E501

        The client interface type using which the activity was performed.  # noqa: E501

        :return: The client_type of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this InlineResponse20060ActivityLogs.

        The client interface type using which the activity was performed.  # noqa: E501

        :param client_type: The client_type of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: str
        """

        self._client_type = client_type

    @property
    def email(self):
        """Gets the email of this InlineResponse20060ActivityLogs.  # noqa: E501

        Email address of the user used for the activity.  # noqa: E501

        :return: The email of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20060ActivityLogs.

        Email address of the user used for the activity.  # noqa: E501

        :param email: The email of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def ip_address(self):
        """Gets the ip_address of this InlineResponse20060ActivityLogs.  # noqa: E501

        The IP address of the user's device.  # noqa: E501

        :return: The ip_address of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InlineResponse20060ActivityLogs.

        The IP address of the user's device.  # noqa: E501

        :param ip_address: The ip_address of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def time(self):
        """Gets the time of this InlineResponse20060ActivityLogs.  # noqa: E501

        Time during which the activity occurred.  # noqa: E501

        :return: The time of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse20060ActivityLogs.

        Time during which the activity occurred.  # noqa: E501

        :param time: The time of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this InlineResponse20060ActivityLogs.  # noqa: E501

        The type of activity.  * `Sign in` &mdash; Sign in activity by user.  * `Sign out` &mdash; Sign out activity by user.  # noqa: E501

        :return: The type of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20060ActivityLogs.

        The type of activity.  * `Sign in` &mdash; Sign in activity by user.  * `Sign out` &mdash; Sign out activity by user.  # noqa: E501

        :param type: The type of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sign in", "Sign out"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this InlineResponse20060ActivityLogs.  # noqa: E501

        Zoom client version of the user.  # noqa: E501

        :return: The version of this InlineResponse20060ActivityLogs.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse20060ActivityLogs.

        Zoom client version of the user.  # noqa: E501

        :param version: The version of this InlineResponse20060ActivityLogs.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20060ActivityLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20060ActivityLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
