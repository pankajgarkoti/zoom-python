# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20076QuestionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'answer': 'str',
        'date_time': 'str',
        'polling_id': 'str',
        'question': 'str'
    }

    attribute_map = {
        'answer': 'answer',
        'date_time': 'date_time',
        'polling_id': 'polling_id',
        'question': 'question'
    }

    def __init__(self, answer=None, date_time=None, polling_id=None, question=None):  # noqa: E501
        """InlineResponse20076QuestionDetails - a model defined in Swagger"""  # noqa: E501
        self._answer = None
        self._date_time = None
        self._polling_id = None
        self._question = None
        self.discriminator = None
        if answer is not None:
            self.answer = answer
        if date_time is not None:
            self.date_time = date_time
        if polling_id is not None:
            self.polling_id = polling_id
        if question is not None:
            self.question = question

    @property
    def answer(self):
        """Gets the answer of this InlineResponse20076QuestionDetails.  # noqa: E501

        The user's given answer.  # noqa: E501

        :return: The answer of this InlineResponse20076QuestionDetails.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this InlineResponse20076QuestionDetails.

        The user's given answer.  # noqa: E501

        :param answer: The answer of this InlineResponse20076QuestionDetails.  # noqa: E501
        :type: str
        """

        self._answer = answer

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse20076QuestionDetails.  # noqa: E501

        The date and time at which the user answered the poll question.  # noqa: E501

        :return: The date_time of this InlineResponse20076QuestionDetails.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse20076QuestionDetails.

        The date and time at which the user answered the poll question.  # noqa: E501

        :param date_time: The date_time of this InlineResponse20076QuestionDetails.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def polling_id(self):
        """Gets the polling_id of this InlineResponse20076QuestionDetails.  # noqa: E501

        The poll's ID.  # noqa: E501

        :return: The polling_id of this InlineResponse20076QuestionDetails.  # noqa: E501
        :rtype: str
        """
        return self._polling_id

    @polling_id.setter
    def polling_id(self, polling_id):
        """Sets the polling_id of this InlineResponse20076QuestionDetails.

        The poll's ID.  # noqa: E501

        :param polling_id: The polling_id of this InlineResponse20076QuestionDetails.  # noqa: E501
        :type: str
        """

        self._polling_id = polling_id

    @property
    def question(self):
        """Gets the question of this InlineResponse20076QuestionDetails.  # noqa: E501

        The poll question.  # noqa: E501

        :return: The question of this InlineResponse20076QuestionDetails.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this InlineResponse20076QuestionDetails.

        The poll question.  # noqa: E501

        :param question: The question of this InlineResponse20076QuestionDetails.  # noqa: E501
        :type: str
        """

        self._question = question

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20076QuestionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20076QuestionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
