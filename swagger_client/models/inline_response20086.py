# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20086(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'licensed_users_count': 'int',
        'basic_users_count': 'int',
        'on_prem_users_count': 'int',
        'room_users_count': 'int',
        'pending_users_count': 'int',
        'join_only_users_count': 'int',
        'total_users_count': 'int'
    }

    attribute_map = {
        'licensed_users_count': 'licensed_users_count',
        'basic_users_count': 'basic_users_count',
        'on_prem_users_count': 'on_prem_users_count',
        'room_users_count': 'room_users_count',
        'pending_users_count': 'pending_users_count',
        'join_only_users_count': 'join_only_users_count',
        'total_users_count': 'total_users_count'
    }

    def __init__(self, licensed_users_count=None, basic_users_count=None, on_prem_users_count=None, room_users_count=None, pending_users_count=None, join_only_users_count=None, total_users_count=None):  # noqa: E501
        """InlineResponse20086 - a model defined in Swagger"""  # noqa: E501
        self._licensed_users_count = None
        self._basic_users_count = None
        self._on_prem_users_count = None
        self._room_users_count = None
        self._pending_users_count = None
        self._join_only_users_count = None
        self._total_users_count = None
        self.discriminator = None
        if licensed_users_count is not None:
            self.licensed_users_count = licensed_users_count
        if basic_users_count is not None:
            self.basic_users_count = basic_users_count
        if on_prem_users_count is not None:
            self.on_prem_users_count = on_prem_users_count
        if room_users_count is not None:
            self.room_users_count = room_users_count
        if pending_users_count is not None:
            self.pending_users_count = pending_users_count
        if join_only_users_count is not None:
            self.join_only_users_count = join_only_users_count
        if total_users_count is not None:
            self.total_users_count = total_users_count

    @property
    def licensed_users_count(self):
        """Gets the licensed_users_count of this InlineResponse20086.  # noqa: E501

        The number of licensed users.  # noqa: E501

        :return: The licensed_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._licensed_users_count

    @licensed_users_count.setter
    def licensed_users_count(self, licensed_users_count):
        """Sets the licensed_users_count of this InlineResponse20086.

        The number of licensed users.  # noqa: E501

        :param licensed_users_count: The licensed_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._licensed_users_count = licensed_users_count

    @property
    def basic_users_count(self):
        """Gets the basic_users_count of this InlineResponse20086.  # noqa: E501

        The number of basic users.  # noqa: E501

        :return: The basic_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._basic_users_count

    @basic_users_count.setter
    def basic_users_count(self, basic_users_count):
        """Sets the basic_users_count of this InlineResponse20086.

        The number of basic users.  # noqa: E501

        :param basic_users_count: The basic_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._basic_users_count = basic_users_count

    @property
    def on_prem_users_count(self):
        """Gets the on_prem_users_count of this InlineResponse20086.  # noqa: E501

        The number of on-prem users.  # noqa: E501

        :return: The on_prem_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._on_prem_users_count

    @on_prem_users_count.setter
    def on_prem_users_count(self, on_prem_users_count):
        """Sets the on_prem_users_count of this InlineResponse20086.

        The number of on-prem users.  # noqa: E501

        :param on_prem_users_count: The on_prem_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._on_prem_users_count = on_prem_users_count

    @property
    def room_users_count(self):
        """Gets the room_users_count of this InlineResponse20086.  # noqa: E501

        The number of Zoom rooms.  # noqa: E501

        :return: The room_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._room_users_count

    @room_users_count.setter
    def room_users_count(self, room_users_count):
        """Sets the room_users_count of this InlineResponse20086.

        The number of Zoom rooms.  # noqa: E501

        :param room_users_count: The room_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._room_users_count = room_users_count

    @property
    def pending_users_count(self):
        """Gets the pending_users_count of this InlineResponse20086.  # noqa: E501

        The number of users with a pending activation meeting license.  # noqa: E501

        :return: The pending_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._pending_users_count

    @pending_users_count.setter
    def pending_users_count(self, pending_users_count):
        """Sets the pending_users_count of this InlineResponse20086.

        The number of users with a pending activation meeting license.  # noqa: E501

        :param pending_users_count: The pending_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._pending_users_count = pending_users_count

    @property
    def join_only_users_count(self):
        """Gets the join_only_users_count of this InlineResponse20086.  # noqa: E501

        The number of users without licenses.  # noqa: E501

        :return: The join_only_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._join_only_users_count

    @join_only_users_count.setter
    def join_only_users_count(self, join_only_users_count):
        """Sets the join_only_users_count of this InlineResponse20086.

        The number of users without licenses.  # noqa: E501

        :param join_only_users_count: The join_only_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._join_only_users_count = join_only_users_count

    @property
    def total_users_count(self):
        """Gets the total_users_count of this InlineResponse20086.  # noqa: E501

        The total number of `licensed_users_count`, `basic_users_count`, `on_prem_users_count`, `join_only_users_count` and `room_users_count`.  # noqa: E501

        :return: The total_users_count of this InlineResponse20086.  # noqa: E501
        :rtype: int
        """
        return self._total_users_count

    @total_users_count.setter
    def total_users_count(self, total_users_count):
        """Sets the total_users_count of this InlineResponse20086.

        The total number of `licensed_users_count`, `basic_users_count`, `on_prem_users_count`, `join_only_users_count` and `room_users_count`.  # noqa: E501

        :param total_users_count: The total_users_count of this InlineResponse20086.  # noqa: E501
        :type: int
        """

        self._total_users_count = total_users_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20086, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20086):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
