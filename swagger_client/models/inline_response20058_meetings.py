# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20058Meetings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agenda': 'str',
        'created_at': 'datetime',
        'duration': 'int',
        'host_id': 'str',
        'id': 'int',
        'join_url': 'str',
        'pmi': 'str',
        'start_time': 'datetime',
        'timezone': 'str',
        'topic': 'str',
        'type': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'agenda': 'agenda',
        'created_at': 'created_at',
        'duration': 'duration',
        'host_id': 'host_id',
        'id': 'id',
        'join_url': 'join_url',
        'pmi': 'pmi',
        'start_time': 'start_time',
        'timezone': 'timezone',
        'topic': 'topic',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, agenda=None, created_at=None, duration=None, host_id=None, id=None, join_url=None, pmi=None, start_time=None, timezone=None, topic=None, type=None, uuid=None):  # noqa: E501
        """InlineResponse20058Meetings - a model defined in Swagger"""  # noqa: E501
        self._agenda = None
        self._created_at = None
        self._duration = None
        self._host_id = None
        self._id = None
        self._join_url = None
        self._pmi = None
        self._start_time = None
        self._timezone = None
        self._topic = None
        self._type = None
        self._uuid = None
        self.discriminator = None
        if agenda is not None:
            self.agenda = agenda
        if created_at is not None:
            self.created_at = created_at
        if duration is not None:
            self.duration = duration
        if host_id is not None:
            self.host_id = host_id
        if id is not None:
            self.id = id
        if join_url is not None:
            self.join_url = join_url
        if pmi is not None:
            self.pmi = pmi
        if start_time is not None:
            self.start_time = start_time
        if timezone is not None:
            self.timezone = timezone
        if topic is not None:
            self.topic = topic
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def agenda(self):
        """Gets the agenda of this InlineResponse20058Meetings.  # noqa: E501

        Meeting description. The length of agenda gets truncated to 250 characters when you list all meetings for a user. To view the complete agenda of a meeting, retrieve details for a single meeting, use the [**Get a meeting**](/docs/api-reference/zoom-api/methods#operation/meeting) API.  # noqa: E501

        :return: The agenda of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda):
        """Sets the agenda of this InlineResponse20058Meetings.

        Meeting description. The length of agenda gets truncated to 250 characters when you list all meetings for a user. To view the complete agenda of a meeting, retrieve details for a single meeting, use the [**Get a meeting**](/docs/api-reference/zoom-api/methods#operation/meeting) API.  # noqa: E501

        :param agenda: The agenda of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._agenda = agenda

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20058Meetings.  # noqa: E501

        Time of creation.   # noqa: E501

        :return: The created_at of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20058Meetings.

        Time of creation.   # noqa: E501

        :param created_at: The created_at of this InlineResponse20058Meetings.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20058Meetings.  # noqa: E501

        Meeting duration.  # noqa: E501

        :return: The duration of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20058Meetings.

        Meeting duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20058Meetings.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse20058Meetings.  # noqa: E501

        ID of the user who is set as the host of the meeting.  # noqa: E501

        :return: The host_id of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse20058Meetings.

        ID of the user who is set as the host of the meeting.  # noqa: E501

        :param host_id: The host_id of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20058Meetings.  # noqa: E501

        Meeting ID - also known as the meeting number in long (int64) format.  # noqa: E501

        :return: The id of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20058Meetings.

        Meeting ID - also known as the meeting number in long (int64) format.  # noqa: E501

        :param id: The id of this InlineResponse20058Meetings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def join_url(self):
        """Gets the join_url of this InlineResponse20058Meetings.  # noqa: E501

        URL using which participants can join a meeting.  # noqa: E501

        :return: The join_url of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this InlineResponse20058Meetings.

        URL using which participants can join a meeting.  # noqa: E501

        :param join_url: The join_url of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._join_url = join_url

    @property
    def pmi(self):
        """Gets the pmi of this InlineResponse20058Meetings.  # noqa: E501

        [Personal meeting ID](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). This field is only returned if PMI was used to schedule the meeting.  # noqa: E501

        :return: The pmi of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._pmi

    @pmi.setter
    def pmi(self, pmi):
        """Sets the pmi of this InlineResponse20058Meetings.

        [Personal meeting ID](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). This field is only returned if PMI was used to schedule the meeting.  # noqa: E501

        :param pmi: The pmi of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._pmi = pmi

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20058Meetings.  # noqa: E501

        Meeting start time.  # noqa: E501

        :return: The start_time of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20058Meetings.

        Meeting start time.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20058Meetings.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def timezone(self):
        """Gets the timezone of this InlineResponse20058Meetings.  # noqa: E501

        Timezone to format the meeting start time.   # noqa: E501

        :return: The timezone of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InlineResponse20058Meetings.

        Timezone to format the meeting start time.   # noqa: E501

        :param timezone: The timezone of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def topic(self):
        """Gets the topic of this InlineResponse20058Meetings.  # noqa: E501

        Meeting topic.  # noqa: E501

        :return: The topic of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this InlineResponse20058Meetings.

        Meeting topic.  # noqa: E501

        :param topic: The topic of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def type(self):
        """Gets the type of this InlineResponse20058Meetings.  # noqa: E501

        Meeting Types:    `1` - Instant meeting.    `2` - Scheduled meeting.    `3` - Recurring meeting with no fixed time.    `8` - Recurring meeting with fixed time.  # noqa: E501

        :return: The type of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20058Meetings.

        Meeting Types:    `1` - Instant meeting.    `2` - Scheduled meeting.    `3` - Recurring meeting with no fixed time.    `8` - Recurring meeting with fixed time.  # noqa: E501

        :param type: The type of this InlineResponse20058Meetings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 8]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20058Meetings.  # noqa: E501

        Unique Meeting ID. Each meeting instance will generate its own Meeting UUID.  # noqa: E501

        :return: The uuid of this InlineResponse20058Meetings.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20058Meetings.

        Unique Meeting ID. Each meeting instance will generate its own Meeting UUID.  # noqa: E501

        :param uuid: The uuid of this InlineResponse20058Meetings.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20058Meetings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20058Meetings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
