# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20088(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'dept': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_client_version': 'str',
        'last_login_time': 'datetime',
        'last_name': 'str',
        'pmi': 'int',
        'role_name': 'str',
        'timezone': 'str',
        'type': 'int',
        'use_pmi': 'bool',
        'display_name': 'str',
        'account_id': 'str',
        'account_number': 'int',
        'cms_user_id': 'str',
        'company': 'str',
        'user_created_at': 'datetime',
        'custom_attributes': 'list[InlineResponse20088CustomAttributes]',
        'employee_unique_id': 'str',
        'group_ids': 'list[str]',
        'im_group_ids': 'list[str]',
        'jid': 'str',
        'job_title': 'str',
        'language': 'str',
        'location': 'str',
        'login_types': 'list[int]',
        'manager': 'str',
        'personal_meeting_url': 'str',
        'phone_country': 'str',
        'phone_number': 'str',
        'phone_numbers': 'list[InlineResponse20088PhoneNumbers]',
        'pic_url': 'str',
        'plan_united_type': 'str',
        'pronouns': 'str',
        'pronouns_option': 'int',
        'role_id': 'str',
        'status': 'str',
        'vanity_url': 'str',
        'verified': 'int',
        'cluster': 'str',
        'zoom_one_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'dept': 'dept',
        'email': 'email',
        'first_name': 'first_name',
        'last_client_version': 'last_client_version',
        'last_login_time': 'last_login_time',
        'last_name': 'last_name',
        'pmi': 'pmi',
        'role_name': 'role_name',
        'timezone': 'timezone',
        'type': 'type',
        'use_pmi': 'use_pmi',
        'display_name': 'display_name',
        'account_id': 'account_id',
        'account_number': 'account_number',
        'cms_user_id': 'cms_user_id',
        'company': 'company',
        'user_created_at': 'user_created_at',
        'custom_attributes': 'custom_attributes',
        'employee_unique_id': 'employee_unique_id',
        'group_ids': 'group_ids',
        'im_group_ids': 'im_group_ids',
        'jid': 'jid',
        'job_title': 'job_title',
        'language': 'language',
        'location': 'location',
        'login_types': 'login_types',
        'manager': 'manager',
        'personal_meeting_url': 'personal_meeting_url',
        'phone_country': 'phone_country',
        'phone_number': 'phone_number',
        'phone_numbers': 'phone_numbers',
        'pic_url': 'pic_url',
        'plan_united_type': 'plan_united_type',
        'pronouns': 'pronouns',
        'pronouns_option': 'pronouns_option',
        'role_id': 'role_id',
        'status': 'status',
        'vanity_url': 'vanity_url',
        'verified': 'verified',
        'cluster': 'cluster',
        'zoom_one_type': 'zoom_one_type'
    }

    def __init__(self, id=None, created_at=None, dept=None, email=None, first_name=None, last_client_version=None, last_login_time=None, last_name=None, pmi=None, role_name=None, timezone=None, type=None, use_pmi=False, display_name=None, account_id=None, account_number=None, cms_user_id=None, company=None, user_created_at=None, custom_attributes=None, employee_unique_id=None, group_ids=None, im_group_ids=None, jid=None, job_title=None, language=None, location=None, login_types=None, manager=None, personal_meeting_url=None, phone_country=None, phone_number=None, phone_numbers=None, pic_url=None, plan_united_type=None, pronouns=None, pronouns_option=None, role_id=None, status=None, vanity_url=None, verified=None, cluster=None, zoom_one_type=None):  # noqa: E501
        """InlineResponse20088 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._dept = None
        self._email = None
        self._first_name = None
        self._last_client_version = None
        self._last_login_time = None
        self._last_name = None
        self._pmi = None
        self._role_name = None
        self._timezone = None
        self._type = None
        self._use_pmi = None
        self._display_name = None
        self._account_id = None
        self._account_number = None
        self._cms_user_id = None
        self._company = None
        self._user_created_at = None
        self._custom_attributes = None
        self._employee_unique_id = None
        self._group_ids = None
        self._im_group_ids = None
        self._jid = None
        self._job_title = None
        self._language = None
        self._location = None
        self._login_types = None
        self._manager = None
        self._personal_meeting_url = None
        self._phone_country = None
        self._phone_number = None
        self._phone_numbers = None
        self._pic_url = None
        self._plan_united_type = None
        self._pronouns = None
        self._pronouns_option = None
        self._role_id = None
        self._status = None
        self._vanity_url = None
        self._verified = None
        self._cluster = None
        self._zoom_one_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if dept is not None:
            self.dept = dept
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_client_version is not None:
            self.last_client_version = last_client_version
        if last_login_time is not None:
            self.last_login_time = last_login_time
        if last_name is not None:
            self.last_name = last_name
        if pmi is not None:
            self.pmi = pmi
        if role_name is not None:
            self.role_name = role_name
        if timezone is not None:
            self.timezone = timezone
        self.type = type
        if use_pmi is not None:
            self.use_pmi = use_pmi
        if display_name is not None:
            self.display_name = display_name
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if cms_user_id is not None:
            self.cms_user_id = cms_user_id
        if company is not None:
            self.company = company
        if user_created_at is not None:
            self.user_created_at = user_created_at
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if employee_unique_id is not None:
            self.employee_unique_id = employee_unique_id
        if group_ids is not None:
            self.group_ids = group_ids
        if im_group_ids is not None:
            self.im_group_ids = im_group_ids
        if jid is not None:
            self.jid = jid
        if job_title is not None:
            self.job_title = job_title
        if language is not None:
            self.language = language
        if location is not None:
            self.location = location
        if login_types is not None:
            self.login_types = login_types
        if manager is not None:
            self.manager = manager
        if personal_meeting_url is not None:
            self.personal_meeting_url = personal_meeting_url
        if phone_country is not None:
            self.phone_country = phone_country
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if pic_url is not None:
            self.pic_url = pic_url
        if plan_united_type is not None:
            self.plan_united_type = plan_united_type
        if pronouns is not None:
            self.pronouns = pronouns
        if pronouns_option is not None:
            self.pronouns_option = pronouns_option
        if role_id is not None:
            self.role_id = role_id
        if status is not None:
            self.status = status
        if vanity_url is not None:
            self.vanity_url = vanity_url
        if verified is not None:
            self.verified = verified
        if cluster is not None:
            self.cluster = cluster
        if zoom_one_type is not None:
            self.zoom_one_type = zoom_one_type

    @property
    def id(self):
        """Gets the id of this InlineResponse20088.  # noqa: E501

        User ID.  # noqa: E501

        :return: The id of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20088.

        User ID.  # noqa: E501

        :param id: The id of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20088.  # noqa: E501

        The date and time when this user's latest login type was created.  # noqa: E501

        :return: The created_at of this InlineResponse20088.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20088.

        The date and time when this user's latest login type was created.  # noqa: E501

        :param created_at: The created_at of this InlineResponse20088.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def dept(self):
        """Gets the dept of this InlineResponse20088.  # noqa: E501

        Department.  # noqa: E501

        :return: The dept of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse20088.

        Department.  # noqa: E501

        :param dept: The dept of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def email(self):
        """Gets the email of this InlineResponse20088.  # noqa: E501

        User's email address.  # noqa: E501

        :return: The email of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20088.

        User's email address.  # noqa: E501

        :param email: The email of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this InlineResponse20088.  # noqa: E501

        User's first name.  # noqa: E501

        :return: The first_name of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineResponse20088.

        User's first name.  # noqa: E501

        :param first_name: The first_name of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_client_version(self):
        """Gets the last_client_version of this InlineResponse20088.  # noqa: E501

        User last login client version.  # noqa: E501

        :return: The last_client_version of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._last_client_version

    @last_client_version.setter
    def last_client_version(self, last_client_version):
        """Sets the last_client_version of this InlineResponse20088.

        User last login client version.  # noqa: E501

        :param last_client_version: The last_client_version of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._last_client_version = last_client_version

    @property
    def last_login_time(self):
        """Gets the last_login_time of this InlineResponse20088.  # noqa: E501

        User last login time.  # noqa: E501

        :return: The last_login_time of this InlineResponse20088.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this InlineResponse20088.

        User last login time.  # noqa: E501

        :param last_login_time: The last_login_time of this InlineResponse20088.  # noqa: E501
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def last_name(self):
        """Gets the last_name of this InlineResponse20088.  # noqa: E501

        User's last name.  # noqa: E501

        :return: The last_name of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineResponse20088.

        User's last name.  # noqa: E501

        :param last_name: The last_name of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def pmi(self):
        """Gets the pmi of this InlineResponse20088.  # noqa: E501

        [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi).  # noqa: E501

        :return: The pmi of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._pmi

    @pmi.setter
    def pmi(self, pmi):
        """Sets the pmi of this InlineResponse20088.

        [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi).  # noqa: E501

        :param pmi: The pmi of this InlineResponse20088.  # noqa: E501
        :type: int
        """

        self._pmi = pmi

    @property
    def role_name(self):
        """Gets the role_name of this InlineResponse20088.  # noqa: E501

        User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.  # noqa: E501

        :return: The role_name of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this InlineResponse20088.

        User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.  # noqa: E501

        :param role_name: The role_name of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def timezone(self):
        """Gets the timezone of this InlineResponse20088.  # noqa: E501

        The time zone of the user.  # noqa: E501

        :return: The timezone of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InlineResponse20088.

        The time zone of the user.  # noqa: E501

        :param timezone: The timezone of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this InlineResponse20088.  # noqa: E501

        User's plan type:    `1` - Basic.    `2` - Licensed.    `99` - None (this can only be set with `ssoCreate`).  # noqa: E501

        :return: The type of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20088.

        User's plan type:    `1` - Basic.    `2` - Licensed.    `99` - None (this can only be set with `ssoCreate`).  # noqa: E501

        :param type: The type of this InlineResponse20088.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 99]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_pmi(self):
        """Gets the use_pmi of this InlineResponse20088.  # noqa: E501

        Displays `true` if user has enabled a [personal meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) for instant meetings, `false` otherwise.  # noqa: E501

        :return: The use_pmi of this InlineResponse20088.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi

    @use_pmi.setter
    def use_pmi(self, use_pmi):
        """Sets the use_pmi of this InlineResponse20088.

        Displays `true` if user has enabled a [personal meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) for instant meetings, `false` otherwise.  # noqa: E501

        :param use_pmi: The use_pmi of this InlineResponse20088.  # noqa: E501
        :type: bool
        """

        self._use_pmi = use_pmi

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20088.  # noqa: E501

        User's display name.  # noqa: E501

        :return: The display_name of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20088.

        User's display name.  # noqa: E501

        :param display_name: The display_name of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20088.  # noqa: E501

        User's account ID.  # noqa: E501

        :return: The account_id of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20088.

        User's account ID.  # noqa: E501

        :param account_id: The account_id of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this InlineResponse20088.  # noqa: E501

        The user's account number.  # noqa: E501

        :return: The account_number of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this InlineResponse20088.

        The user's account number.  # noqa: E501

        :param account_number: The account_number of this InlineResponse20088.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def cms_user_id(self):
        """Gets the cms_user_id of this InlineResponse20088.  # noqa: E501

        The user's CMS ID. Only enabled for Kaltura integration.  # noqa: E501

        :return: The cms_user_id of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._cms_user_id

    @cms_user_id.setter
    def cms_user_id(self, cms_user_id):
        """Sets the cms_user_id of this InlineResponse20088.

        The user's CMS ID. Only enabled for Kaltura integration.  # noqa: E501

        :param cms_user_id: The cms_user_id of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._cms_user_id = cms_user_id

    @property
    def company(self):
        """Gets the company of this InlineResponse20088.  # noqa: E501

        The user's company.  # noqa: E501

        :return: The company of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this InlineResponse20088.

        The user's company.  # noqa: E501

        :param company: The company of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def user_created_at(self):
        """Gets the user_created_at of this InlineResponse20088.  # noqa: E501

        The date and time when this user was created.  # noqa: E501

        :return: The user_created_at of this InlineResponse20088.  # noqa: E501
        :rtype: datetime
        """
        return self._user_created_at

    @user_created_at.setter
    def user_created_at(self, user_created_at):
        """Sets the user_created_at of this InlineResponse20088.

        The date and time when this user was created.  # noqa: E501

        :param user_created_at: The user_created_at of this InlineResponse20088.  # noqa: E501
        :type: datetime
        """

        self._user_created_at = user_created_at

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this InlineResponse20088.  # noqa: E501

        Custom attributes that have been assigned to the user.  # noqa: E501

        :return: The custom_attributes of this InlineResponse20088.  # noqa: E501
        :rtype: list[InlineResponse20088CustomAttributes]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this InlineResponse20088.

        Custom attributes that have been assigned to the user.  # noqa: E501

        :param custom_attributes: The custom_attributes of this InlineResponse20088.  # noqa: E501
        :type: list[InlineResponse20088CustomAttributes]
        """

        self._custom_attributes = custom_attributes

    @property
    def employee_unique_id(self):
        """Gets the employee_unique_id of this InlineResponse20088.  # noqa: E501

        The employee's unique ID. This field only returns when:  * SAML single sign-on (SSO) is enabled.  * The `login_type` value is `101` (SSO).  # noqa: E501

        :return: The employee_unique_id of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._employee_unique_id

    @employee_unique_id.setter
    def employee_unique_id(self, employee_unique_id):
        """Sets the employee_unique_id of this InlineResponse20088.

        The employee's unique ID. This field only returns when:  * SAML single sign-on (SSO) is enabled.  * The `login_type` value is `101` (SSO).  # noqa: E501

        :param employee_unique_id: The employee_unique_id of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._employee_unique_id = employee_unique_id

    @property
    def group_ids(self):
        """Gets the group_ids of this InlineResponse20088.  # noqa: E501

        IDs of the web groups that the user belongs to.   # noqa: E501

        :return: The group_ids of this InlineResponse20088.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this InlineResponse20088.

        IDs of the web groups that the user belongs to.   # noqa: E501

        :param group_ids: The group_ids of this InlineResponse20088.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def im_group_ids(self):
        """Gets the im_group_ids of this InlineResponse20088.  # noqa: E501

        IM IDs of the groups that the user belongs to.  # noqa: E501

        :return: The im_group_ids of this InlineResponse20088.  # noqa: E501
        :rtype: list[str]
        """
        return self._im_group_ids

    @im_group_ids.setter
    def im_group_ids(self, im_group_ids):
        """Sets the im_group_ids of this InlineResponse20088.

        IM IDs of the groups that the user belongs to.  # noqa: E501

        :param im_group_ids: The im_group_ids of this InlineResponse20088.  # noqa: E501
        :type: list[str]
        """

        self._im_group_ids = im_group_ids

    @property
    def jid(self):
        """Gets the jid of this InlineResponse20088.  # noqa: E501


        :return: The jid of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._jid

    @jid.setter
    def jid(self, jid):
        """Sets the jid of this InlineResponse20088.


        :param jid: The jid of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._jid = jid

    @property
    def job_title(self):
        """Gets the job_title of this InlineResponse20088.  # noqa: E501

        The user's job title.  # noqa: E501

        :return: The job_title of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this InlineResponse20088.

        The user's job title.  # noqa: E501

        :param job_title: The job_title of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def language(self):
        """Gets the language of this InlineResponse20088.  # noqa: E501

        Default language for the Zoom Web Portal.  # noqa: E501

        :return: The language of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InlineResponse20088.

        Default language for the Zoom Web Portal.  # noqa: E501

        :param language: The language of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def location(self):
        """Gets the location of this InlineResponse20088.  # noqa: E501

        Theser's location.  # noqa: E501

        :return: The location of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse20088.

        Theser's location.  # noqa: E501

        :param location: The location of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def login_types(self):
        """Gets the login_types of this InlineResponse20088.  # noqa: E501

        The user's login method.  `0` - Facebook OAuth. `1` - Google OAuth. `24` - Apple OAuth. `27` - Microsoft OAuth. `97` - Mobile device. `98` - RingCentral OAuth. `99` - API user. `100` - Zoom Work email. `101` - Single Sign-On (SSO).  These login methods are only available in China.  `11` - Phone number. `21` - WeChat. `23` - Alipay.  # noqa: E501

        :return: The login_types of this InlineResponse20088.  # noqa: E501
        :rtype: list[int]
        """
        return self._login_types

    @login_types.setter
    def login_types(self, login_types):
        """Sets the login_types of this InlineResponse20088.

        The user's login method.  `0` - Facebook OAuth. `1` - Google OAuth. `24` - Apple OAuth. `27` - Microsoft OAuth. `97` - Mobile device. `98` - RingCentral OAuth. `99` - API user. `100` - Zoom Work email. `101` - Single Sign-On (SSO).  These login methods are only available in China.  `11` - Phone number. `21` - WeChat. `23` - Alipay.  # noqa: E501

        :param login_types: The login_types of this InlineResponse20088.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 11, 21, 23, 24, 27, 97, 98, 99, 100, 101]  # noqa: E501
        if not set(login_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `login_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(login_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._login_types = login_types

    @property
    def manager(self):
        """Gets the manager of this InlineResponse20088.  # noqa: E501

        The manager for the user.  # noqa: E501

        :return: The manager of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this InlineResponse20088.

        The manager for the user.  # noqa: E501

        :param manager: The manager of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def personal_meeting_url(self):
        """Gets the personal_meeting_url of this InlineResponse20088.  # noqa: E501

        User's personal meeting url.  # noqa: E501

        :return: The personal_meeting_url of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._personal_meeting_url

    @personal_meeting_url.setter
    def personal_meeting_url(self, personal_meeting_url):
        """Sets the personal_meeting_url of this InlineResponse20088.

        User's personal meeting url.  # noqa: E501

        :param personal_meeting_url: The personal_meeting_url of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._personal_meeting_url = personal_meeting_url

    @property
    def phone_country(self):
        """Gets the phone_country of this InlineResponse20088.  # noqa: E501

        **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field.      User's country for Company Phone Number.  # noqa: E501

        :return: The phone_country of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._phone_country

    @phone_country.setter
    def phone_country(self, phone_country):
        """Sets the phone_country of this InlineResponse20088.

        **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field.      User's country for Company Phone Number.  # noqa: E501

        :param phone_country: The phone_country of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._phone_country = phone_country

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse20088.  # noqa: E501

        **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field.  The user's phone number.  # noqa: E501

        :return: The phone_number of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse20088.

        **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field.  The user's phone number.  # noqa: E501

        :param phone_number: The phone_number of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this InlineResponse20088.  # noqa: E501


        :return: The phone_numbers of this InlineResponse20088.  # noqa: E501
        :rtype: list[InlineResponse20088PhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this InlineResponse20088.


        :param phone_numbers: The phone_numbers of this InlineResponse20088.  # noqa: E501
        :type: list[InlineResponse20088PhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def pic_url(self):
        """Gets the pic_url of this InlineResponse20088.  # noqa: E501

        The URL for user's profile picture.  # noqa: E501

        :return: The pic_url of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._pic_url

    @pic_url.setter
    def pic_url(self, pic_url):
        """Sets the pic_url of this InlineResponse20088.

        The URL for user's profile picture.  # noqa: E501

        :param pic_url: The pic_url of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._pic_url = pic_url

    @property
    def plan_united_type(self):
        """Gets the plan_united_type of this InlineResponse20088.  # noqa: E501

        This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan. The license option:  * `1` - Zoom United Pro-United with US/CA Unlimited.  * `2` - Zoom United Pro-United with UK/IR Unlimited.  * `4` - Zoom United Pro-United with AU/NZ Unlimited.  * `8` - Zoom United Pro-United with Global Select.  * `16` - Zoom United Pro-United with Zoom Phone Pro.  * `32` - Zoom United Biz-United with US/CA Unlimited.  * `64` - Zoom United Biz-United with UK/IR Unlimited.  * `128` - Zoom United Biz-United with AU/NZ Unlimited.  * `256` - Zoom United Biz-United with Global Select.  * `512` - Zoom United Biz-United with Zoom Phone Pro.  * `1024` - Zoom United Ent-United with US/CA Unlimited.  * `2048` - Zoom United Ent-United with UK/IR Unlimited.  * `4096` - Zoom United Ent-United with AU/NZ Unlimited.  * `8192` - Zoom United Ent-United with Global Select.  * `16384` - Zoom United Ent-United with Zoom Phone Pro.  * `32768` - Zoom United Pro-United with JP Unlimited.  * `65536` - Zoom United Biz-United with JP Unlimited.  * `131072` - Zoom United Ent-United with JP Unlimited.  # noqa: E501

        :return: The plan_united_type of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._plan_united_type

    @plan_united_type.setter
    def plan_united_type(self, plan_united_type):
        """Sets the plan_united_type of this InlineResponse20088.

        This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan. The license option:  * `1` - Zoom United Pro-United with US/CA Unlimited.  * `2` - Zoom United Pro-United with UK/IR Unlimited.  * `4` - Zoom United Pro-United with AU/NZ Unlimited.  * `8` - Zoom United Pro-United with Global Select.  * `16` - Zoom United Pro-United with Zoom Phone Pro.  * `32` - Zoom United Biz-United with US/CA Unlimited.  * `64` - Zoom United Biz-United with UK/IR Unlimited.  * `128` - Zoom United Biz-United with AU/NZ Unlimited.  * `256` - Zoom United Biz-United with Global Select.  * `512` - Zoom United Biz-United with Zoom Phone Pro.  * `1024` - Zoom United Ent-United with US/CA Unlimited.  * `2048` - Zoom United Ent-United with UK/IR Unlimited.  * `4096` - Zoom United Ent-United with AU/NZ Unlimited.  * `8192` - Zoom United Ent-United with Global Select.  * `16384` - Zoom United Ent-United with Zoom Phone Pro.  * `32768` - Zoom United Pro-United with JP Unlimited.  * `65536` - Zoom United Biz-United with JP Unlimited.  * `131072` - Zoom United Ent-United with JP Unlimited.  # noqa: E501

        :param plan_united_type: The plan_united_type of this InlineResponse20088.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384", "32768", "65536", "131072"]  # noqa: E501
        if plan_united_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_united_type` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_united_type, allowed_values)
            )

        self._plan_united_type = plan_united_type

    @property
    def pronouns(self):
        """Gets the pronouns of this InlineResponse20088.  # noqa: E501

        The user's pronouns.  # noqa: E501

        :return: The pronouns of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this InlineResponse20088.

        The user's pronouns.  # noqa: E501

        :param pronouns: The pronouns of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._pronouns = pronouns

    @property
    def pronouns_option(self):
        """Gets the pronouns_option of this InlineResponse20088.  # noqa: E501

        The user's display pronouns setting. * `1` - Ask the user every time they join meetings and webinars.  * `2` - Always display pronouns in meetings and webinars.  * `3` - Do not display pronouns in meetings and webinars.  # noqa: E501

        :return: The pronouns_option of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._pronouns_option

    @pronouns_option.setter
    def pronouns_option(self, pronouns_option):
        """Sets the pronouns_option of this InlineResponse20088.

        The user's display pronouns setting. * `1` - Ask the user every time they join meetings and webinars.  * `2` - Always display pronouns in meetings and webinars.  * `3` - Do not display pronouns in meetings and webinars.  # noqa: E501

        :param pronouns_option: The pronouns_option of this InlineResponse20088.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if pronouns_option not in allowed_values:
            raise ValueError(
                "Invalid value for `pronouns_option` ({0}), must be one of {1}"  # noqa: E501
                .format(pronouns_option, allowed_values)
            )

        self._pronouns_option = pronouns_option

    @property
    def role_id(self):
        """Gets the role_id of this InlineResponse20088.  # noqa: E501

        Unique identifier of the user's assigned [role](/docs/api-reference/zoom-api/methods#operation/roles).  # noqa: E501

        :return: The role_id of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this InlineResponse20088.

        Unique identifier of the user's assigned [role](/docs/api-reference/zoom-api/methods#operation/roles).  # noqa: E501

        :param role_id: The role_id of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def status(self):
        """Gets the status of this InlineResponse20088.  # noqa: E501

        Status of user's account.  # noqa: E501

        :return: The status of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20088.

        Status of user's account.  # noqa: E501

        :param status: The status of this InlineResponse20088.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def vanity_url(self):
        """Gets the vanity_url of this InlineResponse20088.  # noqa: E501

        Personal meeting room URL, if the user has one.  # noqa: E501

        :return: The vanity_url of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._vanity_url

    @vanity_url.setter
    def vanity_url(self, vanity_url):
        """Sets the vanity_url of this InlineResponse20088.

        Personal meeting room URL, if the user has one.  # noqa: E501

        :param vanity_url: The vanity_url of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._vanity_url = vanity_url

    @property
    def verified(self):
        """Gets the verified of this InlineResponse20088.  # noqa: E501

        Displays whether user is verified or not.   `1` - Account verified.     `0` - Account not verified.  # noqa: E501

        :return: The verified of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this InlineResponse20088.

        Displays whether user is verified or not.   `1` - Account verified.     `0` - Account not verified.  # noqa: E501

        :param verified: The verified of this InlineResponse20088.  # noqa: E501
        :type: int
        """

        self._verified = verified

    @property
    def cluster(self):
        """Gets the cluster of this InlineResponse20088.  # noqa: E501

        The user's cluster.  # noqa: E501

        :return: The cluster of this InlineResponse20088.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this InlineResponse20088.

        The user's cluster.  # noqa: E501

        :param cluster: The cluster of this InlineResponse20088.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def zoom_one_type(self):
        """Gets the zoom_one_type of this InlineResponse20088.  # noqa: E501

        The user's Zoom One plan option.    `4` - Zoom One Enterprise.    `8` - Zoom One Enterprise Plus.    `16` - Zoom One Business Plus with US/CA Unlimited.    `32` - Zoom One Business Plus with UK/IR Unlimited.    `64` - Zoom One Business Plus with AU/NZ Unlimited.    `128` - Zoom One Business Plus with Japan Unlimited.    `33554432` - Zoom One Business Plus with Global Select.    `134217728` - Zoom One Enterprise Premier with US/CA Unlimited.    `1073741824` - Zoom One Enterprise Premier with AU/NZ Unlimited.    `536870912` - Zoom One Enterprise Premier with UK/IR Unlimited.    `268435456` - Zoom One Enterprise Premier with Japan Unlimited.     The Zoom One plan option for Gov accounts:    `4` - Zoom One Enterprise.    `8` - Zoom One Enterprise Plus.    `16` - Zoom One Business Plus.    The Zoom One plan option for Education accounts:    `18014398509481984` - Zoom One for Education School and Campus.    `72057594037927936` - Zoom One for Education Enterprise Essentials.    `576460752303423488` - Zoom One for Education Enterprise Student.   `144115188075855872` - Zoom One for Education Enterprise Plus.    `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.    `1099511627776` -Zoom One for Education School and Campus Plus with AU/NZ Unlimited.    `549755813888` - Zoom One for Education School and Campus Plus with UK/IR Unlimited.    `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.    `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.    `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.    `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.    `17179869184` -Zoom One for Education Enterprise Premier with UK/IR Unlimited.    `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.    `68719476736` - Zoom One for Education Enterprise Premier with Global Select.  # noqa: E501

        :return: The zoom_one_type of this InlineResponse20088.  # noqa: E501
        :rtype: int
        """
        return self._zoom_one_type

    @zoom_one_type.setter
    def zoom_one_type(self, zoom_one_type):
        """Sets the zoom_one_type of this InlineResponse20088.

        The user's Zoom One plan option.    `4` - Zoom One Enterprise.    `8` - Zoom One Enterprise Plus.    `16` - Zoom One Business Plus with US/CA Unlimited.    `32` - Zoom One Business Plus with UK/IR Unlimited.    `64` - Zoom One Business Plus with AU/NZ Unlimited.    `128` - Zoom One Business Plus with Japan Unlimited.    `33554432` - Zoom One Business Plus with Global Select.    `134217728` - Zoom One Enterprise Premier with US/CA Unlimited.    `1073741824` - Zoom One Enterprise Premier with AU/NZ Unlimited.    `536870912` - Zoom One Enterprise Premier with UK/IR Unlimited.    `268435456` - Zoom One Enterprise Premier with Japan Unlimited.     The Zoom One plan option for Gov accounts:    `4` - Zoom One Enterprise.    `8` - Zoom One Enterprise Plus.    `16` - Zoom One Business Plus.    The Zoom One plan option for Education accounts:    `18014398509481984` - Zoom One for Education School and Campus.    `72057594037927936` - Zoom One for Education Enterprise Essentials.    `576460752303423488` - Zoom One for Education Enterprise Student.   `144115188075855872` - Zoom One for Education Enterprise Plus.    `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.    `1099511627776` -Zoom One for Education School and Campus Plus with AU/NZ Unlimited.    `549755813888` - Zoom One for Education School and Campus Plus with UK/IR Unlimited.    `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.    `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.    `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.    `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.    `17179869184` -Zoom One for Education Enterprise Premier with UK/IR Unlimited.    `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.    `68719476736` - Zoom One for Education Enterprise Premier with Global Select.  # noqa: E501

        :param zoom_one_type: The zoom_one_type of this InlineResponse20088.  # noqa: E501
        :type: int
        """

        self._zoom_one_type = zoom_one_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20088, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20088):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
