# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZoomRoom1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_type': 'str',
        'calender_name': 'str',
        'camera': 'str',
        'device_ip': 'str',
        'email': 'str',
        'health': 'str',
        'id': 'str',
        'issues': 'list[str]',
        'last_start_time': 'str',
        'location': 'str',
        'location_id': 'str',
        'microphone': 'str',
        'room_name': 'str',
        'speaker': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_type': 'account_type',
        'calender_name': 'calender_name',
        'camera': 'camera',
        'device_ip': 'device_ip',
        'email': 'email',
        'health': 'health',
        'id': 'id',
        'issues': 'issues',
        'last_start_time': 'last_start_time',
        'location': 'location',
        'location_id': 'location_id',
        'microphone': 'microphone',
        'room_name': 'room_name',
        'speaker': 'speaker',
        'status': 'status'
    }

    def __init__(self, account_type=None, calender_name=None, camera=None, device_ip=None, email=None, health=None, id=None, issues=None, last_start_time=None, location=None, location_id=None, microphone=None, room_name=None, speaker=None, status=None):  # noqa: E501
        """ZoomRoom1 - a model defined in Swagger"""  # noqa: E501
        self._account_type = None
        self._calender_name = None
        self._camera = None
        self._device_ip = None
        self._email = None
        self._health = None
        self._id = None
        self._issues = None
        self._last_start_time = None
        self._location = None
        self._location_id = None
        self._microphone = None
        self._room_name = None
        self._speaker = None
        self._status = None
        self.discriminator = None
        if account_type is not None:
            self.account_type = account_type
        if calender_name is not None:
            self.calender_name = calender_name
        if camera is not None:
            self.camera = camera
        if device_ip is not None:
            self.device_ip = device_ip
        if email is not None:
            self.email = email
        if health is not None:
            self.health = health
        if id is not None:
            self.id = id
        if issues is not None:
            self.issues = issues
        if last_start_time is not None:
            self.last_start_time = last_start_time
        if location is not None:
            self.location = location
        if location_id is not None:
            self.location_id = location_id
        if microphone is not None:
            self.microphone = microphone
        if room_name is not None:
            self.room_name = room_name
        if speaker is not None:
            self.speaker = speaker
        if status is not None:
            self.status = status

    @property
    def account_type(self):
        """Gets the account_type of this ZoomRoom1.  # noqa: E501

        Zoom room email type.  # noqa: E501

        :return: The account_type of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this ZoomRoom1.

        Zoom room email type.  # noqa: E501

        :param account_type: The account_type of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def calender_name(self):
        """Gets the calender_name of this ZoomRoom1.  # noqa: E501

        Zoom calendar name.  # noqa: E501

        :return: The calender_name of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._calender_name

    @calender_name.setter
    def calender_name(self, calender_name):
        """Sets the calender_name of this ZoomRoom1.

        Zoom calendar name.  # noqa: E501

        :param calender_name: The calender_name of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._calender_name = calender_name

    @property
    def camera(self):
        """Gets the camera of this ZoomRoom1.  # noqa: E501

        Zoom Room camera.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The camera of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._camera

    @camera.setter
    def camera(self, camera):
        """Sets the camera of this ZoomRoom1.

        Zoom Room camera.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param camera: The camera of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._camera = camera

    @property
    def device_ip(self):
        """Gets the device_ip of this ZoomRoom1.  # noqa: E501

        Zoom room device IP.  # noqa: E501

        :return: The device_ip of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """Sets the device_ip of this ZoomRoom1.

        Zoom room device IP.  # noqa: E501

        :param device_ip: The device_ip of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._device_ip = device_ip

    @property
    def email(self):
        """Gets the email of this ZoomRoom1.  # noqa: E501

        Zoom room email.  # noqa: E501

        :return: The email of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ZoomRoom1.

        Zoom room email.  # noqa: E501

        :param email: The email of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def health(self):
        """Gets the health of this ZoomRoom1.  # noqa: E501


        :return: The health of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ZoomRoom1.


        :param health: The health of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def id(self):
        """Gets the id of this ZoomRoom1.  # noqa: E501

        Zoom room ID.  # noqa: E501

        :return: The id of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZoomRoom1.

        Zoom room ID.  # noqa: E501

        :param id: The id of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this ZoomRoom1.  # noqa: E501

        Zoom Room issues.  # noqa: E501

        :return: The issues of this ZoomRoom1.  # noqa: E501
        :rtype: list[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ZoomRoom1.

        Zoom Room issues.  # noqa: E501

        :param issues: The issues of this ZoomRoom1.  # noqa: E501
        :type: list[str]
        """

        self._issues = issues

    @property
    def last_start_time(self):
        """Gets the last_start_time of this ZoomRoom1.  # noqa: E501

        Zoom room last start time.  # noqa: E501

        :return: The last_start_time of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """Sets the last_start_time of this ZoomRoom1.

        Zoom room last start time.  # noqa: E501

        :param last_start_time: The last_start_time of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._last_start_time = last_start_time

    @property
    def location(self):
        """Gets the location of this ZoomRoom1.  # noqa: E501

        Zoom room location.  # noqa: E501

        :return: The location of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ZoomRoom1.

        Zoom room location.  # noqa: E501

        :param location: The location of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def location_id(self):
        """Gets the location_id of this ZoomRoom1.  # noqa: E501

        The Zoom Room's location ID.  # noqa: E501

        :return: The location_id of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ZoomRoom1.

        The Zoom Room's location ID.  # noqa: E501

        :param location_id: The location_id of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def microphone(self):
        """Gets the microphone of this ZoomRoom1.  # noqa: E501

        Zoom Room microphone.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The microphone of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._microphone

    @microphone.setter
    def microphone(self, microphone):
        """Sets the microphone of this ZoomRoom1.

        Zoom Room microphone.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param microphone: The microphone of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._microphone = microphone

    @property
    def room_name(self):
        """Gets the room_name of this ZoomRoom1.  # noqa: E501

        Zoom room name.  # noqa: E501

        :return: The room_name of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this ZoomRoom1.

        Zoom room name.  # noqa: E501

        :param room_name: The room_name of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def speaker(self):
        """Gets the speaker of this ZoomRoom1.  # noqa: E501

        Zoom Room speaker.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :return: The speaker of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._speaker

    @speaker.setter
    def speaker(self, speaker):
        """Sets the speaker of this ZoomRoom1.

        Zoom Room speaker.  **Note:** This response returns an empty string (`&ldquo;&ldquo;`) value for any users who are **not** a part of the host's account (external users).  # noqa: E501

        :param speaker: The speaker of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._speaker = speaker

    @property
    def status(self):
        """Gets the status of this ZoomRoom1.  # noqa: E501

        Zoom room status.  # noqa: E501

        :return: The status of this ZoomRoom1.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ZoomRoom1.

        Zoom room status.  # noqa: E501

        :param status: The status of this ZoomRoom1.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoomRoom1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoomRoom1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
