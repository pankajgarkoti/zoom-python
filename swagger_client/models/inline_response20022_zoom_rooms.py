# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022ZoomRooms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'issues_count': 'int',
        'room_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'issues_count': 'issues_count',
        'room_name': 'room_name'
    }

    def __init__(self, id=None, issues_count=None, room_name=None):  # noqa: E501
        """InlineResponse20022ZoomRooms - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._issues_count = None
        self._room_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if issues_count is not None:
            self.issues_count = issues_count
        if room_name is not None:
            self.room_name = room_name

    @property
    def id(self):
        """Gets the id of this InlineResponse20022ZoomRooms.  # noqa: E501

        Zoom Room ID  # noqa: E501

        :return: The id of this InlineResponse20022ZoomRooms.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20022ZoomRooms.

        Zoom Room ID  # noqa: E501

        :param id: The id of this InlineResponse20022ZoomRooms.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issues_count(self):
        """Gets the issues_count of this InlineResponse20022ZoomRooms.  # noqa: E501

        Issue Count of Zoom Room  # noqa: E501

        :return: The issues_count of this InlineResponse20022ZoomRooms.  # noqa: E501
        :rtype: int
        """
        return self._issues_count

    @issues_count.setter
    def issues_count(self, issues_count):
        """Sets the issues_count of this InlineResponse20022ZoomRooms.

        Issue Count of Zoom Room  # noqa: E501

        :param issues_count: The issues_count of this InlineResponse20022ZoomRooms.  # noqa: E501
        :type: int
        """

        self._issues_count = issues_count

    @property
    def room_name(self):
        """Gets the room_name of this InlineResponse20022ZoomRooms.  # noqa: E501

        Zoom Room Name  # noqa: E501

        :return: The room_name of this InlineResponse20022ZoomRooms.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this InlineResponse20022ZoomRooms.

        Zoom Room Name  # noqa: E501

        :param room_name: The room_name of this InlineResponse20022ZoomRooms.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022ZoomRooms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022ZoomRooms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
