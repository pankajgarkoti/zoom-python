# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20033Issues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_name': 'str',
        'zoom_rooms_count': 'int'
    }

    attribute_map = {
        'issue_name': 'issue_name',
        'zoom_rooms_count': 'zoom_rooms_count'
    }

    def __init__(self, issue_name=None, zoom_rooms_count=None):  # noqa: E501
        """InlineResponse20033Issues - a model defined in Swagger"""  # noqa: E501
        self._issue_name = None
        self._zoom_rooms_count = None
        self.discriminator = None
        if issue_name is not None:
            self.issue_name = issue_name
        if zoom_rooms_count is not None:
            self.zoom_rooms_count = zoom_rooms_count

    @property
    def issue_name(self):
        """Gets the issue_name of this InlineResponse20033Issues.  # noqa: E501

        Issue Name.     The value of the this field could be one of the following:     * `Room Controller disconnected`     * `Room Controller connected` * `Selected camera has disconnected` * `Selected camera is reconnected` * `Selected microphone has disconnected` * `Selected microphone is reconnected` * `Selected speaker has disconnected` * `Selected speaker is reconnected` * `Zoom room is offline` * `Zoom room is online` * `High CPU usage is detected` * `Low bandwidth network is detected` * `{name} battery is low` * `{name} battery is normal` * `{name} disconnected` * `{name} connected` * `{name} is not charging`  Possible values for {name}:      * Zoom Rooms Computer  * Controller * Scheduling Display  # noqa: E501

        :return: The issue_name of this InlineResponse20033Issues.  # noqa: E501
        :rtype: str
        """
        return self._issue_name

    @issue_name.setter
    def issue_name(self, issue_name):
        """Sets the issue_name of this InlineResponse20033Issues.

        Issue Name.     The value of the this field could be one of the following:     * `Room Controller disconnected`     * `Room Controller connected` * `Selected camera has disconnected` * `Selected camera is reconnected` * `Selected microphone has disconnected` * `Selected microphone is reconnected` * `Selected speaker has disconnected` * `Selected speaker is reconnected` * `Zoom room is offline` * `Zoom room is online` * `High CPU usage is detected` * `Low bandwidth network is detected` * `{name} battery is low` * `{name} battery is normal` * `{name} disconnected` * `{name} connected` * `{name} is not charging`  Possible values for {name}:      * Zoom Rooms Computer  * Controller * Scheduling Display  # noqa: E501

        :param issue_name: The issue_name of this InlineResponse20033Issues.  # noqa: E501
        :type: str
        """

        self._issue_name = issue_name

    @property
    def zoom_rooms_count(self):
        """Gets the zoom_rooms_count of this InlineResponse20033Issues.  # noqa: E501

        Zoom Room Count of Issue  # noqa: E501

        :return: The zoom_rooms_count of this InlineResponse20033Issues.  # noqa: E501
        :rtype: int
        """
        return self._zoom_rooms_count

    @zoom_rooms_count.setter
    def zoom_rooms_count(self, zoom_rooms_count):
        """Sets the zoom_rooms_count of this InlineResponse20033Issues.

        Zoom Room Count of Issue  # noqa: E501

        :param zoom_rooms_count: The zoom_rooms_count of this InlineResponse20033Issues.  # noqa: E501
        :type: int
        """

        self._zoom_rooms_count = zoom_rooms_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20033Issues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20033Issues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
