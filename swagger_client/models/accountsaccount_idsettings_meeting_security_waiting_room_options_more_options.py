# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_invited_by_host_can_bypass_waiting_room': 'bool',
        'move_participants_to_waiting_room_when_host_dropped': 'bool',
        'allow_participants_to_reply_to_host': 'bool'
    }

    attribute_map = {
        'user_invited_by_host_can_bypass_waiting_room': 'user_invited_by_host_can_bypass_waiting_room',
        'move_participants_to_waiting_room_when_host_dropped': 'move_participants_to_waiting_room_when_host_dropped',
        'allow_participants_to_reply_to_host': 'allow_participants_to_reply_to_host'
    }

    def __init__(self, user_invited_by_host_can_bypass_waiting_room=None, move_participants_to_waiting_room_when_host_dropped=None, allow_participants_to_reply_to_host=None):  # noqa: E501
        """AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions - a model defined in Swagger"""  # noqa: E501
        self._user_invited_by_host_can_bypass_waiting_room = None
        self._move_participants_to_waiting_room_when_host_dropped = None
        self._allow_participants_to_reply_to_host = None
        self.discriminator = None
        if user_invited_by_host_can_bypass_waiting_room is not None:
            self.user_invited_by_host_can_bypass_waiting_room = user_invited_by_host_can_bypass_waiting_room
        if move_participants_to_waiting_room_when_host_dropped is not None:
            self.move_participants_to_waiting_room_when_host_dropped = move_participants_to_waiting_room_when_host_dropped
        if allow_participants_to_reply_to_host is not None:
            self.allow_participants_to_reply_to_host = allow_participants_to_reply_to_host

    @property
    def user_invited_by_host_can_bypass_waiting_room(self):
        """Gets the user_invited_by_host_can_bypass_waiting_room of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501

        Users invited during the meeting by the host or co-hosts will bypass the waiting room.   This feature is only available with version 5.4.0 or later.  # noqa: E501

        :return: The user_invited_by_host_can_bypass_waiting_room of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :rtype: bool
        """
        return self._user_invited_by_host_can_bypass_waiting_room

    @user_invited_by_host_can_bypass_waiting_room.setter
    def user_invited_by_host_can_bypass_waiting_room(self, user_invited_by_host_can_bypass_waiting_room):
        """Sets the user_invited_by_host_can_bypass_waiting_room of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.

        Users invited during the meeting by the host or co-hosts will bypass the waiting room.   This feature is only available with version 5.4.0 or later.  # noqa: E501

        :param user_invited_by_host_can_bypass_waiting_room: The user_invited_by_host_can_bypass_waiting_room of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :type: bool
        """

        self._user_invited_by_host_can_bypass_waiting_room = user_invited_by_host_can_bypass_waiting_room

    @property
    def move_participants_to_waiting_room_when_host_dropped(self):
        """Gets the move_participants_to_waiting_room_when_host_dropped of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501

        Move participants to the waiting room if the host drops unexpectedly. By enabling this option, the waiting room setting is enabled and locked, and participants are not allowed to join before the host.  # noqa: E501

        :return: The move_participants_to_waiting_room_when_host_dropped of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :rtype: bool
        """
        return self._move_participants_to_waiting_room_when_host_dropped

    @move_participants_to_waiting_room_when_host_dropped.setter
    def move_participants_to_waiting_room_when_host_dropped(self, move_participants_to_waiting_room_when_host_dropped):
        """Sets the move_participants_to_waiting_room_when_host_dropped of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.

        Move participants to the waiting room if the host drops unexpectedly. By enabling this option, the waiting room setting is enabled and locked, and participants are not allowed to join before the host.  # noqa: E501

        :param move_participants_to_waiting_room_when_host_dropped: The move_participants_to_waiting_room_when_host_dropped of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :type: bool
        """

        self._move_participants_to_waiting_room_when_host_dropped = move_participants_to_waiting_room_when_host_dropped

    @property
    def allow_participants_to_reply_to_host(self):
        """Gets the allow_participants_to_reply_to_host of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501

        Allow participants in the waiting room to reply to host and co-hosts.   This feature is only available with version 5.8.0 or later.  # noqa: E501

        :return: The allow_participants_to_reply_to_host of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_participants_to_reply_to_host

    @allow_participants_to_reply_to_host.setter
    def allow_participants_to_reply_to_host(self, allow_participants_to_reply_to_host):
        """Sets the allow_participants_to_reply_to_host of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.

        Allow participants in the waiting room to reply to host and co-hosts.   This feature is only available with version 5.8.0 or later.  # noqa: E501

        :param allow_participants_to_reply_to_host: The allow_participants_to_reply_to_host of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions.  # noqa: E501
        :type: bool
        """

        self._allow_participants_to_reply_to_host = allow_participants_to_reply_to_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
