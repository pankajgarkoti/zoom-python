# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'locked': 'bool',
        'admit_type': 'int',
        'internal_user_auto_admit': 'int',
        'admit_domain_allowlist': 'str',
        'who_can_admit_participants': 'int',
        'sort_order_of_people': 'int',
        'more_options': 'AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions'
    }

    attribute_map = {
        'enable': 'enable',
        'locked': 'locked',
        'admit_type': 'admit_type',
        'internal_user_auto_admit': 'internal_user_auto_admit',
        'admit_domain_allowlist': 'admit_domain_allowlist',
        'who_can_admit_participants': 'who_can_admit_participants',
        'sort_order_of_people': 'sort_order_of_people',
        'more_options': 'more_options'
    }

    def __init__(self, enable=None, locked=None, admit_type=None, internal_user_auto_admit=None, admit_domain_allowlist=None, who_can_admit_participants=None, sort_order_of_people=None, more_options=None):  # noqa: E501
        """AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._locked = None
        self._admit_type = None
        self._internal_user_auto_admit = None
        self._admit_domain_allowlist = None
        self._who_can_admit_participants = None
        self._sort_order_of_people = None
        self._more_options = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if locked is not None:
            self.locked = locked
        if admit_type is not None:
            self.admit_type = admit_type
        if internal_user_auto_admit is not None:
            self.internal_user_auto_admit = internal_user_auto_admit
        if admit_domain_allowlist is not None:
            self.admit_domain_allowlist = admit_domain_allowlist
        if who_can_admit_participants is not None:
            self.who_can_admit_participants = who_can_admit_participants
        if sort_order_of_people is not None:
            self.sort_order_of_people = sort_order_of_people
        if more_options is not None:
            self.more_options = more_options

    @property
    def enable(self):
        """Gets the enable of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        Whether to enable the waiting room.  # noqa: E501

        :return: The enable of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        Whether to enable the waiting room.  # noqa: E501

        :param enable: The enable of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def locked(self):
        """Gets the locked of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        Whether to enable the option to lock after selecting  `How are participants admitted from the waiting room`.  # noqa: E501

        :return: The locked of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        Whether to enable the option to lock after selecting  `How are participants admitted from the waiting room`.  # noqa: E501

        :param locked: The locked of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def admit_type(self):
        """Gets the admit_type of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        The type of admission for participants from the waiting room.  * `1` - Everyone is automatically admitted.  * `2` - Participants are manually admitted.  * `3` - External users are manually admitted. Internal users are automatically admitted10 minutes before start time.  * `4` - External users and users without approved domains are manually admitted. Internal users are automatically admitted.  # noqa: E501

        :return: The admit_type of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: int
        """
        return self._admit_type

    @admit_type.setter
    def admit_type(self, admit_type):
        """Sets the admit_type of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        The type of admission for participants from the waiting room.  * `1` - Everyone is automatically admitted.  * `2` - Participants are manually admitted.  * `3` - External users are manually admitted. Internal users are automatically admitted10 minutes before start time.  * `4` - External users and users without approved domains are manually admitted. Internal users are automatically admitted.  # noqa: E501

        :param admit_type: The admit_type of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if admit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `admit_type` ({0}), must be one of {1}"  # noqa: E501
                .format(admit_type, allowed_values)
            )

        self._admit_type = admit_type

    @property
    def internal_user_auto_admit(self):
        """Gets the internal_user_auto_admit of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        If the `admit_type` in (`1`,`3`,`4`), the time when the internal user can join a meeting before the host.  * `1` - when the host joins.  * `2` - anytime.  * `3` - 5 minutes before start time.  * `4` - 10 minutes before start time.   * `5` - 15 minutes before start time.   If the `admit_type` equal `1`, this field value can not be `2`.   # noqa: E501

        :return: The internal_user_auto_admit of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: int
        """
        return self._internal_user_auto_admit

    @internal_user_auto_admit.setter
    def internal_user_auto_admit(self, internal_user_auto_admit):
        """Sets the internal_user_auto_admit of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        If the `admit_type` in (`1`,`3`,`4`), the time when the internal user can join a meeting before the host.  * `1` - when the host joins.  * `2` - anytime.  * `3` - 5 minutes before start time.  * `4` - 10 minutes before start time.   * `5` - 15 minutes before start time.   If the `admit_type` equal `1`, this field value can not be `2`.   # noqa: E501

        :param internal_user_auto_admit: The internal_user_auto_admit of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if internal_user_auto_admit not in allowed_values:
            raise ValueError(
                "Invalid value for `internal_user_auto_admit` ({0}), must be one of {1}"  # noqa: E501
                .format(internal_user_auto_admit, allowed_values)
            )

        self._internal_user_auto_admit = internal_user_auto_admit

    @property
    def admit_domain_allowlist(self):
        """Gets the admit_domain_allowlist of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        If the `admit_type` field is `4`, a comma-separated list of the domains that can bypass the waiting room (`example.com,example2.com`).  # noqa: E501

        :return: The admit_domain_allowlist of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: str
        """
        return self._admit_domain_allowlist

    @admit_domain_allowlist.setter
    def admit_domain_allowlist(self, admit_domain_allowlist):
        """Sets the admit_domain_allowlist of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        If the `admit_type` field is `4`, a comma-separated list of the domains that can bypass the waiting room (`example.com,example2.com`).  # noqa: E501

        :param admit_domain_allowlist: The admit_domain_allowlist of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: str
        """

        self._admit_domain_allowlist = admit_domain_allowlist

    @property
    def who_can_admit_participants(self):
        """Gets the who_can_admit_participants of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        The type of who can admit participants from the waiting room.  * `0` - Host and co-hosts only.  * `1` - Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).  # noqa: E501

        :return: The who_can_admit_participants of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: int
        """
        return self._who_can_admit_participants

    @who_can_admit_participants.setter
    def who_can_admit_participants(self, who_can_admit_participants):
        """Sets the who_can_admit_participants of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        The type of who can admit participants from the waiting room.  * `0` - Host and co-hosts only.  * `1` - Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).  # noqa: E501

        :param who_can_admit_participants: The who_can_admit_participants of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if who_can_admit_participants not in allowed_values:
            raise ValueError(
                "Invalid value for `who_can_admit_participants` ({0}), must be one of {1}"  # noqa: E501
                .format(who_can_admit_participants, allowed_values)
            )

        self._who_can_admit_participants = who_can_admit_participants

    @property
    def sort_order_of_people(self):
        """Gets the sort_order_of_people of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501

        The type of sort order of people in the waiting room in the participants panel.  * `0` - Join order.  * `1` - Alphabetical.   This feature is only available with version 5.10.3 or later.  # noqa: E501

        :return: The sort_order_of_people of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: int
        """
        return self._sort_order_of_people

    @sort_order_of_people.setter
    def sort_order_of_people(self, sort_order_of_people):
        """Sets the sort_order_of_people of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.

        The type of sort order of people in the waiting room in the participants panel.  * `0` - Join order.  * `1` - Alphabetical.   This feature is only available with version 5.10.3 or later.  # noqa: E501

        :param sort_order_of_people: The sort_order_of_people of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if sort_order_of_people not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order_of_people` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order_of_people, allowed_values)
            )

        self._sort_order_of_people = sort_order_of_people

    @property
    def more_options(self):
        """Gets the more_options of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501


        :return: The more_options of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :rtype: AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions
        """
        return self._more_options

    @more_options.setter
    def more_options(self, more_options):
        """Sets the more_options of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.


        :param more_options: The more_options of this AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions.  # noqa: E501
        :type: AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptionsMoreOptions
        """

        self._more_options = more_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsMeetingSecurityWaitingRoomOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
