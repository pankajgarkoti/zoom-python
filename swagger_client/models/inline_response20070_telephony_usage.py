# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20070TelephonyUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_in_number': 'str',
        'country_name': 'str',
        'dept': 'str',
        'duration': 'int',
        'end_time': 'datetime',
        'host_email': 'str',
        'host_id': 'str',
        'host_name': 'str',
        'meeting_id': 'int',
        'meeting_type': 'str',
        'phone_number': 'str',
        'rate': 'float',
        'signaled_number': 'str',
        'start_time': 'datetime',
        'total': 'float',
        'type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'call_in_number': 'call_in_number',
        'country_name': 'country_name',
        'dept': 'dept',
        'duration': 'duration',
        'end_time': 'end_time',
        'host_email': 'host_email',
        'host_id': 'host_id',
        'host_name': 'host_name',
        'meeting_id': 'meeting_id',
        'meeting_type': 'meeting_type',
        'phone_number': 'phone_number',
        'rate': 'rate',
        'signaled_number': 'signaled_number',
        'start_time': 'start_time',
        'total': 'total',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, call_in_number=None, country_name=None, dept=None, duration=None, end_time=None, host_email=None, host_id=None, host_name=None, meeting_id=None, meeting_type=None, phone_number=None, rate=None, signaled_number=None, start_time=None, total=None, type=None, uuid=None):  # noqa: E501
        """InlineResponse20070TelephonyUsage - a model defined in Swagger"""  # noqa: E501
        self._call_in_number = None
        self._country_name = None
        self._dept = None
        self._duration = None
        self._end_time = None
        self._host_email = None
        self._host_id = None
        self._host_name = None
        self._meeting_id = None
        self._meeting_type = None
        self._phone_number = None
        self._rate = None
        self._signaled_number = None
        self._start_time = None
        self._total = None
        self._type = None
        self._uuid = None
        self.discriminator = None
        if call_in_number is not None:
            self.call_in_number = call_in_number
        if country_name is not None:
            self.country_name = country_name
        if dept is not None:
            self.dept = dept
        if duration is not None:
            self.duration = duration
        if end_time is not None:
            self.end_time = end_time
        if host_email is not None:
            self.host_email = host_email
        if host_id is not None:
            self.host_id = host_id
        if host_name is not None:
            self.host_name = host_name
        if meeting_id is not None:
            self.meeting_id = meeting_id
        if meeting_type is not None:
            self.meeting_type = meeting_type
        if phone_number is not None:
            self.phone_number = phone_number
        if rate is not None:
            self.rate = rate
        if signaled_number is not None:
            self.signaled_number = signaled_number
        if start_time is not None:
            self.start_time = start_time
        if total is not None:
            self.total = total
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def call_in_number(self):
        """Gets the call_in_number of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Caller's call-in number.  # noqa: E501

        :return: The call_in_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._call_in_number

    @call_in_number.setter
    def call_in_number(self, call_in_number):
        """Sets the call_in_number of this InlineResponse20070TelephonyUsage.

        Caller's call-in number.  # noqa: E501

        :param call_in_number: The call_in_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._call_in_number = call_in_number

    @property
    def country_name(self):
        """Gets the country_name of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Country name.  # noqa: E501

        :return: The country_name of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this InlineResponse20070TelephonyUsage.

        Country name.  # noqa: E501

        :param country_name: The country_name of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def dept(self):
        """Gets the dept of this InlineResponse20070TelephonyUsage.  # noqa: E501

        User department.  # noqa: E501

        :return: The dept of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse20070TelephonyUsage.

        User department.  # noqa: E501

        :param dept: The dept of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Call leg duration  # noqa: E501

        :return: The duration of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20070TelephonyUsage.

        Call leg duration  # noqa: E501

        :param duration: The duration of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Call leg end time  # noqa: E501

        :return: The end_time of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20070TelephonyUsage.

        Call leg end time  # noqa: E501

        :param end_time: The end_time of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def host_email(self):
        """Gets the host_email of this InlineResponse20070TelephonyUsage.  # noqa: E501

        User email.  # noqa: E501

        :return: The host_email of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._host_email

    @host_email.setter
    def host_email(self, host_email):
        """Sets the host_email of this InlineResponse20070TelephonyUsage.

        User email.  # noqa: E501

        :param host_email: The host_email of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._host_email = host_email

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse20070TelephonyUsage.  # noqa: E501

        The user ID of the meeting host.  # noqa: E501

        :return: The host_id of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse20070TelephonyUsage.

        The user ID of the meeting host.  # noqa: E501

        :param host_id: The host_id of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this InlineResponse20070TelephonyUsage.  # noqa: E501

        User display name.  # noqa: E501

        :return: The host_name of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this InlineResponse20070TelephonyUsage.

        User display name.  # noqa: E501

        :param host_name: The host_name of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def meeting_id(self):
        """Gets the meeting_id of this InlineResponse20070TelephonyUsage.  # noqa: E501

        [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.  # noqa: E501

        :return: The meeting_id of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: int
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this InlineResponse20070TelephonyUsage.

        [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.  # noqa: E501

        :param meeting_id: The meeting_id of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: int
        """

        self._meeting_id = meeting_id

    @property
    def meeting_type(self):
        """Gets the meeting_type of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Meeting type.  # noqa: E501

        :return: The meeting_type of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._meeting_type

    @meeting_type.setter
    def meeting_type(self, meeting_type):
        """Sets the meeting_type of this InlineResponse20070TelephonyUsage.

        Meeting type.  # noqa: E501

        :param meeting_type: The meeting_type of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._meeting_type = meeting_type

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Toll-free telephone number.   # noqa: E501

        :return: The phone_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse20070TelephonyUsage.

        Toll-free telephone number.   # noqa: E501

        :param phone_number: The phone_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def rate(self):
        """Gets the rate of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Calling rate for the telephone call.  # noqa: E501

        :return: The rate of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this InlineResponse20070TelephonyUsage.

        Calling rate for the telephone call.  # noqa: E501

        :param rate: The rate of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def signaled_number(self):
        """Gets the signaled_number of this InlineResponse20070TelephonyUsage.  # noqa: E501

        The number that is signaled to Zoom.   # noqa: E501

        :return: The signaled_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._signaled_number

    @signaled_number.setter
    def signaled_number(self, signaled_number):
        """Sets the signaled_number of this InlineResponse20070TelephonyUsage.

        The number that is signaled to Zoom.   # noqa: E501

        :param signaled_number: The signaled_number of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._signaled_number = signaled_number

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Call leg start time  # noqa: E501

        :return: The start_time of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20070TelephonyUsage.

        Call leg start time  # noqa: E501

        :param start_time: The start_time of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def total(self):
        """Gets the total of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Total cost (USD) for Call Out. Calculated as plan rate by duration.  # noqa: E501

        :return: The total of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse20070TelephonyUsage.

        Total cost (USD) for Call Out. Calculated as plan rate by duration.  # noqa: E501

        :param total: The total of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Call type.  # noqa: E501

        :return: The type of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20070TelephonyUsage.

        Call type.  # noqa: E501

        :param type: The type of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["toll-free", "call-out", "call-in", "US toll-number", "global toll-number", "premium", "premium call-in", "Toll"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20070TelephonyUsage.  # noqa: E501

        Meeting UUID.  # noqa: E501

        :return: The uuid of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20070TelephonyUsage.

        Meeting UUID.  # noqa: E501

        :param uuid: The uuid of this InlineResponse20070TelephonyUsage.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20070TelephonyUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20070TelephonyUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
