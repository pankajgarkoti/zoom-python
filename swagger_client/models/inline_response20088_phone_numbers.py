# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20088PhoneNumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'country': 'str',
        'label': 'str',
        'number': 'str',
        'verified': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'country': 'country',
        'label': 'label',
        'number': 'number',
        'verified': 'verified'
    }

    def __init__(self, code=None, country=None, label=None, number=None, verified=None):  # noqa: E501
        """InlineResponse20088PhoneNumbers - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._country = None
        self._label = None
        self._number = None
        self._verified = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if country is not None:
            self.country = country
        if label is not None:
            self.label = label
        if number is not None:
            self.number = number
        if verified is not None:
            self.verified = verified

    @property
    def code(self):
        """Gets the code of this InlineResponse20088PhoneNumbers.  # noqa: E501

        The phone number's ISO country code. For example, United States phone numbers' value will be `+1`.  # noqa: E501

        :return: The code of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse20088PhoneNumbers.

        The phone number's ISO country code. For example, United States phone numbers' value will be `+1`.  # noqa: E501

        :param code: The code of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def country(self):
        """Gets the country of this InlineResponse20088PhoneNumbers.  # noqa: E501

        The phone number's [country ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries). For example, if the `number` field contains a Brazil-based number, this value is `BR`.  # noqa: E501

        :return: The country of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20088PhoneNumbers.

        The phone number's [country ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries). For example, if the `number` field contains a Brazil-based number, this value is `BR`.  # noqa: E501

        :param country: The country of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def label(self):
        """Gets the label of this InlineResponse20088PhoneNumbers.  # noqa: E501

        The phone number's label. * `Mobile` * `Office` * `Home`  * `Fax`  # noqa: E501

        :return: The label of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse20088PhoneNumbers.

        The phone number's label. * `Mobile` * `Office` * `Home`  * `Fax`  # noqa: E501

        :param label: The label of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["Mobile", "Office", "Home", "Fax"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"  # noqa: E501
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def number(self):
        """Gets the number of this InlineResponse20088PhoneNumbers.  # noqa: E501

        The user's phone number.  # noqa: E501

        :return: The number of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse20088PhoneNumbers.

        The user's phone number.  # noqa: E501

        :param number: The number of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def verified(self):
        """Gets the verified of this InlineResponse20088PhoneNumbers.  # noqa: E501

        Whether Zoom has verified the phone number.  # noqa: E501

        :return: The verified of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this InlineResponse20088PhoneNumbers.

        Whether Zoom has verified the phone number.  # noqa: E501

        :param verified: The verified of this InlineResponse20088PhoneNumbers.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20088PhoneNumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20088PhoneNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
