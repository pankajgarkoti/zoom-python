# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039InMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_guest_join': 'bool',
        'allow_users_to_delete_messages_in_meeting_chat': 'bool',
        'allow_live_streaming': 'bool',
        'allow_show_zoom_windows': 'bool',
        'annotation': 'bool',
        'attendee_on_hold': 'bool',
        'auto_answer': 'bool',
        'auto_generated_captions': 'bool',
        'auto_saving_chat': 'bool',
        'breakout_room': 'bool',
        'chat': 'bool',
        'meeting_question_answer': 'bool',
        'closed_caption': 'bool',
        'co_host': 'bool',
        'custom_data_center_regions': 'bool',
        'disable_screen_sharing_for_host_meetings': 'bool',
        'disable_screen_sharing_for_in_meeting_guests': 'bool',
        'e2e_encryption': 'bool',
        'entry_exit_chime': 'str',
        'far_end_camera_control': 'bool',
        'feedback': 'bool',
        'file_transfer': 'bool',
        'full_transcript': 'bool',
        'group_hd': 'bool',
        'webinar_group_hd': 'bool',
        'language_interpretation': 'bool',
        'sign_language_interpretation': 'bool',
        'manual_captions': 'bool',
        'meeting_reactions': 'bool',
        'webinar_reactions': 'bool',
        'meeting_survey': 'bool',
        'non_verbal_feedback': 'bool',
        'original_audio': 'bool',
        'polling': 'bool',
        'post_meeting_feedback': 'bool',
        'private_chat': 'bool',
        'remote_control': 'bool',
        'remote_support': 'bool',
        'request_permission_to_unmute': 'bool',
        'save_caption': 'bool',
        'save_captions': 'bool',
        'screen_sharing': 'bool',
        'sending_default_email_invites': 'bool',
        'show_a_join_from_your_browser_link': 'bool',
        'show_browser_join_link': 'bool',
        'show_meeting_control_toolbar': 'bool',
        'slide_control': 'bool',
        'stereo_audio': 'bool',
        'use_html_format_email': 'bool',
        'virtual_background': 'bool',
        'waiting_room': 'bool',
        'webinar_chat': 'bool',
        'webinar_live_streaming': 'bool',
        'webinar_polling': 'bool',
        'webinar_question_answer': 'bool',
        'webinar_survey': 'bool',
        'whiteboard': 'bool'
    }

    attribute_map = {
        'alert_guest_join': 'alert_guest_join',
        'allow_users_to_delete_messages_in_meeting_chat': 'allow_users_to_delete_messages_in_meeting_chat',
        'allow_live_streaming': 'allow_live_streaming',
        'allow_show_zoom_windows': 'allow_show_zoom_windows',
        'annotation': 'annotation',
        'attendee_on_hold': 'attendee_on_hold',
        'auto_answer': 'auto_answer',
        'auto_generated_captions': 'auto_generated_captions',
        'auto_saving_chat': 'auto_saving_chat',
        'breakout_room': 'breakout_room',
        'chat': 'chat',
        'meeting_question_answer': 'meeting_question_answer',
        'closed_caption': 'closed_caption',
        'co_host': 'co_host',
        'custom_data_center_regions': 'custom_data_center_regions',
        'disable_screen_sharing_for_host_meetings': 'disable_screen_sharing_for_host_meetings',
        'disable_screen_sharing_for_in_meeting_guests': 'disable_screen_sharing_for_in_meeting_guests',
        'e2e_encryption': 'e2e_encryption',
        'entry_exit_chime': 'entry_exit_chime',
        'far_end_camera_control': 'far_end_camera_control',
        'feedback': 'feedback',
        'file_transfer': 'file_transfer',
        'full_transcript': 'full_transcript',
        'group_hd': 'group_hd',
        'webinar_group_hd': 'webinar_group_hd',
        'language_interpretation': 'language_interpretation',
        'sign_language_interpretation': 'sign_language_interpretation',
        'manual_captions': 'manual_captions',
        'meeting_reactions': 'meeting_reactions',
        'webinar_reactions': 'webinar_reactions',
        'meeting_survey': 'meeting_survey',
        'non_verbal_feedback': 'non_verbal_feedback',
        'original_audio': 'original_audio',
        'polling': 'polling',
        'post_meeting_feedback': 'post_meeting_feedback',
        'private_chat': 'private_chat',
        'remote_control': 'remote_control',
        'remote_support': 'remote_support',
        'request_permission_to_unmute': 'request_permission_to_unmute',
        'save_caption': 'save_caption',
        'save_captions': 'save_captions',
        'screen_sharing': 'screen_sharing',
        'sending_default_email_invites': 'sending_default_email_invites',
        'show_a_join_from_your_browser_link': 'show_a_join_from_your_browser_link',
        'show_browser_join_link': 'show_browser_join_link',
        'show_meeting_control_toolbar': 'show_meeting_control_toolbar',
        'slide_control': 'slide_control',
        'stereo_audio': 'stereo_audio',
        'use_html_format_email': 'use_html_format_email',
        'virtual_background': 'virtual_background',
        'waiting_room': 'waiting_room',
        'webinar_chat': 'webinar_chat',
        'webinar_live_streaming': 'webinar_live_streaming',
        'webinar_polling': 'webinar_polling',
        'webinar_question_answer': 'webinar_question_answer',
        'webinar_survey': 'webinar_survey',
        'whiteboard': 'whiteboard'
    }

    def __init__(self, alert_guest_join=None, allow_users_to_delete_messages_in_meeting_chat=None, allow_live_streaming=None, allow_show_zoom_windows=None, annotation=None, attendee_on_hold=False, auto_answer=None, auto_generated_captions=None, auto_saving_chat=None, breakout_room=None, chat=None, meeting_question_answer=None, closed_caption=None, co_host=None, custom_data_center_regions=None, disable_screen_sharing_for_host_meetings=None, disable_screen_sharing_for_in_meeting_guests=None, e2e_encryption=None, entry_exit_chime=None, far_end_camera_control=None, feedback=None, file_transfer=None, full_transcript=None, group_hd=None, webinar_group_hd=None, language_interpretation=None, sign_language_interpretation=None, manual_captions=None, meeting_reactions=None, webinar_reactions=None, meeting_survey=None, non_verbal_feedback=None, original_audio=None, polling=None, post_meeting_feedback=None, private_chat=None, remote_control=None, remote_support=None, request_permission_to_unmute=None, save_caption=None, save_captions=None, screen_sharing=None, sending_default_email_invites=None, show_a_join_from_your_browser_link=None, show_browser_join_link=None, show_meeting_control_toolbar=None, slide_control=None, stereo_audio=None, use_html_format_email=None, virtual_background=None, waiting_room=None, webinar_chat=None, webinar_live_streaming=None, webinar_polling=None, webinar_question_answer=None, webinar_survey=None, whiteboard=None):  # noqa: E501
        """InlineResponse20039InMeeting - a model defined in Swagger"""  # noqa: E501
        self._alert_guest_join = None
        self._allow_users_to_delete_messages_in_meeting_chat = None
        self._allow_live_streaming = None
        self._allow_show_zoom_windows = None
        self._annotation = None
        self._attendee_on_hold = None
        self._auto_answer = None
        self._auto_generated_captions = None
        self._auto_saving_chat = None
        self._breakout_room = None
        self._chat = None
        self._meeting_question_answer = None
        self._closed_caption = None
        self._co_host = None
        self._custom_data_center_regions = None
        self._disable_screen_sharing_for_host_meetings = None
        self._disable_screen_sharing_for_in_meeting_guests = None
        self._e2e_encryption = None
        self._entry_exit_chime = None
        self._far_end_camera_control = None
        self._feedback = None
        self._file_transfer = None
        self._full_transcript = None
        self._group_hd = None
        self._webinar_group_hd = None
        self._language_interpretation = None
        self._sign_language_interpretation = None
        self._manual_captions = None
        self._meeting_reactions = None
        self._webinar_reactions = None
        self._meeting_survey = None
        self._non_verbal_feedback = None
        self._original_audio = None
        self._polling = None
        self._post_meeting_feedback = None
        self._private_chat = None
        self._remote_control = None
        self._remote_support = None
        self._request_permission_to_unmute = None
        self._save_caption = None
        self._save_captions = None
        self._screen_sharing = None
        self._sending_default_email_invites = None
        self._show_a_join_from_your_browser_link = None
        self._show_browser_join_link = None
        self._show_meeting_control_toolbar = None
        self._slide_control = None
        self._stereo_audio = None
        self._use_html_format_email = None
        self._virtual_background = None
        self._waiting_room = None
        self._webinar_chat = None
        self._webinar_live_streaming = None
        self._webinar_polling = None
        self._webinar_question_answer = None
        self._webinar_survey = None
        self._whiteboard = None
        self.discriminator = None
        if alert_guest_join is not None:
            self.alert_guest_join = alert_guest_join
        if allow_users_to_delete_messages_in_meeting_chat is not None:
            self.allow_users_to_delete_messages_in_meeting_chat = allow_users_to_delete_messages_in_meeting_chat
        if allow_live_streaming is not None:
            self.allow_live_streaming = allow_live_streaming
        if allow_show_zoom_windows is not None:
            self.allow_show_zoom_windows = allow_show_zoom_windows
        if annotation is not None:
            self.annotation = annotation
        if attendee_on_hold is not None:
            self.attendee_on_hold = attendee_on_hold
        if auto_answer is not None:
            self.auto_answer = auto_answer
        if auto_generated_captions is not None:
            self.auto_generated_captions = auto_generated_captions
        if auto_saving_chat is not None:
            self.auto_saving_chat = auto_saving_chat
        if breakout_room is not None:
            self.breakout_room = breakout_room
        if chat is not None:
            self.chat = chat
        if meeting_question_answer is not None:
            self.meeting_question_answer = meeting_question_answer
        if closed_caption is not None:
            self.closed_caption = closed_caption
        if co_host is not None:
            self.co_host = co_host
        if custom_data_center_regions is not None:
            self.custom_data_center_regions = custom_data_center_regions
        if disable_screen_sharing_for_host_meetings is not None:
            self.disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings
        if disable_screen_sharing_for_in_meeting_guests is not None:
            self.disable_screen_sharing_for_in_meeting_guests = disable_screen_sharing_for_in_meeting_guests
        if e2e_encryption is not None:
            self.e2e_encryption = e2e_encryption
        if entry_exit_chime is not None:
            self.entry_exit_chime = entry_exit_chime
        if far_end_camera_control is not None:
            self.far_end_camera_control = far_end_camera_control
        if feedback is not None:
            self.feedback = feedback
        if file_transfer is not None:
            self.file_transfer = file_transfer
        if full_transcript is not None:
            self.full_transcript = full_transcript
        if group_hd is not None:
            self.group_hd = group_hd
        if webinar_group_hd is not None:
            self.webinar_group_hd = webinar_group_hd
        if language_interpretation is not None:
            self.language_interpretation = language_interpretation
        if sign_language_interpretation is not None:
            self.sign_language_interpretation = sign_language_interpretation
        if manual_captions is not None:
            self.manual_captions = manual_captions
        if meeting_reactions is not None:
            self.meeting_reactions = meeting_reactions
        if webinar_reactions is not None:
            self.webinar_reactions = webinar_reactions
        if meeting_survey is not None:
            self.meeting_survey = meeting_survey
        if non_verbal_feedback is not None:
            self.non_verbal_feedback = non_verbal_feedback
        if original_audio is not None:
            self.original_audio = original_audio
        if polling is not None:
            self.polling = polling
        if post_meeting_feedback is not None:
            self.post_meeting_feedback = post_meeting_feedback
        if private_chat is not None:
            self.private_chat = private_chat
        if remote_control is not None:
            self.remote_control = remote_control
        if remote_support is not None:
            self.remote_support = remote_support
        if request_permission_to_unmute is not None:
            self.request_permission_to_unmute = request_permission_to_unmute
        if save_caption is not None:
            self.save_caption = save_caption
        if save_captions is not None:
            self.save_captions = save_captions
        if screen_sharing is not None:
            self.screen_sharing = screen_sharing
        if sending_default_email_invites is not None:
            self.sending_default_email_invites = sending_default_email_invites
        if show_a_join_from_your_browser_link is not None:
            self.show_a_join_from_your_browser_link = show_a_join_from_your_browser_link
        if show_browser_join_link is not None:
            self.show_browser_join_link = show_browser_join_link
        if show_meeting_control_toolbar is not None:
            self.show_meeting_control_toolbar = show_meeting_control_toolbar
        if slide_control is not None:
            self.slide_control = slide_control
        if stereo_audio is not None:
            self.stereo_audio = stereo_audio
        if use_html_format_email is not None:
            self.use_html_format_email = use_html_format_email
        if virtual_background is not None:
            self.virtual_background = virtual_background
        if waiting_room is not None:
            self.waiting_room = waiting_room
        if webinar_chat is not None:
            self.webinar_chat = webinar_chat
        if webinar_live_streaming is not None:
            self.webinar_live_streaming = webinar_live_streaming
        if webinar_polling is not None:
            self.webinar_polling = webinar_polling
        if webinar_question_answer is not None:
            self.webinar_question_answer = webinar_question_answer
        if webinar_survey is not None:
            self.webinar_survey = webinar_survey
        if whiteboard is not None:
            self.whiteboard = whiteboard

    @property
    def alert_guest_join(self):
        """Gets the alert_guest_join of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.  # noqa: E501

        :return: The alert_guest_join of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._alert_guest_join

    @alert_guest_join.setter
    def alert_guest_join(self, alert_guest_join):
        """Sets the alert_guest_join of this InlineResponse20039InMeeting.

        Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.  # noqa: E501

        :param alert_guest_join: The alert_guest_join of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._alert_guest_join = alert_guest_join

    @property
    def allow_users_to_delete_messages_in_meeting_chat(self):
        """Gets the allow_users_to_delete_messages_in_meeting_chat of this InlineResponse20039InMeeting.  # noqa: E501

        If the value of this field is set to `true`,  allow users to delete messages in the in-meeting chat.   # noqa: E501

        :return: The allow_users_to_delete_messages_in_meeting_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_users_to_delete_messages_in_meeting_chat

    @allow_users_to_delete_messages_in_meeting_chat.setter
    def allow_users_to_delete_messages_in_meeting_chat(self, allow_users_to_delete_messages_in_meeting_chat):
        """Sets the allow_users_to_delete_messages_in_meeting_chat of this InlineResponse20039InMeeting.

        If the value of this field is set to `true`,  allow users to delete messages in the in-meeting chat.   # noqa: E501

        :param allow_users_to_delete_messages_in_meeting_chat: The allow_users_to_delete_messages_in_meeting_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_users_to_delete_messages_in_meeting_chat = allow_users_to_delete_messages_in_meeting_chat

    @property
    def allow_live_streaming(self):
        """Gets the allow_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow livestreaming.  # noqa: E501

        :return: The allow_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_live_streaming

    @allow_live_streaming.setter
    def allow_live_streaming(self, allow_live_streaming):
        """Sets the allow_live_streaming of this InlineResponse20039InMeeting.

        Whether to allow livestreaming.  # noqa: E501

        :param allow_live_streaming: The allow_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_live_streaming = allow_live_streaming

    @property
    def allow_show_zoom_windows(self):
        """Gets the allow_show_zoom_windows of this InlineResponse20039InMeeting.  # noqa: E501

        Show Zoom windows during screen share.  # noqa: E501

        :return: The allow_show_zoom_windows of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_show_zoom_windows

    @allow_show_zoom_windows.setter
    def allow_show_zoom_windows(self, allow_show_zoom_windows):
        """Sets the allow_show_zoom_windows of this InlineResponse20039InMeeting.

        Show Zoom windows during screen share.  # noqa: E501

        :param allow_show_zoom_windows: The allow_show_zoom_windows of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_show_zoom_windows = allow_show_zoom_windows

    @property
    def annotation(self):
        """Gets the annotation of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants to use annotation tools to add information to shared screens.  # noqa: E501

        :return: The annotation of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this InlineResponse20039InMeeting.

        Allow participants to use annotation tools to add information to shared screens.  # noqa: E501

        :param annotation: The annotation of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._annotation = annotation

    @property
    def attendee_on_hold(self):
        """Gets the attendee_on_hold of this InlineResponse20039InMeeting.  # noqa: E501

        Allow host to put attendee on hold.  **This field has been deprecated and is no longer supported.**  # noqa: E501

        :return: The attendee_on_hold of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._attendee_on_hold

    @attendee_on_hold.setter
    def attendee_on_hold(self, attendee_on_hold):
        """Sets the attendee_on_hold of this InlineResponse20039InMeeting.

        Allow host to put attendee on hold.  **This field has been deprecated and is no longer supported.**  # noqa: E501

        :param attendee_on_hold: The attendee_on_hold of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._attendee_on_hold = attendee_on_hold

    @property
    def auto_answer(self):
        """Gets the auto_answer of this InlineResponse20039InMeeting.  # noqa: E501

        Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.  # noqa: E501

        :return: The auto_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_answer

    @auto_answer.setter
    def auto_answer(self, auto_answer):
        """Sets the auto_answer of this InlineResponse20039InMeeting.

        Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.  # noqa: E501

        :param auto_answer: The auto_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_answer = auto_answer

    @property
    def auto_generated_captions(self):
        """Gets the auto_generated_captions of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow a live transcription service to transcribe meetings.  # noqa: E501

        :return: The auto_generated_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_generated_captions

    @auto_generated_captions.setter
    def auto_generated_captions(self, auto_generated_captions):
        """Sets the auto_generated_captions of this InlineResponse20039InMeeting.

        Whether to allow a live transcription service to transcribe meetings.  # noqa: E501

        :param auto_generated_captions: The auto_generated_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_generated_captions = auto_generated_captions

    @property
    def auto_saving_chat(self):
        """Gets the auto_saving_chat of this InlineResponse20039InMeeting.  # noqa: E501

        Automatically save all in-meeting chats.  # noqa: E501

        :return: The auto_saving_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_saving_chat

    @auto_saving_chat.setter
    def auto_saving_chat(self, auto_saving_chat):
        """Sets the auto_saving_chat of this InlineResponse20039InMeeting.

        Automatically save all in-meeting chats.  # noqa: E501

        :param auto_saving_chat: The auto_saving_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_saving_chat = auto_saving_chat

    @property
    def breakout_room(self):
        """Gets the breakout_room of this InlineResponse20039InMeeting.  # noqa: E501

        Allow host to split meeting participants into separate, smaller rooms.  # noqa: E501

        :return: The breakout_room of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._breakout_room

    @breakout_room.setter
    def breakout_room(self, breakout_room):
        """Sets the breakout_room of this InlineResponse20039InMeeting.

        Allow host to split meeting participants into separate, smaller rooms.  # noqa: E501

        :param breakout_room: The breakout_room of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._breakout_room = breakout_room

    @property
    def chat(self):
        """Gets the chat of this InlineResponse20039InMeeting.  # noqa: E501

        Allow meeting participants to send chat message visible to all participants.  # noqa: E501

        :return: The chat of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this InlineResponse20039InMeeting.

        Allow meeting participants to send chat message visible to all participants.  # noqa: E501

        :param chat: The chat of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._chat = chat

    @property
    def meeting_question_answer(self):
        """Gets the meeting_question_answer of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants to ask questions for the host and participants to answer.  # noqa: E501

        :return: The meeting_question_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_question_answer

    @meeting_question_answer.setter
    def meeting_question_answer(self, meeting_question_answer):
        """Sets the meeting_question_answer of this InlineResponse20039InMeeting.

        Allow participants to ask questions for the host and participants to answer.  # noqa: E501

        :param meeting_question_answer: The meeting_question_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_question_answer = meeting_question_answer

    @property
    def closed_caption(self):
        """Gets the closed_caption of this InlineResponse20039InMeeting.  # noqa: E501

        Allow host to type closed captions or assign a participant/third party device to add closed captions.  # noqa: E501

        :return: The closed_caption of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._closed_caption

    @closed_caption.setter
    def closed_caption(self, closed_caption):
        """Sets the closed_caption of this InlineResponse20039InMeeting.

        Allow host to type closed captions or assign a participant/third party device to add closed captions.  # noqa: E501

        :param closed_caption: The closed_caption of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._closed_caption = closed_caption

    @property
    def co_host(self):
        """Gets the co_host of this InlineResponse20039InMeeting.  # noqa: E501

        Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.  # noqa: E501

        :return: The co_host of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._co_host

    @co_host.setter
    def co_host(self, co_host):
        """Sets the co_host of this InlineResponse20039InMeeting.

        Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.  # noqa: E501

        :param co_host: The co_host of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._co_host = co_host

    @property
    def custom_data_center_regions(self):
        """Gets the custom_data_center_regions of this InlineResponse20039InMeeting.  # noqa: E501

        Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.  # noqa: E501

        :return: The custom_data_center_regions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._custom_data_center_regions

    @custom_data_center_regions.setter
    def custom_data_center_regions(self, custom_data_center_regions):
        """Sets the custom_data_center_regions of this InlineResponse20039InMeeting.

        Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.  # noqa: E501

        :param custom_data_center_regions: The custom_data_center_regions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._custom_data_center_regions = custom_data_center_regions

    @property
    def disable_screen_sharing_for_host_meetings(self):
        """Gets the disable_screen_sharing_for_host_meetings of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.  # noqa: E501

        :return: The disable_screen_sharing_for_host_meetings of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._disable_screen_sharing_for_host_meetings

    @disable_screen_sharing_for_host_meetings.setter
    def disable_screen_sharing_for_host_meetings(self, disable_screen_sharing_for_host_meetings):
        """Sets the disable_screen_sharing_for_host_meetings of this InlineResponse20039InMeeting.

        Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.  # noqa: E501

        :param disable_screen_sharing_for_host_meetings: The disable_screen_sharing_for_host_meetings of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._disable_screen_sharing_for_host_meetings = disable_screen_sharing_for_host_meetings

    @property
    def disable_screen_sharing_for_in_meeting_guests(self):
        """Gets the disable_screen_sharing_for_in_meeting_guests of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the **Disable screen sharing when guests are in the meeting** setting is enabled.  # noqa: E501

        :return: The disable_screen_sharing_for_in_meeting_guests of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._disable_screen_sharing_for_in_meeting_guests

    @disable_screen_sharing_for_in_meeting_guests.setter
    def disable_screen_sharing_for_in_meeting_guests(self, disable_screen_sharing_for_in_meeting_guests):
        """Sets the disable_screen_sharing_for_in_meeting_guests of this InlineResponse20039InMeeting.

        Whether the **Disable screen sharing when guests are in the meeting** setting is enabled.  # noqa: E501

        :param disable_screen_sharing_for_in_meeting_guests: The disable_screen_sharing_for_in_meeting_guests of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._disable_screen_sharing_for_in_meeting_guests = disable_screen_sharing_for_in_meeting_guests

    @property
    def e2e_encryption(self):
        """Gets the e2e_encryption of this InlineResponse20039InMeeting.  # noqa: E501

        Require that all meetings are encrypted using AES.  # noqa: E501

        :return: The e2e_encryption of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._e2e_encryption

    @e2e_encryption.setter
    def e2e_encryption(self, e2e_encryption):
        """Sets the e2e_encryption of this InlineResponse20039InMeeting.

        Require that all meetings are encrypted using AES.  # noqa: E501

        :param e2e_encryption: The e2e_encryption of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._e2e_encryption = e2e_encryption

    @property
    def entry_exit_chime(self):
        """Gets the entry_exit_chime of this InlineResponse20039InMeeting.  # noqa: E501

        Play sound when participants join or leave.  # noqa: E501

        :return: The entry_exit_chime of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: str
        """
        return self._entry_exit_chime

    @entry_exit_chime.setter
    def entry_exit_chime(self, entry_exit_chime):
        """Sets the entry_exit_chime of this InlineResponse20039InMeeting.

        Play sound when participants join or leave.  # noqa: E501

        :param entry_exit_chime: The entry_exit_chime of this InlineResponse20039InMeeting.  # noqa: E501
        :type: str
        """

        self._entry_exit_chime = entry_exit_chime

    @property
    def far_end_camera_control(self):
        """Gets the far_end_camera_control of this InlineResponse20039InMeeting.  # noqa: E501

        Allow another user to take control of the camera during a meeting.  # noqa: E501

        :return: The far_end_camera_control of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._far_end_camera_control

    @far_end_camera_control.setter
    def far_end_camera_control(self, far_end_camera_control):
        """Sets the far_end_camera_control of this InlineResponse20039InMeeting.

        Allow another user to take control of the camera during a meeting.  # noqa: E501

        :param far_end_camera_control: The far_end_camera_control of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._far_end_camera_control = far_end_camera_control

    @property
    def feedback(self):
        """Gets the feedback of this InlineResponse20039InMeeting.  # noqa: E501

        Enable users to provide feedback to Zoom at the end of the meeting.  # noqa: E501

        :return: The feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this InlineResponse20039InMeeting.

        Enable users to provide feedback to Zoom at the end of the meeting.  # noqa: E501

        :param feedback: The feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._feedback = feedback

    @property
    def file_transfer(self):
        """Gets the file_transfer of this InlineResponse20039InMeeting.  # noqa: E501

        Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.  # noqa: E501

        :return: The file_transfer of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._file_transfer

    @file_transfer.setter
    def file_transfer(self, file_transfer):
        """Sets the file_transfer of this InlineResponse20039InMeeting.

        Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.  # noqa: E501

        :param file_transfer: The file_transfer of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._file_transfer = file_transfer

    @property
    def full_transcript(self):
        """Gets the full_transcript of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow the viewing of full transcripts in the in-meeting side panel.  # noqa: E501

        :return: The full_transcript of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._full_transcript

    @full_transcript.setter
    def full_transcript(self, full_transcript):
        """Sets the full_transcript of this InlineResponse20039InMeeting.

        Whether to allow the viewing of full transcripts in the in-meeting side panel.  # noqa: E501

        :param full_transcript: The full_transcript of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._full_transcript = full_transcript

    @property
    def group_hd(self):
        """Gets the group_hd of this InlineResponse20039InMeeting.  # noqa: E501

        Enable higher quality video for host and participants in Meeting. This will require more bandwidth.  # noqa: E501

        :return: The group_hd of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._group_hd

    @group_hd.setter
    def group_hd(self, group_hd):
        """Sets the group_hd of this InlineResponse20039InMeeting.

        Enable higher quality video for host and participants in Meeting. This will require more bandwidth.  # noqa: E501

        :param group_hd: The group_hd of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._group_hd = group_hd

    @property
    def webinar_group_hd(self):
        """Gets the webinar_group_hd of this InlineResponse20039InMeeting.  # noqa: E501

        Enable higher quality video for host and participants in Webinar. This will require more bandwidth.  # noqa: E501

        :return: The webinar_group_hd of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_group_hd

    @webinar_group_hd.setter
    def webinar_group_hd(self, webinar_group_hd):
        """Sets the webinar_group_hd of this InlineResponse20039InMeeting.

        Enable higher quality video for host and participants in Webinar. This will require more bandwidth.  # noqa: E501

        :param webinar_group_hd: The webinar_group_hd of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_group_hd = webinar_group_hd

    @property
    def language_interpretation(self):
        """Gets the language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow hosts to assign participants as interpreters who can interpret one language into another in real-time.  # noqa: E501

        :return: The language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._language_interpretation

    @language_interpretation.setter
    def language_interpretation(self, language_interpretation):
        """Sets the language_interpretation of this InlineResponse20039InMeeting.

        Whether to allow hosts to assign participants as interpreters who can interpret one language into another in real-time.  # noqa: E501

        :param language_interpretation: The language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._language_interpretation = language_interpretation

    @property
    def sign_language_interpretation(self):
        """Gets the sign_language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501

        Allow hosts to assign participants as sign language interpreters who can interpret one language into sign language in real-time. Hosts can assign interpreters when scheduling, or during the meeting itself. This feature is only available with version 5.11.3 or later.  # noqa: E501

        :return: The sign_language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._sign_language_interpretation

    @sign_language_interpretation.setter
    def sign_language_interpretation(self, sign_language_interpretation):
        """Sets the sign_language_interpretation of this InlineResponse20039InMeeting.

        Allow hosts to assign participants as sign language interpreters who can interpret one language into sign language in real-time. Hosts can assign interpreters when scheduling, or during the meeting itself. This feature is only available with version 5.11.3 or later.  # noqa: E501

        :param sign_language_interpretation: The sign_language_interpretation of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._sign_language_interpretation = sign_language_interpretation

    @property
    def manual_captions(self):
        """Gets the manual_captions of this InlineResponse20039InMeeting.  # noqa: E501

        Allow host to type closed captions or assign a participant/third party device to add closed captions.  # noqa: E501

        :return: The manual_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._manual_captions

    @manual_captions.setter
    def manual_captions(self, manual_captions):
        """Sets the manual_captions of this InlineResponse20039InMeeting.

        Allow host to type closed captions or assign a participant/third party device to add closed captions.  # noqa: E501

        :param manual_captions: The manual_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._manual_captions = manual_captions

    @property
    def meeting_reactions(self):
        """Gets the meeting_reactions of this InlineResponse20039InMeeting.  # noqa: E501

        Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.  # noqa: E501

        :return: The meeting_reactions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_reactions

    @meeting_reactions.setter
    def meeting_reactions(self, meeting_reactions):
        """Sets the meeting_reactions of this InlineResponse20039InMeeting.

        Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.  # noqa: E501

        :param meeting_reactions: The meeting_reactions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_reactions = meeting_reactions

    @property
    def webinar_reactions(self):
        """Gets the webinar_reactions of this InlineResponse20039InMeeting.  # noqa: E501

        Set this field to true to use [webinar reactions](https://support.zoom.us/hc/en-us/articles/4803536268429).  # noqa: E501

        :return: The webinar_reactions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_reactions

    @webinar_reactions.setter
    def webinar_reactions(self, webinar_reactions):
        """Sets the webinar_reactions of this InlineResponse20039InMeeting.

        Set this field to true to use [webinar reactions](https://support.zoom.us/hc/en-us/articles/4803536268429).  # noqa: E501

        :param webinar_reactions: The webinar_reactions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_reactions = webinar_reactions

    @property
    def meeting_survey(self):
        """Gets the meeting_survey of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the host can present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.  # noqa: E501

        :return: The meeting_survey of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_survey

    @meeting_survey.setter
    def meeting_survey(self, meeting_survey):
        """Sets the meeting_survey of this InlineResponse20039InMeeting.

        Whether the host can present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.  # noqa: E501

        :param meeting_survey: The meeting_survey of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._meeting_survey = meeting_survey

    @property
    def non_verbal_feedback(self):
        """Gets the non_verbal_feedback of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.  # noqa: E501

        :return: The non_verbal_feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._non_verbal_feedback

    @non_verbal_feedback.setter
    def non_verbal_feedback(self, non_verbal_feedback):
        """Sets the non_verbal_feedback of this InlineResponse20039InMeeting.

        Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.  # noqa: E501

        :param non_verbal_feedback: The non_verbal_feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._non_verbal_feedback = non_verbal_feedback

    @property
    def original_audio(self):
        """Gets the original_audio of this InlineResponse20039InMeeting.  # noqa: E501

        Allow users to select original sound during a meeting.  # noqa: E501

        :return: The original_audio of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._original_audio

    @original_audio.setter
    def original_audio(self, original_audio):
        """Sets the original_audio of this InlineResponse20039InMeeting.

        Allow users to select original sound during a meeting.  # noqa: E501

        :param original_audio: The original_audio of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._original_audio = original_audio

    @property
    def polling(self):
        """Gets the polling of this InlineResponse20039InMeeting.  # noqa: E501

        Add 'Polls' to the meeting controls. This allows the host to survey the attendees.  # noqa: E501

        :return: The polling of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._polling

    @polling.setter
    def polling(self, polling):
        """Sets the polling of this InlineResponse20039InMeeting.

        Add 'Polls' to the meeting controls. This allows the host to survey the attendees.  # noqa: E501

        :param polling: The polling of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._polling = polling

    @property
    def post_meeting_feedback(self):
        """Gets the post_meeting_feedback of this InlineResponse20039InMeeting.  # noqa: E501

        Display end-of-meeting experience feedback survey.  # noqa: E501

        :return: The post_meeting_feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._post_meeting_feedback

    @post_meeting_feedback.setter
    def post_meeting_feedback(self, post_meeting_feedback):
        """Sets the post_meeting_feedback of this InlineResponse20039InMeeting.

        Display end-of-meeting experience feedback survey.  # noqa: E501

        :param post_meeting_feedback: The post_meeting_feedback of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._post_meeting_feedback = post_meeting_feedback

    @property
    def private_chat(self):
        """Gets the private_chat of this InlineResponse20039InMeeting.  # noqa: E501

        Allow meeting participants to send a private 1:1 message to another participant.  # noqa: E501

        :return: The private_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._private_chat

    @private_chat.setter
    def private_chat(self, private_chat):
        """Sets the private_chat of this InlineResponse20039InMeeting.

        Allow meeting participants to send a private 1:1 message to another participant.  # noqa: E501

        :param private_chat: The private_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._private_chat = private_chat

    @property
    def remote_control(self):
        """Gets the remote_control of this InlineResponse20039InMeeting.  # noqa: E501

        During screen sharing, allow the person who is sharing to let others control the shared content.  # noqa: E501

        :return: The remote_control of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_control

    @remote_control.setter
    def remote_control(self, remote_control):
        """Sets the remote_control of this InlineResponse20039InMeeting.

        During screen sharing, allow the person who is sharing to let others control the shared content.  # noqa: E501

        :param remote_control: The remote_control of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_control = remote_control

    @property
    def remote_support(self):
        """Gets the remote_support of this InlineResponse20039InMeeting.  # noqa: E501

        Allow meeting host to provide 1:1 remote support to another participant.  # noqa: E501

        :return: The remote_support of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_support

    @remote_support.setter
    def remote_support(self, remote_support):
        """Sets the remote_support of this InlineResponse20039InMeeting.

        Allow meeting host to provide 1:1 remote support to another participant.  # noqa: E501

        :param remote_support: The remote_support of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_support = remote_support

    @property
    def request_permission_to_unmute(self):
        """Gets the request_permission_to_unmute of this InlineResponse20039InMeeting.  # noqa: E501

        Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled and locked for the group or not.  # noqa: E501

        :return: The request_permission_to_unmute of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._request_permission_to_unmute

    @request_permission_to_unmute.setter
    def request_permission_to_unmute(self, request_permission_to_unmute):
        """Sets the request_permission_to_unmute of this InlineResponse20039InMeeting.

        Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled and locked for the group or not.  # noqa: E501

        :param request_permission_to_unmute: The request_permission_to_unmute of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._request_permission_to_unmute = request_permission_to_unmute

    @property
    def save_caption(self):
        """Gets the save_caption of this InlineResponse20039InMeeting.  # noqa: E501

        Whether participants can save closed captions or transcripts.  # noqa: E501

        :return: The save_caption of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._save_caption

    @save_caption.setter
    def save_caption(self, save_caption):
        """Sets the save_caption of this InlineResponse20039InMeeting.

        Whether participants can save closed captions or transcripts.  # noqa: E501

        :param save_caption: The save_caption of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._save_caption = save_caption

    @property
    def save_captions(self):
        """Gets the save_captions of this InlineResponse20039InMeeting.  # noqa: E501

        Whether participants can save closed captions or transcripts.  # noqa: E501

        :return: The save_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._save_captions

    @save_captions.setter
    def save_captions(self, save_captions):
        """Sets the save_captions of this InlineResponse20039InMeeting.

        Whether participants can save closed captions or transcripts.  # noqa: E501

        :param save_captions: The save_captions of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._save_captions = save_captions

    @property
    def screen_sharing(self):
        """Gets the screen_sharing of this InlineResponse20039InMeeting.  # noqa: E501

        Allow host and participants to share their screen or content during meetings.  # noqa: E501

        :return: The screen_sharing of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._screen_sharing

    @screen_sharing.setter
    def screen_sharing(self, screen_sharing):
        """Sets the screen_sharing of this InlineResponse20039InMeeting.

        Allow host and participants to share their screen or content during meetings.  # noqa: E501

        :param screen_sharing: The screen_sharing of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._screen_sharing = screen_sharing

    @property
    def sending_default_email_invites(self):
        """Gets the sending_default_email_invites of this InlineResponse20039InMeeting.  # noqa: E501

        Allow users to invite participants by email only by default.  # noqa: E501

        :return: The sending_default_email_invites of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._sending_default_email_invites

    @sending_default_email_invites.setter
    def sending_default_email_invites(self, sending_default_email_invites):
        """Sets the sending_default_email_invites of this InlineResponse20039InMeeting.

        Allow users to invite participants by email only by default.  # noqa: E501

        :param sending_default_email_invites: The sending_default_email_invites of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._sending_default_email_invites = sending_default_email_invites

    @property
    def show_a_join_from_your_browser_link(self):
        """Gets the show_a_join_from_your_browser_link of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.  # noqa: E501

        :return: The show_a_join_from_your_browser_link of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_a_join_from_your_browser_link

    @show_a_join_from_your_browser_link.setter
    def show_a_join_from_your_browser_link(self, show_a_join_from_your_browser_link):
        """Sets the show_a_join_from_your_browser_link of this InlineResponse20039InMeeting.

        Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.  # noqa: E501

        :param show_a_join_from_your_browser_link: The show_a_join_from_your_browser_link of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._show_a_join_from_your_browser_link = show_a_join_from_your_browser_link

    @property
    def show_browser_join_link(self):
        """Gets the show_browser_join_link of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants to join a meeting directly from their browser.  # noqa: E501

        :return: The show_browser_join_link of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_browser_join_link

    @show_browser_join_link.setter
    def show_browser_join_link(self, show_browser_join_link):
        """Sets the show_browser_join_link of this InlineResponse20039InMeeting.

        Allow participants to join a meeting directly from their browser.  # noqa: E501

        :param show_browser_join_link: The show_browser_join_link of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._show_browser_join_link = show_browser_join_link

    @property
    def show_meeting_control_toolbar(self):
        """Gets the show_meeting_control_toolbar of this InlineResponse20039InMeeting.  # noqa: E501

        Always show meeting controls during a meeting.  # noqa: E501

        :return: The show_meeting_control_toolbar of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_meeting_control_toolbar

    @show_meeting_control_toolbar.setter
    def show_meeting_control_toolbar(self, show_meeting_control_toolbar):
        """Sets the show_meeting_control_toolbar of this InlineResponse20039InMeeting.

        Always show meeting controls during a meeting.  # noqa: E501

        :param show_meeting_control_toolbar: The show_meeting_control_toolbar of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._show_meeting_control_toolbar = show_meeting_control_toolbar

    @property
    def slide_control(self):
        """Gets the slide_control of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.  # noqa: E501

        :return: The slide_control of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._slide_control

    @slide_control.setter
    def slide_control(self, slide_control):
        """Sets the slide_control of this InlineResponse20039InMeeting.

        Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.  # noqa: E501

        :param slide_control: The slide_control of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._slide_control = slide_control

    @property
    def stereo_audio(self):
        """Gets the stereo_audio of this InlineResponse20039InMeeting.  # noqa: E501

        Allow users to select stereo audio during a meeting.  # noqa: E501

        :return: The stereo_audio of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._stereo_audio

    @stereo_audio.setter
    def stereo_audio(self, stereo_audio):
        """Sets the stereo_audio of this InlineResponse20039InMeeting.

        Allow users to select stereo audio during a meeting.  # noqa: E501

        :param stereo_audio: The stereo_audio of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._stereo_audio = stereo_audio

    @property
    def use_html_format_email(self):
        """Gets the use_html_format_email of this InlineResponse20039InMeeting.  # noqa: E501

        Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.  # noqa: E501

        :return: The use_html_format_email of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._use_html_format_email

    @use_html_format_email.setter
    def use_html_format_email(self, use_html_format_email):
        """Sets the use_html_format_email of this InlineResponse20039InMeeting.

        Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.  # noqa: E501

        :param use_html_format_email: The use_html_format_email of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._use_html_format_email = use_html_format_email

    @property
    def virtual_background(self):
        """Gets the virtual_background of this InlineResponse20039InMeeting.  # noqa: E501

        Enable virtual background.  # noqa: E501

        :return: The virtual_background of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._virtual_background

    @virtual_background.setter
    def virtual_background(self, virtual_background):
        """Sets the virtual_background of this InlineResponse20039InMeeting.

        Enable virtual background.  # noqa: E501

        :param virtual_background: The virtual_background of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._virtual_background = virtual_background

    @property
    def waiting_room(self):
        """Gets the waiting_room of this InlineResponse20039InMeeting.  # noqa: E501

        Attendees cannot join a meeting until a host admits them individually from the waiting room.  # noqa: E501

        :return: The waiting_room of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this InlineResponse20039InMeeting.

        Attendees cannot join a meeting until a host admits them individually from the waiting room.  # noqa: E501

        :param waiting_room: The waiting_room of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._waiting_room = waiting_room

    @property
    def webinar_chat(self):
        """Gets the webinar_chat of this InlineResponse20039InMeeting.  # noqa: E501

        Whether to allow webinar participants to send chat messages.  # noqa: E501

        :return: The webinar_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_chat

    @webinar_chat.setter
    def webinar_chat(self, webinar_chat):
        """Sets the webinar_chat of this InlineResponse20039InMeeting.

        Whether to allow webinar participants to send chat messages.  # noqa: E501

        :param webinar_chat: The webinar_chat of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_chat = webinar_chat

    @property
    def webinar_live_streaming(self):
        """Gets the webinar_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501

        Whether webinar livestreaming is enabled.  # noqa: E501

        :return: The webinar_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_live_streaming

    @webinar_live_streaming.setter
    def webinar_live_streaming(self, webinar_live_streaming):
        """Sets the webinar_live_streaming of this InlineResponse20039InMeeting.

        Whether webinar livestreaming is enabled.  # noqa: E501

        :param webinar_live_streaming: The webinar_live_streaming of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_live_streaming = webinar_live_streaming

    @property
    def webinar_polling(self):
        """Gets the webinar_polling of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the host can add polls before or during a webinar.  # noqa: E501

        :return: The webinar_polling of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_polling

    @webinar_polling.setter
    def webinar_polling(self, webinar_polling):
        """Sets the webinar_polling of this InlineResponse20039InMeeting.

        Whether the host can add polls before or during a webinar.  # noqa: E501

        :param webinar_polling: The webinar_polling of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_polling = webinar_polling

    @property
    def webinar_question_answer(self):
        """Gets the webinar_question_answer of this InlineResponse20039InMeeting.  # noqa: E501

        Whether attendees can ask the host and panelists questions in the webinar.  # noqa: E501

        :return: The webinar_question_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_question_answer

    @webinar_question_answer.setter
    def webinar_question_answer(self, webinar_question_answer):
        """Sets the webinar_question_answer of this InlineResponse20039InMeeting.

        Whether attendees can ask the host and panelists questions in the webinar.  # noqa: E501

        :param webinar_question_answer: The webinar_question_answer of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_question_answer = webinar_question_answer

    @property
    def webinar_survey(self):
        """Gets the webinar_survey of this InlineResponse20039InMeeting.  # noqa: E501

        Whether the host can present surveys to attendees once a webinar has ended.  # noqa: E501

        :return: The webinar_survey of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._webinar_survey

    @webinar_survey.setter
    def webinar_survey(self, webinar_survey):
        """Sets the webinar_survey of this InlineResponse20039InMeeting.

        Whether the host can present surveys to attendees once a webinar has ended.  # noqa: E501

        :param webinar_survey: The webinar_survey of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._webinar_survey = webinar_survey

    @property
    def whiteboard(self):
        """Gets the whiteboard of this InlineResponse20039InMeeting.  # noqa: E501

        Allow participants to share a whiteboard that includes annotation tools.  # noqa: E501

        :return: The whiteboard of this InlineResponse20039InMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._whiteboard

    @whiteboard.setter
    def whiteboard(self, whiteboard):
        """Sets the whiteboard of this InlineResponse20039InMeeting.

        Allow participants to share a whiteboard that includes annotation tools.  # noqa: E501

        :param whiteboard: The whiteboard of this InlineResponse20039InMeeting.  # noqa: E501
        :type: bool
        """

        self._whiteboard = whiteboard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039InMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039InMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
