# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061BillingReports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'id': 'str',
        'start_date': 'date',
        'tax_amount': 'str',
        'total_amount': 'str',
        'type': 'int'
    }

    attribute_map = {
        'end_date': 'end_date',
        'id': 'id',
        'start_date': 'start_date',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'type': 'type'
    }

    def __init__(self, end_date=None, id=None, start_date=None, tax_amount=None, total_amount=None, type=None):  # noqa: E501
        """InlineResponse20061BillingReports - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._id = None
        self._start_date = None
        self._tax_amount = None
        self._total_amount = None
        self._type = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if start_date is not None:
            self.start_date = start_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if type is not None:
            self.type = type

    @property
    def end_date(self):
        """Gets the end_date of this InlineResponse20061BillingReports.  # noqa: E501

        End date of the billing period.  # noqa: E501

        :return: The end_date of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InlineResponse20061BillingReports.

        End date of the billing period.  # noqa: E501

        :param end_date: The end_date of this InlineResponse20061BillingReports.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this InlineResponse20061BillingReports.  # noqa: E501

        Unique Identifier of the report. Use this ID to retrieve billing invoice via the &quot;Get Billing Invoices API&quot;.   You can also use this ID to export a CSV file of the billing report from this URL: `https://zoom.us/account/report/billing/export?id={id}`.  # noqa: E501

        :return: The id of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061BillingReports.

        Unique Identifier of the report. Use this ID to retrieve billing invoice via the &quot;Get Billing Invoices API&quot;.   You can also use this ID to export a CSV file of the billing report from this URL: `https://zoom.us/account/report/billing/export?id={id}`.  # noqa: E501

        :param id: The id of this InlineResponse20061BillingReports.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def start_date(self):
        """Gets the start_date of this InlineResponse20061BillingReports.  # noqa: E501

        Start date of the billing period.  # noqa: E501

        :return: The start_date of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InlineResponse20061BillingReports.

        Start date of the billing period.  # noqa: E501

        :param start_date: The start_date of this InlineResponse20061BillingReports.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this InlineResponse20061BillingReports.  # noqa: E501

        Total tax amount for this billing period.  # noqa: E501

        :return: The tax_amount of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this InlineResponse20061BillingReports.

        Total tax amount for this billing period.  # noqa: E501

        :param tax_amount: The tax_amount of this InlineResponse20061BillingReports.  # noqa: E501
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this InlineResponse20061BillingReports.  # noqa: E501

        Total billing amount for this billing period.  # noqa: E501

        :return: The total_amount of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InlineResponse20061BillingReports.

        Total billing amount for this billing period.  # noqa: E501

        :param total_amount: The total_amount of this InlineResponse20061BillingReports.  # noqa: E501
        :type: str
        """

        self._total_amount = total_amount

    @property
    def type(self):
        """Gets the type of this InlineResponse20061BillingReports.  # noqa: E501

        Type of the billing report. The value should be either of the following:     `0` - Detailed Billing Reports `1` - Custom Billing Reports  # noqa: E501

        :return: The type of this InlineResponse20061BillingReports.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20061BillingReports.

        Type of the billing report. The value should be either of the following:     `0` - Detailed Billing Reports `1` - Custom Billing Reports  # noqa: E501

        :param type: The type of this InlineResponse20061BillingReports.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061BillingReports, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061BillingReports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
