# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20072Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_attributes': 'InlineResponse20072CustomAttributes',
        'dept': 'str',
        'email': 'str',
        'id': 'str',
        'meeting_minutes': 'int',
        'meetings': 'int',
        'participants': 'int',
        'type': 'int',
        'user_name': 'str'
    }

    attribute_map = {
        'custom_attributes': 'custom_attributes',
        'dept': 'dept',
        'email': 'email',
        'id': 'id',
        'meeting_minutes': 'meeting_minutes',
        'meetings': 'meetings',
        'participants': 'participants',
        'type': 'type',
        'user_name': 'user_name'
    }

    def __init__(self, custom_attributes=None, dept=None, email=None, id=None, meeting_minutes=None, meetings=None, participants=None, type=None, user_name=None):  # noqa: E501
        """InlineResponse20072Users - a model defined in Swagger"""  # noqa: E501
        self._custom_attributes = None
        self._dept = None
        self._email = None
        self._id = None
        self._meeting_minutes = None
        self._meetings = None
        self._participants = None
        self._type = None
        self._user_name = None
        self.discriminator = None
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if dept is not None:
            self.dept = dept
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if meeting_minutes is not None:
            self.meeting_minutes = meeting_minutes
        if meetings is not None:
            self.meetings = meetings
        if participants is not None:
            self.participants = participants
        if type is not None:
            self.type = type
        if user_name is not None:
            self.user_name = user_name

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this InlineResponse20072Users.  # noqa: E501


        :return: The custom_attributes of this InlineResponse20072Users.  # noqa: E501
        :rtype: InlineResponse20072CustomAttributes
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this InlineResponse20072Users.


        :param custom_attributes: The custom_attributes of this InlineResponse20072Users.  # noqa: E501
        :type: InlineResponse20072CustomAttributes
        """

        self._custom_attributes = custom_attributes

    @property
    def dept(self):
        """Gets the dept of this InlineResponse20072Users.  # noqa: E501

        User department.  # noqa: E501

        :return: The dept of this InlineResponse20072Users.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse20072Users.

        User department.  # noqa: E501

        :param dept: The dept of this InlineResponse20072Users.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def email(self):
        """Gets the email of this InlineResponse20072Users.  # noqa: E501

        User email.  # noqa: E501

        :return: The email of this InlineResponse20072Users.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20072Users.

        User email.  # noqa: E501

        :param email: The email of this InlineResponse20072Users.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this InlineResponse20072Users.  # noqa: E501

        User ID.  # noqa: E501

        :return: The id of this InlineResponse20072Users.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20072Users.

        User ID.  # noqa: E501

        :param id: The id of this InlineResponse20072Users.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meeting_minutes(self):
        """Gets the meeting_minutes of this InlineResponse20072Users.  # noqa: E501

        Number of meeting minutes for user.  # noqa: E501

        :return: The meeting_minutes of this InlineResponse20072Users.  # noqa: E501
        :rtype: int
        """
        return self._meeting_minutes

    @meeting_minutes.setter
    def meeting_minutes(self, meeting_minutes):
        """Sets the meeting_minutes of this InlineResponse20072Users.

        Number of meeting minutes for user.  # noqa: E501

        :param meeting_minutes: The meeting_minutes of this InlineResponse20072Users.  # noqa: E501
        :type: int
        """

        self._meeting_minutes = meeting_minutes

    @property
    def meetings(self):
        """Gets the meetings of this InlineResponse20072Users.  # noqa: E501

        Number of meetings for user.  # noqa: E501

        :return: The meetings of this InlineResponse20072Users.  # noqa: E501
        :rtype: int
        """
        return self._meetings

    @meetings.setter
    def meetings(self, meetings):
        """Sets the meetings of this InlineResponse20072Users.

        Number of meetings for user.  # noqa: E501

        :param meetings: The meetings of this InlineResponse20072Users.  # noqa: E501
        :type: int
        """

        self._meetings = meetings

    @property
    def participants(self):
        """Gets the participants of this InlineResponse20072Users.  # noqa: E501

        Number of participants in meetings for user.  # noqa: E501

        :return: The participants of this InlineResponse20072Users.  # noqa: E501
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this InlineResponse20072Users.

        Number of participants in meetings for user.  # noqa: E501

        :param participants: The participants of this InlineResponse20072Users.  # noqa: E501
        :type: int
        """

        self._participants = participants

    @property
    def type(self):
        """Gets the type of this InlineResponse20072Users.  # noqa: E501

        User type.  # noqa: E501

        :return: The type of this InlineResponse20072Users.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20072Users.

        User type.  # noqa: E501

        :param type: The type of this InlineResponse20072Users.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20072Users.  # noqa: E501

        User display name.  # noqa: E501

        :return: The user_name of this InlineResponse20072Users.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20072Users.

        User display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20072Users.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20072Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20072Users):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
