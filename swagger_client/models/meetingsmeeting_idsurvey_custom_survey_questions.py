# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeetingsmeetingIdsurveyCustomSurveyQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'answer_required': 'bool',
        'show_as_dropdown': 'bool',
        'answers': 'list[str]',
        'prompts': 'list[MeetingsmeetingIdsurveyCustomSurveyPrompts]',
        'answer_min_character': 'int',
        'answer_max_character': 'int',
        'rating_min_value': 'int',
        'rating_max_value': 'int',
        'rating_min_label': 'str',
        'rating_max_label': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'answer_required': 'answer_required',
        'show_as_dropdown': 'show_as_dropdown',
        'answers': 'answers',
        'prompts': 'prompts',
        'answer_min_character': 'answer_min_character',
        'answer_max_character': 'answer_max_character',
        'rating_min_value': 'rating_min_value',
        'rating_max_value': 'rating_max_value',
        'rating_min_label': 'rating_min_label',
        'rating_max_label': 'rating_max_label'
    }

    def __init__(self, name=None, type=None, answer_required=False, show_as_dropdown=False, answers=None, prompts=None, answer_min_character=None, answer_max_character=None, rating_min_value=None, rating_max_value=None, rating_min_label=None, rating_max_label=None):  # noqa: E501
        """MeetingsmeetingIdsurveyCustomSurveyQuestions - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._answer_required = None
        self._show_as_dropdown = None
        self._answers = None
        self._prompts = None
        self._answer_min_character = None
        self._answer_max_character = None
        self._rating_min_value = None
        self._rating_max_value = None
        self._rating_min_label = None
        self._rating_max_label = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if answer_required is not None:
            self.answer_required = answer_required
        if show_as_dropdown is not None:
            self.show_as_dropdown = show_as_dropdown
        if answers is not None:
            self.answers = answers
        if prompts is not None:
            self.prompts = prompts
        if answer_min_character is not None:
            self.answer_min_character = answer_min_character
        if answer_max_character is not None:
            self.answer_max_character = answer_max_character
        if rating_min_value is not None:
            self.rating_min_value = rating_min_value
        if rating_max_value is not None:
            self.rating_max_value = rating_max_value
        if rating_min_label is not None:
            self.rating_min_label = rating_min_label
        if rating_max_label is not None:
            self.rating_max_label = rating_max_label

    @property
    def name(self):
        """Gets the name of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The survey question, up to 420 characters.  # noqa: E501

        :return: The name of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The survey question, up to 420 characters.  # noqa: E501

        :param name: The name of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The survey's question and answer type.  * `single` - Single choice.  * `multiple` - Multiple choice.  * `matching` - Matching.  * `rank_order` - Rank order  * `short_answer` - Short answer  * `long_answer` - Long answer.  * `fill_in_the_blank` - Fill in the blank  * `rating_scale` - Rating scale.  # noqa: E501

        :return: The type of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The survey's question and answer type.  * `single` - Single choice.  * `multiple` - Multiple choice.  * `matching` - Matching.  * `rank_order` - Rank order  * `short_answer` - Short answer  * `long_answer` - Long answer.  * `fill_in_the_blank` - Fill in the blank  * `rating_scale` - Rating scale.  # noqa: E501

        :param type: The type of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: str
        """
        allowed_values = ["single", "multiple", "matching", "rank_order", "short_answer", "long_answer", "fill_in_the_blank", "rating_scale"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def answer_required(self):
        """Gets the answer_required of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        Whether participants must answer the question.  * `true` - The participant must answer the question.  * `false` - The participant does not need to answer the question.    This value defaults to `false`.  # noqa: E501

        :return: The answer_required of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._answer_required

    @answer_required.setter
    def answer_required(self, answer_required):
        """Sets the answer_required of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        Whether participants must answer the question.  * `true` - The participant must answer the question.  * `false` - The participant does not need to answer the question.    This value defaults to `false`.  # noqa: E501

        :param answer_required: The answer_required of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: bool
        """

        self._answer_required = answer_required

    @property
    def show_as_dropdown(self):
        """Gets the show_as_dropdown of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        Whether to display the radio selection as a drop-down box.  * `true` - Show as a drop-down box.  * `false` - Do not show as a drop-down box.    This value defaults to `false`.  # noqa: E501

        :return: The show_as_dropdown of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._show_as_dropdown

    @show_as_dropdown.setter
    def show_as_dropdown(self, show_as_dropdown):
        """Sets the show_as_dropdown of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        Whether to display the radio selection as a drop-down box.  * `true` - Show as a drop-down box.  * `false` - Do not show as a drop-down box.    This value defaults to `false`.  # noqa: E501

        :param show_as_dropdown: The show_as_dropdown of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: bool
        """

        self._show_as_dropdown = show_as_dropdown

    @property
    def answers(self):
        """Gets the answers of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The survey question's available answers. This field requires a **minimum** of two answers.   * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.  * For `matching` polls, you can only provide a maximum of 16 answers.  * For `rank_order` polls, you can only provide a maximum of seven answers.  # noqa: E501

        :return: The answers of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: list[str]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The survey question's available answers. This field requires a **minimum** of two answers.   * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.  * For `matching` polls, you can only provide a maximum of 16 answers.  * For `rank_order` polls, you can only provide a maximum of seven answers.  # noqa: E501

        :param answers: The answers of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: list[str]
        """

        self._answers = answers

    @property
    def prompts(self):
        """Gets the prompts of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.  # noqa: E501

        :return: The prompts of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: list[MeetingsmeetingIdsurveyCustomSurveyPrompts]
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts):
        """Sets the prompts of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.  # noqa: E501

        :param prompts: The prompts of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: list[MeetingsmeetingIdsurveyCustomSurveyPrompts]
        """

        self._prompts = prompts

    @property
    def answer_min_character(self):
        """Gets the answer_min_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.  # noqa: E501

        :return: The answer_min_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: int
        """
        return self._answer_min_character

    @answer_min_character.setter
    def answer_min_character(self, answer_min_character):
        """Sets the answer_min_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.  # noqa: E501

        :param answer_min_character: The answer_min_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: int
        """

        self._answer_min_character = answer_min_character

    @property
    def answer_max_character(self):
        """Gets the answer_max_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.  * For `short_answer` question, a maximum of 500 characters.  * For `long_answer` question, a maximum of 2,000 characters.  # noqa: E501

        :return: The answer_max_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: int
        """
        return self._answer_max_character

    @answer_max_character.setter
    def answer_max_character(self, answer_max_character):
        """Sets the answer_max_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.  * For `short_answer` question, a maximum of 500 characters.  * For `long_answer` question, a maximum of 2,000 characters.  # noqa: E501

        :param answer_max_character: The answer_max_character of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: int
        """

        self._answer_max_character = answer_max_character

    @property
    def rating_min_value(self):
        """Gets the rating_min_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The rating scale's minimum value. This value cannot be less than zero.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :return: The rating_min_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: int
        """
        return self._rating_min_value

    @rating_min_value.setter
    def rating_min_value(self, rating_min_value):
        """Sets the rating_min_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The rating scale's minimum value. This value cannot be less than zero.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :param rating_min_value: The rating_min_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: int
        """

        self._rating_min_value = rating_min_value

    @property
    def rating_max_value(self):
        """Gets the rating_max_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The rating scale's maximum value, up to a maximum value of 10.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :return: The rating_max_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: int
        """
        return self._rating_max_value

    @rating_max_value.setter
    def rating_max_value(self, rating_max_value):
        """Sets the rating_max_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The rating scale's maximum value, up to a maximum value of 10.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :param rating_max_value: The rating_max_value of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: int
        """

        self._rating_max_value = rating_max_value

    @property
    def rating_min_label(self):
        """Gets the rating_min_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The low score label used for the `rating_min_value` field, up to 50 characters.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :return: The rating_min_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: str
        """
        return self._rating_min_label

    @rating_min_label.setter
    def rating_min_label(self, rating_min_label):
        """Sets the rating_min_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The low score label used for the `rating_min_value` field, up to 50 characters.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :param rating_min_label: The rating_min_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: str
        """

        self._rating_min_label = rating_min_label

    @property
    def rating_max_label(self):
        """Gets the rating_max_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501

        The high score label used for the `rating_max_value` field, up to 50 characters.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :return: The rating_max_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :rtype: str
        """
        return self._rating_max_label

    @rating_max_label.setter
    def rating_max_label(self, rating_max_label):
        """Sets the rating_max_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.

        The high score label used for the `rating_max_value` field, up to 50 characters.    This field only applies to the `rating_scale` survey.  # noqa: E501

        :param rating_max_label: The rating_max_label of this MeetingsmeetingIdsurveyCustomSurveyQuestions.  # noqa: E501
        :type: str
        """

        self._rating_max_label = rating_max_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingsmeetingIdsurveyCustomSurveyQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingsmeetingIdsurveyCustomSurveyQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
