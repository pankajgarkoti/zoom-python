# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersuserIdwebinarsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_multiple_devices': 'bool',
        'alternative_hosts': 'str',
        'alternative_host_update_polls': 'bool',
        'approval_type': 'int',
        'attendees_and_panelists_reminder_email_notification': 'UsersuserIdwebinarsSettingsAttendeesAndPanelistsReminderEmailNotification',
        'audio': 'str',
        'audio_conference_info': 'str',
        'authentication_domains': 'str',
        'authentication_option': 'str',
        'auto_recording': 'str',
        'close_registration': 'bool',
        'contact_email': 'str',
        'contact_name': 'str',
        'email_language': 'str',
        'enforce_login': 'bool',
        'enforce_login_domains': 'str',
        'follow_up_absentees_email_notification': 'UsersuserIdwebinarsSettingsFollowUpAbsenteesEmailNotification',
        'follow_up_attendees_email_notification': 'UsersuserIdwebinarsSettingsFollowUpAttendeesEmailNotification',
        'global_dial_in_countries': 'list[str]',
        'hd_video': 'bool',
        'hd_video_for_attendees': 'bool',
        'host_video': 'bool',
        'language_interpretation': 'UsersuserIdwebinarsSettingsLanguageInterpretation',
        'sign_language_interpretation': 'UsersuserIdwebinarsSettingsSignLanguageInterpretation',
        'panelist_authentication': 'bool',
        'meeting_authentication': 'bool',
        'add_watermark': 'bool',
        'add_audio_watermark': 'bool',
        'on_demand': 'bool',
        'panelists_invitation_email_notification': 'bool',
        'panelists_video': 'bool',
        'post_webinar_survey': 'bool',
        'practice_session': 'bool',
        'question_and_answer': 'UsersuserIdwebinarsSettingsQuestionAndAnswer',
        'registrants_email_notification': 'bool',
        'registrants_restrict_number': 'int',
        'registration_type': 'int',
        'send_1080p_video_to_attendees': 'bool',
        'show_share_button': 'bool',
        'survey_url': 'str',
        'enable_session_branding': 'bool'
    }

    attribute_map = {
        'allow_multiple_devices': 'allow_multiple_devices',
        'alternative_hosts': 'alternative_hosts',
        'alternative_host_update_polls': 'alternative_host_update_polls',
        'approval_type': 'approval_type',
        'attendees_and_panelists_reminder_email_notification': 'attendees_and_panelists_reminder_email_notification',
        'audio': 'audio',
        'audio_conference_info': 'audio_conference_info',
        'authentication_domains': 'authentication_domains',
        'authentication_option': 'authentication_option',
        'auto_recording': 'auto_recording',
        'close_registration': 'close_registration',
        'contact_email': 'contact_email',
        'contact_name': 'contact_name',
        'email_language': 'email_language',
        'enforce_login': 'enforce_login',
        'enforce_login_domains': 'enforce_login_domains',
        'follow_up_absentees_email_notification': 'follow_up_absentees_email_notification',
        'follow_up_attendees_email_notification': 'follow_up_attendees_email_notification',
        'global_dial_in_countries': 'global_dial_in_countries',
        'hd_video': 'hd_video',
        'hd_video_for_attendees': 'hd_video_for_attendees',
        'host_video': 'host_video',
        'language_interpretation': 'language_interpretation',
        'sign_language_interpretation': 'sign_language_interpretation',
        'panelist_authentication': 'panelist_authentication',
        'meeting_authentication': 'meeting_authentication',
        'add_watermark': 'add_watermark',
        'add_audio_watermark': 'add_audio_watermark',
        'on_demand': 'on_demand',
        'panelists_invitation_email_notification': 'panelists_invitation_email_notification',
        'panelists_video': 'panelists_video',
        'post_webinar_survey': 'post_webinar_survey',
        'practice_session': 'practice_session',
        'question_and_answer': 'question_and_answer',
        'registrants_email_notification': 'registrants_email_notification',
        'registrants_restrict_number': 'registrants_restrict_number',
        'registration_type': 'registration_type',
        'send_1080p_video_to_attendees': 'send_1080p_video_to_attendees',
        'show_share_button': 'show_share_button',
        'survey_url': 'survey_url',
        'enable_session_branding': 'enable_session_branding'
    }

    def __init__(self, allow_multiple_devices=None, alternative_hosts=None, alternative_host_update_polls=None, approval_type=Approval_typeEnum._2, attendees_and_panelists_reminder_email_notification=None, audio='both', audio_conference_info=None, authentication_domains=None, authentication_option=None, auto_recording='none', close_registration=None, contact_email=None, contact_name=None, email_language=None, enforce_login=None, enforce_login_domains=None, follow_up_absentees_email_notification=None, follow_up_attendees_email_notification=None, global_dial_in_countries=None, hd_video=False, hd_video_for_attendees=False, host_video=None, language_interpretation=None, sign_language_interpretation=None, panelist_authentication=None, meeting_authentication=None, add_watermark=None, add_audio_watermark=None, on_demand=False, panelists_invitation_email_notification=None, panelists_video=None, post_webinar_survey=None, practice_session=False, question_and_answer=None, registrants_email_notification=None, registrants_restrict_number=0, registration_type=Registration_typeEnum._1, send_1080p_video_to_attendees=False, show_share_button=None, survey_url=None, enable_session_branding=None):  # noqa: E501
        """UsersuserIdwebinarsSettings - a model defined in Swagger"""  # noqa: E501
        self._allow_multiple_devices = None
        self._alternative_hosts = None
        self._alternative_host_update_polls = None
        self._approval_type = None
        self._attendees_and_panelists_reminder_email_notification = None
        self._audio = None
        self._audio_conference_info = None
        self._authentication_domains = None
        self._authentication_option = None
        self._auto_recording = None
        self._close_registration = None
        self._contact_email = None
        self._contact_name = None
        self._email_language = None
        self._enforce_login = None
        self._enforce_login_domains = None
        self._follow_up_absentees_email_notification = None
        self._follow_up_attendees_email_notification = None
        self._global_dial_in_countries = None
        self._hd_video = None
        self._hd_video_for_attendees = None
        self._host_video = None
        self._language_interpretation = None
        self._sign_language_interpretation = None
        self._panelist_authentication = None
        self._meeting_authentication = None
        self._add_watermark = None
        self._add_audio_watermark = None
        self._on_demand = None
        self._panelists_invitation_email_notification = None
        self._panelists_video = None
        self._post_webinar_survey = None
        self._practice_session = None
        self._question_and_answer = None
        self._registrants_email_notification = None
        self._registrants_restrict_number = None
        self._registration_type = None
        self._send_1080p_video_to_attendees = None
        self._show_share_button = None
        self._survey_url = None
        self._enable_session_branding = None
        self.discriminator = None
        if allow_multiple_devices is not None:
            self.allow_multiple_devices = allow_multiple_devices
        if alternative_hosts is not None:
            self.alternative_hosts = alternative_hosts
        if alternative_host_update_polls is not None:
            self.alternative_host_update_polls = alternative_host_update_polls
        if approval_type is not None:
            self.approval_type = approval_type
        if attendees_and_panelists_reminder_email_notification is not None:
            self.attendees_and_panelists_reminder_email_notification = attendees_and_panelists_reminder_email_notification
        if audio is not None:
            self.audio = audio
        if audio_conference_info is not None:
            self.audio_conference_info = audio_conference_info
        if authentication_domains is not None:
            self.authentication_domains = authentication_domains
        if authentication_option is not None:
            self.authentication_option = authentication_option
        if auto_recording is not None:
            self.auto_recording = auto_recording
        if close_registration is not None:
            self.close_registration = close_registration
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_name is not None:
            self.contact_name = contact_name
        if email_language is not None:
            self.email_language = email_language
        if enforce_login is not None:
            self.enforce_login = enforce_login
        if enforce_login_domains is not None:
            self.enforce_login_domains = enforce_login_domains
        if follow_up_absentees_email_notification is not None:
            self.follow_up_absentees_email_notification = follow_up_absentees_email_notification
        if follow_up_attendees_email_notification is not None:
            self.follow_up_attendees_email_notification = follow_up_attendees_email_notification
        if global_dial_in_countries is not None:
            self.global_dial_in_countries = global_dial_in_countries
        if hd_video is not None:
            self.hd_video = hd_video
        if hd_video_for_attendees is not None:
            self.hd_video_for_attendees = hd_video_for_attendees
        if host_video is not None:
            self.host_video = host_video
        if language_interpretation is not None:
            self.language_interpretation = language_interpretation
        if sign_language_interpretation is not None:
            self.sign_language_interpretation = sign_language_interpretation
        if panelist_authentication is not None:
            self.panelist_authentication = panelist_authentication
        if meeting_authentication is not None:
            self.meeting_authentication = meeting_authentication
        if add_watermark is not None:
            self.add_watermark = add_watermark
        if add_audio_watermark is not None:
            self.add_audio_watermark = add_audio_watermark
        if on_demand is not None:
            self.on_demand = on_demand
        if panelists_invitation_email_notification is not None:
            self.panelists_invitation_email_notification = panelists_invitation_email_notification
        if panelists_video is not None:
            self.panelists_video = panelists_video
        if post_webinar_survey is not None:
            self.post_webinar_survey = post_webinar_survey
        if practice_session is not None:
            self.practice_session = practice_session
        if question_and_answer is not None:
            self.question_and_answer = question_and_answer
        if registrants_email_notification is not None:
            self.registrants_email_notification = registrants_email_notification
        if registrants_restrict_number is not None:
            self.registrants_restrict_number = registrants_restrict_number
        if registration_type is not None:
            self.registration_type = registration_type
        if send_1080p_video_to_attendees is not None:
            self.send_1080p_video_to_attendees = send_1080p_video_to_attendees
        if show_share_button is not None:
            self.show_share_button = show_share_button
        if survey_url is not None:
            self.survey_url = survey_url
        if enable_session_branding is not None:
            self.enable_session_branding = enable_session_branding

    @property
    def allow_multiple_devices(self):
        """Gets the allow_multiple_devices of this UsersuserIdwebinarsSettings.  # noqa: E501

        Allow attendees to join from multiple devices.  # noqa: E501

        :return: The allow_multiple_devices of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_devices

    @allow_multiple_devices.setter
    def allow_multiple_devices(self, allow_multiple_devices):
        """Sets the allow_multiple_devices of this UsersuserIdwebinarsSettings.

        Allow attendees to join from multiple devices.  # noqa: E501

        :param allow_multiple_devices: The allow_multiple_devices of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_devices = allow_multiple_devices

    @property
    def alternative_hosts(self):
        """Gets the alternative_hosts of this UsersuserIdwebinarsSettings.  # noqa: E501

        Alternative host emails or IDs. Multiple values separated by comma.  # noqa: E501

        :return: The alternative_hosts of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._alternative_hosts

    @alternative_hosts.setter
    def alternative_hosts(self, alternative_hosts):
        """Sets the alternative_hosts of this UsersuserIdwebinarsSettings.

        Alternative host emails or IDs. Multiple values separated by comma.  # noqa: E501

        :param alternative_hosts: The alternative_hosts of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._alternative_hosts = alternative_hosts

    @property
    def alternative_host_update_polls(self):
        """Gets the alternative_host_update_polls of this UsersuserIdwebinarsSettings.  # noqa: E501

        Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.  # noqa: E501

        :return: The alternative_host_update_polls of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._alternative_host_update_polls

    @alternative_host_update_polls.setter
    def alternative_host_update_polls(self, alternative_host_update_polls):
        """Sets the alternative_host_update_polls of this UsersuserIdwebinarsSettings.

        Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.  # noqa: E501

        :param alternative_host_update_polls: The alternative_host_update_polls of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._alternative_host_update_polls = alternative_host_update_polls

    @property
    def approval_type(self):
        """Gets the approval_type of this UsersuserIdwebinarsSettings.  # noqa: E501

        The default value is `2`. To enable registration required, set the approval type to `0` or `1`.  Values include:      `0` - Automatically approve.    `1` - Manually approve.    `2` - No registration required.  # noqa: E501

        :return: The approval_type of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: int
        """
        return self._approval_type

    @approval_type.setter
    def approval_type(self, approval_type):
        """Sets the approval_type of this UsersuserIdwebinarsSettings.

        The default value is `2`. To enable registration required, set the approval type to `0` or `1`.  Values include:      `0` - Automatically approve.    `1` - Manually approve.    `2` - No registration required.  # noqa: E501

        :param approval_type: The approval_type of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if approval_type not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_type` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_type, allowed_values)
            )

        self._approval_type = approval_type

    @property
    def attendees_and_panelists_reminder_email_notification(self):
        """Gets the attendees_and_panelists_reminder_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The attendees_and_panelists_reminder_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsAttendeesAndPanelistsReminderEmailNotification
        """
        return self._attendees_and_panelists_reminder_email_notification

    @attendees_and_panelists_reminder_email_notification.setter
    def attendees_and_panelists_reminder_email_notification(self, attendees_and_panelists_reminder_email_notification):
        """Sets the attendees_and_panelists_reminder_email_notification of this UsersuserIdwebinarsSettings.


        :param attendees_and_panelists_reminder_email_notification: The attendees_and_panelists_reminder_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsAttendeesAndPanelistsReminderEmailNotification
        """

        self._attendees_and_panelists_reminder_email_notification = attendees_and_panelists_reminder_email_notification

    @property
    def audio(self):
        """Gets the audio of this UsersuserIdwebinarsSettings.  # noqa: E501

        Determine how participants can join the audio portion of the meeting.(Not supported for simulive webinar.)  # noqa: E501

        :return: The audio of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this UsersuserIdwebinarsSettings.

        Determine how participants can join the audio portion of the meeting.(Not supported for simulive webinar.)  # noqa: E501

        :param audio: The audio of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["both", "telephony", "voip", "thirdParty"]  # noqa: E501
        if audio not in allowed_values:
            raise ValueError(
                "Invalid value for `audio` ({0}), must be one of {1}"  # noqa: E501
                .format(audio, allowed_values)
            )

        self._audio = audio

    @property
    def audio_conference_info(self):
        """Gets the audio_conference_info of this UsersuserIdwebinarsSettings.  # noqa: E501

        Third party audio conference info.  # noqa: E501

        :return: The audio_conference_info of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._audio_conference_info

    @audio_conference_info.setter
    def audio_conference_info(self, audio_conference_info):
        """Sets the audio_conference_info of this UsersuserIdwebinarsSettings.

        Third party audio conference info.  # noqa: E501

        :param audio_conference_info: The audio_conference_info of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._audio_conference_info = audio_conference_info

    @property
    def authentication_domains(self):
        """Gets the authentication_domains of this UsersuserIdwebinarsSettings.  # noqa: E501

        Meeting authentication domains. This option allows you to specify the rule so that Zoom users whose email address contains a certain domain can join the webinar. You can either provide multiple comma-separated domains, use a wildcard for listing domains, or use both methods.  # noqa: E501

        :return: The authentication_domains of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_domains

    @authentication_domains.setter
    def authentication_domains(self, authentication_domains):
        """Sets the authentication_domains of this UsersuserIdwebinarsSettings.

        Meeting authentication domains. This option allows you to specify the rule so that Zoom users whose email address contains a certain domain can join the webinar. You can either provide multiple comma-separated domains, use a wildcard for listing domains, or use both methods.  # noqa: E501

        :param authentication_domains: The authentication_domains of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._authentication_domains = authentication_domains

    @property
    def authentication_option(self):
        """Gets the authentication_option of this UsersuserIdwebinarsSettings.  # noqa: E501

        Specify the authentication type for users to join a Webinar with`meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API.  # noqa: E501

        :return: The authentication_option of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_option

    @authentication_option.setter
    def authentication_option(self, authentication_option):
        """Sets the authentication_option of this UsersuserIdwebinarsSettings.

        Specify the authentication type for users to join a Webinar with`meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API.  # noqa: E501

        :param authentication_option: The authentication_option of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._authentication_option = authentication_option

    @property
    def auto_recording(self):
        """Gets the auto_recording of this UsersuserIdwebinarsSettings.  # noqa: E501

        Automatic recording (not supported for simulive webinar):     `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :return: The auto_recording of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._auto_recording

    @auto_recording.setter
    def auto_recording(self, auto_recording):
        """Sets the auto_recording of this UsersuserIdwebinarsSettings.

        Automatic recording (not supported for simulive webinar):     `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.  # noqa: E501

        :param auto_recording: The auto_recording of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "cloud", "none"]  # noqa: E501
        if auto_recording not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_recording` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_recording, allowed_values)
            )

        self._auto_recording = auto_recording

    @property
    def close_registration(self):
        """Gets the close_registration of this UsersuserIdwebinarsSettings.  # noqa: E501

        Close registration after event date.  # noqa: E501

        :return: The close_registration of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._close_registration

    @close_registration.setter
    def close_registration(self, close_registration):
        """Sets the close_registration of this UsersuserIdwebinarsSettings.

        Close registration after event date.  # noqa: E501

        :param close_registration: The close_registration of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._close_registration = close_registration

    @property
    def contact_email(self):
        """Gets the contact_email of this UsersuserIdwebinarsSettings.  # noqa: E501

        Contact email for registration  # noqa: E501

        :return: The contact_email of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this UsersuserIdwebinarsSettings.

        Contact email for registration  # noqa: E501

        :param contact_email: The contact_email of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this UsersuserIdwebinarsSettings.  # noqa: E501

        Contact name for registration  # noqa: E501

        :return: The contact_name of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this UsersuserIdwebinarsSettings.

        Contact name for registration  # noqa: E501

        :param contact_name: The contact_name of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def email_language(self):
        """Gets the email_language of this UsersuserIdwebinarsSettings.  # noqa: E501

        Set the email language. `en-US`,`de-DE`,`es-ES`,`fr-FR`,`id-ID`,`jp-JP`,`nl-NL`,`pl-PL`,`pt-PT`,`ru-RU`,`tr-TR`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.  # noqa: E501

        :return: The email_language of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._email_language

    @email_language.setter
    def email_language(self, email_language):
        """Sets the email_language of this UsersuserIdwebinarsSettings.

        Set the email language. `en-US`,`de-DE`,`es-ES`,`fr-FR`,`id-ID`,`jp-JP`,`nl-NL`,`pl-PL`,`pt-PT`,`ru-RU`,`tr-TR`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.  # noqa: E501

        :param email_language: The email_language of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._email_language = email_language

    @property
    def enforce_login(self):
        """Gets the enforce_login of this UsersuserIdwebinarsSettings.  # noqa: E501

        Only signed-in users can join this meeting.   **This field is deprecated and will not be supported in future.**          Instead of this field, use the `meeting_authentication`, `authentication_option`, or `authentication_domains` fields to establish the authentication mechanism for this Webinar.   # noqa: E501

        :return: The enforce_login of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_login

    @enforce_login.setter
    def enforce_login(self, enforce_login):
        """Sets the enforce_login of this UsersuserIdwebinarsSettings.

        Only signed-in users can join this meeting.   **This field is deprecated and will not be supported in future.**          Instead of this field, use the `meeting_authentication`, `authentication_option`, or `authentication_domains` fields to establish the authentication mechanism for this Webinar.   # noqa: E501

        :param enforce_login: The enforce_login of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._enforce_login = enforce_login

    @property
    def enforce_login_domains(self):
        """Gets the enforce_login_domains of this UsersuserIdwebinarsSettings.  # noqa: E501

        Only signed-in users with specified domains can join meetings.  **This field is deprecated and will not be supported in future.**        Instead of this field, use the `authentication_domains` field for this webinar.   # noqa: E501

        :return: The enforce_login_domains of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._enforce_login_domains

    @enforce_login_domains.setter
    def enforce_login_domains(self, enforce_login_domains):
        """Sets the enforce_login_domains of this UsersuserIdwebinarsSettings.

        Only signed-in users with specified domains can join meetings.  **This field is deprecated and will not be supported in future.**        Instead of this field, use the `authentication_domains` field for this webinar.   # noqa: E501

        :param enforce_login_domains: The enforce_login_domains of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._enforce_login_domains = enforce_login_domains

    @property
    def follow_up_absentees_email_notification(self):
        """Gets the follow_up_absentees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The follow_up_absentees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsFollowUpAbsenteesEmailNotification
        """
        return self._follow_up_absentees_email_notification

    @follow_up_absentees_email_notification.setter
    def follow_up_absentees_email_notification(self, follow_up_absentees_email_notification):
        """Sets the follow_up_absentees_email_notification of this UsersuserIdwebinarsSettings.


        :param follow_up_absentees_email_notification: The follow_up_absentees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsFollowUpAbsenteesEmailNotification
        """

        self._follow_up_absentees_email_notification = follow_up_absentees_email_notification

    @property
    def follow_up_attendees_email_notification(self):
        """Gets the follow_up_attendees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The follow_up_attendees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsFollowUpAttendeesEmailNotification
        """
        return self._follow_up_attendees_email_notification

    @follow_up_attendees_email_notification.setter
    def follow_up_attendees_email_notification(self, follow_up_attendees_email_notification):
        """Sets the follow_up_attendees_email_notification of this UsersuserIdwebinarsSettings.


        :param follow_up_attendees_email_notification: The follow_up_attendees_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsFollowUpAttendeesEmailNotification
        """

        self._follow_up_attendees_email_notification = follow_up_attendees_email_notification

    @property
    def global_dial_in_countries(self):
        """Gets the global_dial_in_countries of this UsersuserIdwebinarsSettings.  # noqa: E501

        List of global dial-in countries  # noqa: E501

        :return: The global_dial_in_countries of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_dial_in_countries

    @global_dial_in_countries.setter
    def global_dial_in_countries(self, global_dial_in_countries):
        """Sets the global_dial_in_countries of this UsersuserIdwebinarsSettings.

        List of global dial-in countries  # noqa: E501

        :param global_dial_in_countries: The global_dial_in_countries of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: list[str]
        """

        self._global_dial_in_countries = global_dial_in_countries

    @property
    def hd_video(self):
        """Gets the hd_video of this UsersuserIdwebinarsSettings.  # noqa: E501

        Default to HD video.(Not supported for simulive webinar.)  # noqa: E501

        :return: The hd_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._hd_video

    @hd_video.setter
    def hd_video(self, hd_video):
        """Sets the hd_video of this UsersuserIdwebinarsSettings.

        Default to HD video.(Not supported for simulive webinar.)  # noqa: E501

        :param hd_video: The hd_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._hd_video = hd_video

    @property
    def hd_video_for_attendees(self):
        """Gets the hd_video_for_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501

        Whether HD video for attendees is enabled. This value defaults to `false`.(Not supported for simulive webinar.)  # noqa: E501

        :return: The hd_video_for_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._hd_video_for_attendees

    @hd_video_for_attendees.setter
    def hd_video_for_attendees(self, hd_video_for_attendees):
        """Sets the hd_video_for_attendees of this UsersuserIdwebinarsSettings.

        Whether HD video for attendees is enabled. This value defaults to `false`.(Not supported for simulive webinar.)  # noqa: E501

        :param hd_video_for_attendees: The hd_video_for_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._hd_video_for_attendees = hd_video_for_attendees

    @property
    def host_video(self):
        """Gets the host_video of this UsersuserIdwebinarsSettings.  # noqa: E501

        Start video when host joins webinar.(Not supported for simulive webinar.)  # noqa: E501

        :return: The host_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._host_video

    @host_video.setter
    def host_video(self, host_video):
        """Sets the host_video of this UsersuserIdwebinarsSettings.

        Start video when host joins webinar.(Not supported for simulive webinar.)  # noqa: E501

        :param host_video: The host_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._host_video = host_video

    @property
    def language_interpretation(self):
        """Gets the language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsLanguageInterpretation
        """
        return self._language_interpretation

    @language_interpretation.setter
    def language_interpretation(self, language_interpretation):
        """Sets the language_interpretation of this UsersuserIdwebinarsSettings.


        :param language_interpretation: The language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsLanguageInterpretation
        """

        self._language_interpretation = language_interpretation

    @property
    def sign_language_interpretation(self):
        """Gets the sign_language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The sign_language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsSignLanguageInterpretation
        """
        return self._sign_language_interpretation

    @sign_language_interpretation.setter
    def sign_language_interpretation(self, sign_language_interpretation):
        """Sets the sign_language_interpretation of this UsersuserIdwebinarsSettings.


        :param sign_language_interpretation: The sign_language_interpretation of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsSignLanguageInterpretation
        """

        self._sign_language_interpretation = sign_language_interpretation

    @property
    def panelist_authentication(self):
        """Gets the panelist_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501

        Require panelists to authenticate to join  # noqa: E501

        :return: The panelist_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._panelist_authentication

    @panelist_authentication.setter
    def panelist_authentication(self, panelist_authentication):
        """Sets the panelist_authentication of this UsersuserIdwebinarsSettings.

        Require panelists to authenticate to join  # noqa: E501

        :param panelist_authentication: The panelist_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._panelist_authentication = panelist_authentication

    @property
    def meeting_authentication(self):
        """Gets the meeting_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501

        Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.  # noqa: E501

        :return: The meeting_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_authentication

    @meeting_authentication.setter
    def meeting_authentication(self, meeting_authentication):
        """Sets the meeting_authentication of this UsersuserIdwebinarsSettings.

        Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.  # noqa: E501

        :param meeting_authentication: The meeting_authentication of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._meeting_authentication = meeting_authentication

    @property
    def add_watermark(self):
        """Gets the add_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501

        Add watermark that identifies the viewing participant. Not supported for simulive webinar.  # noqa: E501

        :return: The add_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._add_watermark

    @add_watermark.setter
    def add_watermark(self, add_watermark):
        """Sets the add_watermark of this UsersuserIdwebinarsSettings.

        Add watermark that identifies the viewing participant. Not supported for simulive webinar.  # noqa: E501

        :param add_watermark: The add_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._add_watermark = add_watermark

    @property
    def add_audio_watermark(self):
        """Gets the add_audio_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501

        Add audio watermark that identifies the participants. Not supported for simulive webinar.  # noqa: E501

        :return: The add_audio_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._add_audio_watermark

    @add_audio_watermark.setter
    def add_audio_watermark(self, add_audio_watermark):
        """Sets the add_audio_watermark of this UsersuserIdwebinarsSettings.

        Add audio watermark that identifies the participants. Not supported for simulive webinar.  # noqa: E501

        :param add_audio_watermark: The add_audio_watermark of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._add_audio_watermark = add_audio_watermark

    @property
    def on_demand(self):
        """Gets the on_demand of this UsersuserIdwebinarsSettings.  # noqa: E501

        Make the webinar on-demand. Not supported for simulive webinar.  # noqa: E501

        :return: The on_demand of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._on_demand

    @on_demand.setter
    def on_demand(self, on_demand):
        """Sets the on_demand of this UsersuserIdwebinarsSettings.

        Make the webinar on-demand. Not supported for simulive webinar.  # noqa: E501

        :param on_demand: The on_demand of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._on_demand = on_demand

    @property
    def panelists_invitation_email_notification(self):
        """Gets the panelists_invitation_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501

        Send invitation email to panelists. If `false`, do not send invitation email to panelists.  # noqa: E501

        :return: The panelists_invitation_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._panelists_invitation_email_notification

    @panelists_invitation_email_notification.setter
    def panelists_invitation_email_notification(self, panelists_invitation_email_notification):
        """Sets the panelists_invitation_email_notification of this UsersuserIdwebinarsSettings.

        Send invitation email to panelists. If `false`, do not send invitation email to panelists.  # noqa: E501

        :param panelists_invitation_email_notification: The panelists_invitation_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._panelists_invitation_email_notification = panelists_invitation_email_notification

    @property
    def panelists_video(self):
        """Gets the panelists_video of this UsersuserIdwebinarsSettings.  # noqa: E501

        Start video when panelists join webinar. Not supported for simulive webinar.  # noqa: E501

        :return: The panelists_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._panelists_video

    @panelists_video.setter
    def panelists_video(self, panelists_video):
        """Sets the panelists_video of this UsersuserIdwebinarsSettings.

        Start video when panelists join webinar. Not supported for simulive webinar.  # noqa: E501

        :param panelists_video: The panelists_video of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._panelists_video = panelists_video

    @property
    def post_webinar_survey(self):
        """Gets the post_webinar_survey of this UsersuserIdwebinarsSettings.  # noqa: E501

        Zoom will open a survey page in attendees' browsers after leaving the webinar  # noqa: E501

        :return: The post_webinar_survey of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._post_webinar_survey

    @post_webinar_survey.setter
    def post_webinar_survey(self, post_webinar_survey):
        """Sets the post_webinar_survey of this UsersuserIdwebinarsSettings.

        Zoom will open a survey page in attendees' browsers after leaving the webinar  # noqa: E501

        :param post_webinar_survey: The post_webinar_survey of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._post_webinar_survey = post_webinar_survey

    @property
    def practice_session(self):
        """Gets the practice_session of this UsersuserIdwebinarsSettings.  # noqa: E501

        Enable practice session.  # noqa: E501

        :return: The practice_session of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._practice_session

    @practice_session.setter
    def practice_session(self, practice_session):
        """Sets the practice_session of this UsersuserIdwebinarsSettings.

        Enable practice session.  # noqa: E501

        :param practice_session: The practice_session of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._practice_session = practice_session

    @property
    def question_and_answer(self):
        """Gets the question_and_answer of this UsersuserIdwebinarsSettings.  # noqa: E501


        :return: The question_and_answer of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: UsersuserIdwebinarsSettingsQuestionAndAnswer
        """
        return self._question_and_answer

    @question_and_answer.setter
    def question_and_answer(self, question_and_answer):
        """Sets the question_and_answer of this UsersuserIdwebinarsSettings.


        :param question_and_answer: The question_and_answer of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: UsersuserIdwebinarsSettingsQuestionAndAnswer
        """

        self._question_and_answer = question_and_answer

    @property
    def registrants_email_notification(self):
        """Gets the registrants_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501

        Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.  # noqa: E501

        :return: The registrants_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._registrants_email_notification

    @registrants_email_notification.setter
    def registrants_email_notification(self, registrants_email_notification):
        """Sets the registrants_email_notification of this UsersuserIdwebinarsSettings.

        Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.  # noqa: E501

        :param registrants_email_notification: The registrants_email_notification of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._registrants_email_notification = registrants_email_notification

    @property
    def registrants_restrict_number(self):
        """Gets the registrants_restrict_number of this UsersuserIdwebinarsSettings.  # noqa: E501

        Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.  # noqa: E501

        :return: The registrants_restrict_number of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: int
        """
        return self._registrants_restrict_number

    @registrants_restrict_number.setter
    def registrants_restrict_number(self, registrants_restrict_number):
        """Sets the registrants_restrict_number of this UsersuserIdwebinarsSettings.

        Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.  # noqa: E501

        :param registrants_restrict_number: The registrants_restrict_number of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: int
        """

        self._registrants_restrict_number = registrants_restrict_number

    @property
    def registration_type(self):
        """Gets the registration_type of this UsersuserIdwebinarsSettings.  # noqa: E501

        Registration types. Only used for recurring webinars with a fixed time.    `1` - Attendees register once and can attend any of the webinar sessions.    `2` - Attendees need to register for each session in order to attend.    `3` - Attendees register once and can choose one or more sessions to attend.  # noqa: E501

        :return: The registration_type of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: int
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this UsersuserIdwebinarsSettings.

        Registration types. Only used for recurring webinars with a fixed time.    `1` - Attendees register once and can attend any of the webinar sessions.    `2` - Attendees need to register for each session in order to attend.    `3` - Attendees register once and can choose one or more sessions to attend.  # noqa: E501

        :param registration_type: The registration_type of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def send_1080p_video_to_attendees(self):
        """Gets the send_1080p_video_to_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501

        Whether to always send 1080p video to attendees. This value defaults to `false`.(Not supported for simulive webinar.)  # noqa: E501

        :return: The send_1080p_video_to_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._send_1080p_video_to_attendees

    @send_1080p_video_to_attendees.setter
    def send_1080p_video_to_attendees(self, send_1080p_video_to_attendees):
        """Sets the send_1080p_video_to_attendees of this UsersuserIdwebinarsSettings.

        Whether to always send 1080p video to attendees. This value defaults to `false`.(Not supported for simulive webinar.)  # noqa: E501

        :param send_1080p_video_to_attendees: The send_1080p_video_to_attendees of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._send_1080p_video_to_attendees = send_1080p_video_to_attendees

    @property
    def show_share_button(self):
        """Gets the show_share_button of this UsersuserIdwebinarsSettings.  # noqa: E501

        Show social share buttons on the registration page.  # noqa: E501

        :return: The show_share_button of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_share_button

    @show_share_button.setter
    def show_share_button(self, show_share_button):
        """Sets the show_share_button of this UsersuserIdwebinarsSettings.

        Show social share buttons on the registration page.  # noqa: E501

        :param show_share_button: The show_share_button of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._show_share_button = show_share_button

    @property
    def survey_url(self):
        """Gets the survey_url of this UsersuserIdwebinarsSettings.  # noqa: E501

        Survey URL for post webinar survey  # noqa: E501

        :return: The survey_url of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: str
        """
        return self._survey_url

    @survey_url.setter
    def survey_url(self, survey_url):
        """Sets the survey_url of this UsersuserIdwebinarsSettings.

        Survey URL for post webinar survey  # noqa: E501

        :param survey_url: The survey_url of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: str
        """

        self._survey_url = survey_url

    @property
    def enable_session_branding(self):
        """Gets the enable_session_branding of this UsersuserIdwebinarsSettings.  # noqa: E501

        Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts set Virtual Background and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.  # noqa: E501

        :return: The enable_session_branding of this UsersuserIdwebinarsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_session_branding

    @enable_session_branding.setter
    def enable_session_branding(self, enable_session_branding):
        """Sets the enable_session_branding of this UsersuserIdwebinarsSettings.

        Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts set Virtual Background and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.  # noqa: E501

        :param enable_session_branding: The enable_session_branding of this UsersuserIdwebinarsSettings.  # noqa: E501
        :type: bool
        """

        self._enable_session_branding = enable_session_branding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersuserIdwebinarsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersuserIdwebinarsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
