# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Recording1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_recording': 'bool',
        'record_speaker_view': 'bool',
        'record_gallery_view': 'bool',
        'record_audio_file': 'bool',
        'save_chat_text': 'bool',
        'show_timestamp': 'bool',
        'recording_audio_transcript': 'bool',
        'cloud_recording_download': 'bool',
        'auto_delete_cmr': 'bool',
        'auto_delete_cmr_days': 'int'
    }

    attribute_map = {
        'cloud_recording': 'cloud_recording',
        'record_speaker_view': 'record_speaker_view',
        'record_gallery_view': 'record_gallery_view',
        'record_audio_file': 'record_audio_file',
        'save_chat_text': 'save_chat_text',
        'show_timestamp': 'show_timestamp',
        'recording_audio_transcript': 'recording_audio_transcript',
        'cloud_recording_download': 'cloud_recording_download',
        'auto_delete_cmr': 'auto_delete_cmr',
        'auto_delete_cmr_days': 'auto_delete_cmr_days'
    }

    def __init__(self, cloud_recording=None, record_speaker_view=None, record_gallery_view=None, record_audio_file=None, save_chat_text=None, show_timestamp=None, recording_audio_transcript=None, cloud_recording_download=None, auto_delete_cmr=None, auto_delete_cmr_days=None):  # noqa: E501
        """InlineResponse2002Recording1 - a model defined in Swagger"""  # noqa: E501
        self._cloud_recording = None
        self._record_speaker_view = None
        self._record_gallery_view = None
        self._record_audio_file = None
        self._save_chat_text = None
        self._show_timestamp = None
        self._recording_audio_transcript = None
        self._cloud_recording_download = None
        self._auto_delete_cmr = None
        self._auto_delete_cmr_days = None
        self.discriminator = None
        if cloud_recording is not None:
            self.cloud_recording = cloud_recording
        if record_speaker_view is not None:
            self.record_speaker_view = record_speaker_view
        if record_gallery_view is not None:
            self.record_gallery_view = record_gallery_view
        if record_audio_file is not None:
            self.record_audio_file = record_audio_file
        if save_chat_text is not None:
            self.save_chat_text = save_chat_text
        if show_timestamp is not None:
            self.show_timestamp = show_timestamp
        if recording_audio_transcript is not None:
            self.recording_audio_transcript = recording_audio_transcript
        if cloud_recording_download is not None:
            self.cloud_recording_download = cloud_recording_download
        if auto_delete_cmr is not None:
            self.auto_delete_cmr = auto_delete_cmr
        if auto_delete_cmr_days is not None:
            self.auto_delete_cmr_days = auto_delete_cmr_days

    @property
    def cloud_recording(self):
        """Gets the cloud_recording of this InlineResponse2002Recording1.  # noqa: E501

        Whether hosts can record and save meetings or webinars to the cloud.  # noqa: E501

        :return: The cloud_recording of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording

    @cloud_recording.setter
    def cloud_recording(self, cloud_recording):
        """Sets the cloud_recording of this InlineResponse2002Recording1.

        Whether hosts can record and save meetings or webinars to the cloud.  # noqa: E501

        :param cloud_recording: The cloud_recording of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._cloud_recording = cloud_recording

    @property
    def record_speaker_view(self):
        """Gets the record_speaker_view of this InlineResponse2002Recording1.  # noqa: E501

        Whether to enable recording the [**Active Speaker** view](https://support.zoom.us/hc/en-us/articles/360025561091-Recording-layouts#h_5c001397-33d6-47fb-bb40-1a3f68401581) during screen sharing.  # noqa: E501

        :return: The record_speaker_view of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._record_speaker_view

    @record_speaker_view.setter
    def record_speaker_view(self, record_speaker_view):
        """Sets the record_speaker_view of this InlineResponse2002Recording1.

        Whether to enable recording the [**Active Speaker** view](https://support.zoom.us/hc/en-us/articles/360025561091-Recording-layouts#h_5c001397-33d6-47fb-bb40-1a3f68401581) during screen sharing.  # noqa: E501

        :param record_speaker_view: The record_speaker_view of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._record_speaker_view = record_speaker_view

    @property
    def record_gallery_view(self):
        """Gets the record_gallery_view of this InlineResponse2002Recording1.  # noqa: E501

        Whether to enable recording the [**Gallery** view](https://support.zoom.us/hc/en-us/articles/360025561091-Recording-layouts#h_889dc825-9d79-4139-b65d-e719669c546b) during screen sharing.  # noqa: E501

        :return: The record_gallery_view of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._record_gallery_view

    @record_gallery_view.setter
    def record_gallery_view(self, record_gallery_view):
        """Sets the record_gallery_view of this InlineResponse2002Recording1.

        Whether to enable recording the [**Gallery** view](https://support.zoom.us/hc/en-us/articles/360025561091-Recording-layouts#h_889dc825-9d79-4139-b65d-e719669c546b) during screen sharing.  # noqa: E501

        :param record_gallery_view: The record_gallery_view of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._record_gallery_view = record_gallery_view

    @property
    def record_audio_file(self):
        """Gets the record_audio_file of this InlineResponse2002Recording1.  # noqa: E501

        Whether to record one audio file for all participants.  # noqa: E501

        :return: The record_audio_file of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._record_audio_file

    @record_audio_file.setter
    def record_audio_file(self, record_audio_file):
        """Sets the record_audio_file of this InlineResponse2002Recording1.

        Whether to record one audio file for all participants.  # noqa: E501

        :param record_audio_file: The record_audio_file of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._record_audio_file = record_audio_file

    @property
    def save_chat_text(self):
        """Gets the save_chat_text of this InlineResponse2002Recording1.  # noqa: E501

        Whether meeting and webinar chat texts are saved.  # noqa: E501

        :return: The save_chat_text of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._save_chat_text

    @save_chat_text.setter
    def save_chat_text(self, save_chat_text):
        """Sets the save_chat_text of this InlineResponse2002Recording1.

        Whether meeting and webinar chat texts are saved.  # noqa: E501

        :param save_chat_text: The save_chat_text of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._save_chat_text = save_chat_text

    @property
    def show_timestamp(self):
        """Gets the show_timestamp of this InlineResponse2002Recording1.  # noqa: E501

        Whether timestamps are added to all meeting and webinar recordings.  # noqa: E501

        :return: The show_timestamp of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._show_timestamp

    @show_timestamp.setter
    def show_timestamp(self, show_timestamp):
        """Sets the show_timestamp of this InlineResponse2002Recording1.

        Whether timestamps are added to all meeting and webinar recordings.  # noqa: E501

        :param show_timestamp: The show_timestamp of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._show_timestamp = show_timestamp

    @property
    def recording_audio_transcript(self):
        """Gets the recording_audio_transcript of this InlineResponse2002Recording1.  # noqa: E501

        Whether to enable the [**Audio transcription**](https://support.zoom.us/hc/en-us/articles/115004794983-Audio-transcription-for-cloud-recordings) feature.  # noqa: E501

        :return: The recording_audio_transcript of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._recording_audio_transcript

    @recording_audio_transcript.setter
    def recording_audio_transcript(self, recording_audio_transcript):
        """Sets the recording_audio_transcript of this InlineResponse2002Recording1.

        Whether to enable the [**Audio transcription**](https://support.zoom.us/hc/en-us/articles/115004794983-Audio-transcription-for-cloud-recordings) feature.  # noqa: E501

        :param recording_audio_transcript: The recording_audio_transcript of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._recording_audio_transcript = recording_audio_transcript

    @property
    def cloud_recording_download(self):
        """Gets the cloud_recording_download of this InlineResponse2002Recording1.  # noqa: E501

        Whether to enable the [**Cloud recording downloads**](https://support.zoom.us/hc/en-us/articles/360060240972-Managing-cloud-recording-settings) setting.  # noqa: E501

        :return: The cloud_recording_download of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording_download

    @cloud_recording_download.setter
    def cloud_recording_download(self, cloud_recording_download):
        """Sets the cloud_recording_download of this InlineResponse2002Recording1.

        Whether to enable the [**Cloud recording downloads**](https://support.zoom.us/hc/en-us/articles/360060240972-Managing-cloud-recording-settings) setting.  # noqa: E501

        :param cloud_recording_download: The cloud_recording_download of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._cloud_recording_download = cloud_recording_download

    @property
    def auto_delete_cmr(self):
        """Gets the auto_delete_cmr of this InlineResponse2002Recording1.  # noqa: E501

        Whether cloud recordings are automatically deleted after a specific number of days.  # noqa: E501

        :return: The auto_delete_cmr of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete_cmr

    @auto_delete_cmr.setter
    def auto_delete_cmr(self, auto_delete_cmr):
        """Sets the auto_delete_cmr of this InlineResponse2002Recording1.

        Whether cloud recordings are automatically deleted after a specific number of days.  # noqa: E501

        :param auto_delete_cmr: The auto_delete_cmr of this InlineResponse2002Recording1.  # noqa: E501
        :type: bool
        """

        self._auto_delete_cmr = auto_delete_cmr

    @property
    def auto_delete_cmr_days(self):
        """Gets the auto_delete_cmr_days of this InlineResponse2002Recording1.  # noqa: E501

        When the `auto_delete_cmr` value is `true`, the number of days before Zoom automatically deletes cloud recordings.  * `30` - 30 days.  * `60` - 60 days.  * `90` - 90 days.  * `120` - 120 days.  # noqa: E501

        :return: The auto_delete_cmr_days of this InlineResponse2002Recording1.  # noqa: E501
        :rtype: int
        """
        return self._auto_delete_cmr_days

    @auto_delete_cmr_days.setter
    def auto_delete_cmr_days(self, auto_delete_cmr_days):
        """Sets the auto_delete_cmr_days of this InlineResponse2002Recording1.

        When the `auto_delete_cmr` value is `true`, the number of days before Zoom automatically deletes cloud recordings.  * `30` - 30 days.  * `60` - 60 days.  * `90` - 90 days.  * `120` - 120 days.  # noqa: E501

        :param auto_delete_cmr_days: The auto_delete_cmr_days of this InlineResponse2002Recording1.  # noqa: E501
        :type: int
        """
        allowed_values = [30, 60, 90, 120]  # noqa: E501
        if auto_delete_cmr_days not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_delete_cmr_days` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_delete_cmr_days, allowed_values)
            )

        self._auto_delete_cmr_days = auto_delete_cmr_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Recording1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Recording1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
