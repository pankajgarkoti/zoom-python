# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20062Invoices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'invoice_charge_name': 'str',
        'invoice_number': 'str',
        'quantity': 'int',
        'start_date': 'date',
        'tax_amount': 'str',
        'total_amount': 'str'
    }

    attribute_map = {
        'end_date': 'end_date',
        'invoice_charge_name': 'invoice_charge_name',
        'invoice_number': 'invoice_number',
        'quantity': 'quantity',
        'start_date': 'start_date',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount'
    }

    def __init__(self, end_date=None, invoice_charge_name=None, invoice_number=None, quantity=None, start_date=None, tax_amount=None, total_amount=None):  # noqa: E501
        """InlineResponse20062Invoices - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._invoice_charge_name = None
        self._invoice_number = None
        self._quantity = None
        self._start_date = None
        self._tax_amount = None
        self._total_amount = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if invoice_charge_name is not None:
            self.invoice_charge_name = invoice_charge_name
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if quantity is not None:
            self.quantity = quantity
        if start_date is not None:
            self.start_date = start_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def end_date(self):
        """Gets the end_date of this InlineResponse20062Invoices.  # noqa: E501

        End date of the invoice period.  # noqa: E501

        :return: The end_date of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InlineResponse20062Invoices.

        End date of the invoice period.  # noqa: E501

        :param end_date: The end_date of this InlineResponse20062Invoices.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def invoice_charge_name(self):
        """Gets the invoice_charge_name of this InlineResponse20062Invoices.  # noqa: E501

        Name of the invoice.  # noqa: E501

        :return: The invoice_charge_name of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: str
        """
        return self._invoice_charge_name

    @invoice_charge_name.setter
    def invoice_charge_name(self, invoice_charge_name):
        """Sets the invoice_charge_name of this InlineResponse20062Invoices.

        Name of the invoice.  # noqa: E501

        :param invoice_charge_name: The invoice_charge_name of this InlineResponse20062Invoices.  # noqa: E501
        :type: str
        """

        self._invoice_charge_name = invoice_charge_name

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InlineResponse20062Invoices.  # noqa: E501

        Invoice number   # noqa: E501

        :return: The invoice_number of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InlineResponse20062Invoices.

        Invoice number   # noqa: E501

        :param invoice_number: The invoice_number of this InlineResponse20062Invoices.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def quantity(self):
        """Gets the quantity of this InlineResponse20062Invoices.  # noqa: E501

        Number of licenses bought.  # noqa: E501

        :return: The quantity of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InlineResponse20062Invoices.

        Number of licenses bought.  # noqa: E501

        :param quantity: The quantity of this InlineResponse20062Invoices.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def start_date(self):
        """Gets the start_date of this InlineResponse20062Invoices.  # noqa: E501

        Start date of the invoice period.  # noqa: E501

        :return: The start_date of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InlineResponse20062Invoices.

        Start date of the invoice period.  # noqa: E501

        :param start_date: The start_date of this InlineResponse20062Invoices.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this InlineResponse20062Invoices.  # noqa: E501

        Tax amount in the invoice.  # noqa: E501

        :return: The tax_amount of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this InlineResponse20062Invoices.

        Tax amount in the invoice.  # noqa: E501

        :param tax_amount: The tax_amount of this InlineResponse20062Invoices.  # noqa: E501
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this InlineResponse20062Invoices.  # noqa: E501

        Total billed amount in the invoice.  # noqa: E501

        :return: The total_amount of this InlineResponse20062Invoices.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InlineResponse20062Invoices.

        Total billed amount in the invoice.  # noqa: E501

        :param total_amount: The total_amount of this InlineResponse20062Invoices.  # noqa: E501
        :type: str
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20062Invoices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20062Invoices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
