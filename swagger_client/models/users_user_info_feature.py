# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersUserInfoFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zoom_phone': 'bool',
        'zoom_one_type': 'int'
    }

    attribute_map = {
        'zoom_phone': 'zoom_phone',
        'zoom_one_type': 'zoom_one_type'
    }

    def __init__(self, zoom_phone=None, zoom_one_type=None):  # noqa: E501
        """UsersUserInfoFeature - a model defined in Swagger"""  # noqa: E501
        self._zoom_phone = None
        self._zoom_one_type = None
        self.discriminator = None
        if zoom_phone is not None:
            self.zoom_phone = zoom_phone
        if zoom_one_type is not None:
            self.zoom_one_type = zoom_one_type

    @property
    def zoom_phone(self):
        """Gets the zoom_phone of this UsersUserInfoFeature.  # noqa: E501

        Whether the user has the **Zoom Phone** feature enabled.  # noqa: E501

        :return: The zoom_phone of this UsersUserInfoFeature.  # noqa: E501
        :rtype: bool
        """
        return self._zoom_phone

    @zoom_phone.setter
    def zoom_phone(self, zoom_phone):
        """Sets the zoom_phone of this UsersUserInfoFeature.

        Whether the user has the **Zoom Phone** feature enabled.  # noqa: E501

        :param zoom_phone: The zoom_phone of this UsersUserInfoFeature.  # noqa: E501
        :type: bool
        """

        self._zoom_phone = zoom_phone

    @property
    def zoom_one_type(self):
        """Gets the zoom_one_type of this UsersUserInfoFeature.  # noqa: E501

        The Zoom One plan option.    `16` - Zoom One Business Plus with US/CA Unlimited.    `32` - Zoom One Business Plus with UK/IR Unlimited.    `64` - Zoom One Business Plus with AU/NZ Unlimited.    `128` - Zoom One Business Plus with Japan Unlimited.    `33554432` - Zoom One Business Plus with Global Select.        The Zoom One plan option for Gov accounts:    `16` - Zoom One Business Plus.  # noqa: E501

        :return: The zoom_one_type of this UsersUserInfoFeature.  # noqa: E501
        :rtype: int
        """
        return self._zoom_one_type

    @zoom_one_type.setter
    def zoom_one_type(self, zoom_one_type):
        """Sets the zoom_one_type of this UsersUserInfoFeature.

        The Zoom One plan option.    `16` - Zoom One Business Plus with US/CA Unlimited.    `32` - Zoom One Business Plus with UK/IR Unlimited.    `64` - Zoom One Business Plus with AU/NZ Unlimited.    `128` - Zoom One Business Plus with Japan Unlimited.    `33554432` - Zoom One Business Plus with Global Select.        The Zoom One plan option for Gov accounts:    `16` - Zoom One Business Plus.  # noqa: E501

        :param zoom_one_type: The zoom_one_type of this UsersUserInfoFeature.  # noqa: E501
        :type: int
        """
        allowed_values = [16, 32, 64, 128, 33554432]  # noqa: E501
        if zoom_one_type not in allowed_values:
            raise ValueError(
                "Invalid value for `zoom_one_type` ({0}), must be one of {1}"  # noqa: E501
                .format(zoom_one_type, allowed_values)
            )

        self._zoom_one_type = zoom_one_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersUserInfoFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersUserInfoFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
