# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20054Participants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'user_id': 'str',
        'registrant_id': 'str',
        'user_email': 'str',
        'join_time': 'datetime',
        'leave_time': 'datetime',
        'duration': 'int',
        'failover': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_id': 'user_id',
        'registrant_id': 'registrant_id',
        'user_email': 'user_email',
        'join_time': 'join_time',
        'leave_time': 'leave_time',
        'duration': 'duration',
        'failover': 'failover',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, user_id=None, registrant_id=None, user_email=None, join_time=None, leave_time=None, duration=None, failover=None, status=None):  # noqa: E501
        """InlineResponse20054Participants - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._user_id = None
        self._registrant_id = None
        self._user_email = None
        self._join_time = None
        self._leave_time = None
        self._duration = None
        self._failover = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if registrant_id is not None:
            self.registrant_id = registrant_id
        if user_email is not None:
            self.user_email = user_email
        if join_time is not None:
            self.join_time = join_time
        if leave_time is not None:
            self.leave_time = leave_time
        if duration is not None:
            self.duration = duration
        if failover is not None:
            self.failover = failover
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this InlineResponse20054Participants.  # noqa: E501

        Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.  # noqa: E501

        :return: The id of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20054Participants.

        Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.  # noqa: E501

        :param id: The id of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20054Participants.  # noqa: E501

        Participant display name.  # noqa: E501

        :return: The name of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20054Participants.

        Participant display name.  # noqa: E501

        :param name: The name of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20054Participants.  # noqa: E501

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :return: The user_id of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20054Participants.

        Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def registrant_id(self):
        """Gets the registrant_id of this InlineResponse20054Participants.  # noqa: E501

        The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.   This field does not return if the `type` query parameter is the `live` value.  # noqa: E501

        :return: The registrant_id of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._registrant_id

    @registrant_id.setter
    def registrant_id(self, registrant_id):
        """Sets the registrant_id of this InlineResponse20054Participants.

        The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.   This field does not return if the `type` query parameter is the `live` value.  # noqa: E501

        :param registrant_id: The registrant_id of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """

        self._registrant_id = registrant_id

    @property
    def user_email(self):
        """Gets the user_email of this InlineResponse20054Participants.  # noqa: E501

        Email address of the user. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.  # noqa: E501

        :return: The user_email of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this InlineResponse20054Participants.

        Email address of the user. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.  # noqa: E501

        :param user_email: The user_email of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def join_time(self):
        """Gets the join_time of this InlineResponse20054Participants.  # noqa: E501

        Participant join time.  # noqa: E501

        :return: The join_time of this InlineResponse20054Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this InlineResponse20054Participants.

        Participant join time.  # noqa: E501

        :param join_time: The join_time of this InlineResponse20054Participants.  # noqa: E501
        :type: datetime
        """

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this InlineResponse20054Participants.  # noqa: E501

        Participant leave time.  # noqa: E501

        :return: The leave_time of this InlineResponse20054Participants.  # noqa: E501
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this InlineResponse20054Participants.

        Participant leave time.  # noqa: E501

        :param leave_time: The leave_time of this InlineResponse20054Participants.  # noqa: E501
        :type: datetime
        """

        self._leave_time = leave_time

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20054Participants.  # noqa: E501

        Participant duration.  # noqa: E501

        :return: The duration of this InlineResponse20054Participants.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20054Participants.

        Participant duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20054Participants.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def failover(self):
        """Gets the failover of this InlineResponse20054Participants.  # noqa: E501

        Indicates if failover happened during the meeting.  # noqa: E501

        :return: The failover of this InlineResponse20054Participants.  # noqa: E501
        :rtype: bool
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this InlineResponse20054Participants.

        Indicates if failover happened during the meeting.  # noqa: E501

        :param failover: The failover of this InlineResponse20054Participants.  # noqa: E501
        :type: bool
        """

        self._failover = failover

    @property
    def status(self):
        """Gets the status of this InlineResponse20054Participants.  # noqa: E501

        The participant's status.  * `in_meeting` - In a meeting.  * `in_waiting_room` - In a waiting room.  # noqa: E501

        :return: The status of this InlineResponse20054Participants.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20054Participants.

        The participant's status.  * `in_meeting` - In a meeting.  * `in_waiting_room` - In a waiting room.  # noqa: E501

        :param status: The status of this InlineResponse20054Participants.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_meeting", "in_waiting_room"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20054Participants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20054Participants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
