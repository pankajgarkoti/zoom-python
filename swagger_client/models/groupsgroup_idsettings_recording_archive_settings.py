# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupsgroupIdsettingsRecordingArchiveSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_file': 'bool',
        'cc_transcript_file': 'bool',
        'chat_file': 'bool',
        'chat_with_sender_email': 'bool',
        'video_file': 'bool'
    }

    attribute_map = {
        'audio_file': 'audio_file',
        'cc_transcript_file': 'cc_transcript_file',
        'chat_file': 'chat_file',
        'chat_with_sender_email': 'chat_with_sender_email',
        'video_file': 'video_file'
    }

    def __init__(self, audio_file=None, cc_transcript_file=None, chat_file=None, chat_with_sender_email=None, video_file=None):  # noqa: E501
        """GroupsgroupIdsettingsRecordingArchiveSettings - a model defined in Swagger"""  # noqa: E501
        self._audio_file = None
        self._cc_transcript_file = None
        self._chat_file = None
        self._chat_with_sender_email = None
        self._video_file = None
        self.discriminator = None
        if audio_file is not None:
            self.audio_file = audio_file
        if cc_transcript_file is not None:
            self.cc_transcript_file = cc_transcript_file
        if chat_file is not None:
            self.chat_file = chat_file
        if chat_with_sender_email is not None:
            self.chat_with_sender_email = chat_with_sender_email
        if video_file is not None:
            self.video_file = video_file

    @property
    def audio_file(self):
        """Gets the audio_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501

        Include in-meeting and/or in-webinar audio in the archive.  # noqa: E501

        :return: The audio_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._audio_file

    @audio_file.setter
    def audio_file(self, audio_file):
        """Sets the audio_file of this GroupsgroupIdsettingsRecordingArchiveSettings.

        Include in-meeting and/or in-webinar audio in the archive.  # noqa: E501

        :param audio_file: The audio_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :type: bool
        """

        self._audio_file = audio_file

    @property
    def cc_transcript_file(self):
        """Gets the cc_transcript_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501

        Include closed caption or transcript in the archive.  # noqa: E501

        :return: The cc_transcript_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._cc_transcript_file

    @cc_transcript_file.setter
    def cc_transcript_file(self, cc_transcript_file):
        """Sets the cc_transcript_file of this GroupsgroupIdsettingsRecordingArchiveSettings.

        Include closed caption or transcript in the archive.  # noqa: E501

        :param cc_transcript_file: The cc_transcript_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :type: bool
        """

        self._cc_transcript_file = cc_transcript_file

    @property
    def chat_file(self):
        """Gets the chat_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501

        Include in-meeting chat in the archive.  # noqa: E501

        :return: The chat_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._chat_file

    @chat_file.setter
    def chat_file(self, chat_file):
        """Sets the chat_file of this GroupsgroupIdsettingsRecordingArchiveSettings.

        Include in-meeting chat in the archive.  # noqa: E501

        :param chat_file: The chat_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :type: bool
        """

        self._chat_file = chat_file

    @property
    def chat_with_sender_email(self):
        """Gets the chat_with_sender_email of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501

        Include user email in in-meeting chat file.  # noqa: E501

        :return: The chat_with_sender_email of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._chat_with_sender_email

    @chat_with_sender_email.setter
    def chat_with_sender_email(self, chat_with_sender_email):
        """Sets the chat_with_sender_email of this GroupsgroupIdsettingsRecordingArchiveSettings.

        Include user email in in-meeting chat file.  # noqa: E501

        :param chat_with_sender_email: The chat_with_sender_email of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :type: bool
        """

        self._chat_with_sender_email = chat_with_sender_email

    @property
    def video_file(self):
        """Gets the video_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501

        Include in-meeting and/or in-webinar video in the archive.  # noqa: E501

        :return: The video_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._video_file

    @video_file.setter
    def video_file(self, video_file):
        """Sets the video_file of this GroupsgroupIdsettingsRecordingArchiveSettings.

        Include in-meeting and/or in-webinar video in the archive.  # noqa: E501

        :param video_file: The video_file of this GroupsgroupIdsettingsRecordingArchiveSettings.  # noqa: E501
        :type: bool
        """

        self._video_file = video_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsgroupIdsettingsRecordingArchiveSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsgroupIdsettingsRecordingArchiveSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
