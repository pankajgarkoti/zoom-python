# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002SecuritySigninWithSso(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'require_sso_for_domains': 'bool',
        'domains': 'list[str]',
        'sso_bypass_users': 'list[InlineResponse2002SecuritySigninWithSsoSsoBypassUsers]'
    }

    attribute_map = {
        'enable': 'enable',
        'require_sso_for_domains': 'require_sso_for_domains',
        'domains': 'domains',
        'sso_bypass_users': 'sso_bypass_users'
    }

    def __init__(self, enable=None, require_sso_for_domains=None, domains=None, sso_bypass_users=None):  # noqa: E501
        """InlineResponse2002SecuritySigninWithSso - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._require_sso_for_domains = None
        self._domains = None
        self._sso_bypass_users = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if require_sso_for_domains is not None:
            self.require_sso_for_domains = require_sso_for_domains
        if domains is not None:
            self.domains = domains
        if sso_bypass_users is not None:
            self.sso_bypass_users = sso_bypass_users

    @property
    def enable(self):
        """Gets the enable of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501

        Whether to allow users to sign in with single sign-on (SSO). If enabling this, configure your account's SSO settings. This lets users sign in with SSO through your company's vanity URL.  # noqa: E501

        :return: The enable of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse2002SecuritySigninWithSso.

        Whether to allow users to sign in with single sign-on (SSO). If enabling this, configure your account's SSO settings. This lets users sign in with SSO through your company's vanity URL.  # noqa: E501

        :param enable: The enable of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def require_sso_for_domains(self):
        """Gets the require_sso_for_domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501

        Whether to require users to sign in with single sign-on (SSO) if their e-mail address belongs to one of the `domains`.  # noqa: E501

        :return: The require_sso_for_domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :rtype: bool
        """
        return self._require_sso_for_domains

    @require_sso_for_domains.setter
    def require_sso_for_domains(self, require_sso_for_domains):
        """Sets the require_sso_for_domains of this InlineResponse2002SecuritySigninWithSso.

        Whether to require users to sign in with single sign-on (SSO) if their e-mail address belongs to one of the `domains`.  # noqa: E501

        :param require_sso_for_domains: The require_sso_for_domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :type: bool
        """

        self._require_sso_for_domains = require_sso_for_domains

    @property
    def domains(self):
        """Gets the domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501

        Users on these domains must sign in with single sign-on (SSO).   # noqa: E501

        :return: The domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this InlineResponse2002SecuritySigninWithSso.

        Users on these domains must sign in with single sign-on (SSO).   # noqa: E501

        :param domains: The domains of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :type: list[str]
        """

        self._domains = domains

    @property
    def sso_bypass_users(self):
        """Gets the sso_bypass_users of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501

        The users can bypass SSO sign-in.  # noqa: E501

        :return: The sso_bypass_users of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :rtype: list[InlineResponse2002SecuritySigninWithSsoSsoBypassUsers]
        """
        return self._sso_bypass_users

    @sso_bypass_users.setter
    def sso_bypass_users(self, sso_bypass_users):
        """Sets the sso_bypass_users of this InlineResponse2002SecuritySigninWithSso.

        The users can bypass SSO sign-in.  # noqa: E501

        :param sso_bypass_users: The sso_bypass_users of this InlineResponse2002SecuritySigninWithSso.  # noqa: E501
        :type: list[InlineResponse2002SecuritySigninWithSsoSsoBypassUsers]
        """

        self._sso_bypass_users = sso_bypass_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002SecuritySigninWithSso, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002SecuritySigninWithSso):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
