# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'country_code': 'str',
        'country_name': 'str',
        'display_number': 'str',
        'number': 'str'
    }

    attribute_map = {
        'code': 'code',
        'country_code': 'country_code',
        'country_name': 'country_name',
        'display_number': 'display_number',
        'number': 'number'
    }

    def __init__(self, code=None, country_code=None, country_name=None, display_number=None, number=None):  # noqa: E501
        """InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._country_code = None
        self._country_name = None
        self._display_number = None
        self._number = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name
        if display_number is not None:
            self.display_number = display_number
        if number is not None:
            self.number = number

    @property
    def code(self):
        """Gets the code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501

        The phone number's [E.164 country calling code](https://en.wikipedia.org/wiki/List_of_country_calling_codes).  # noqa: E501

        :return: The code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.

        The phone number's [E.164 country calling code](https://en.wikipedia.org/wiki/List_of_country_calling_codes).  # noqa: E501

        :param code: The code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def country_code(self):
        """Gets the country_code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501

        The phone number's two letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).  # noqa: E501

        :return: The country_code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.

        The phone number's two letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).  # noqa: E501

        :param country_code: The country_code of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501

        The country name.  # noqa: E501

        :return: The country_name of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.

        The country name.  # noqa: E501

        :param country_name: The country_name of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def display_number(self):
        """Gets the display_number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501

        The phone number's display number.  # noqa: E501

        :return: The display_number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.

        The phone number's display number.  # noqa: E501

        :param display_number: The display_number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :type: str
        """

        self._display_number = display_number

    @property
    def number(self):
        """Gets the number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501

        The phone number.  # noqa: E501

        :return: The number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.

        The phone number.  # noqa: E501

        :param number: The number of this InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers.  # noqa: E501
        :type: str
        """

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002AudioConferencingTollFreeAndFeeBasedTollCallNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
