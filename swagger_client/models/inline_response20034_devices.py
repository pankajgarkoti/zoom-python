# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20034Devices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'device_name': 'str',
        'mac_address': 'str',
        'serial_number': 'str',
        'vendor': 'str',
        'model': 'str',
        'platform_os': 'str',
        'app_version': 'str',
        'tag': 'str',
        'enrolled_in_zdm': 'bool',
        'connected_to_zdm': 'bool',
        'room_id': 'str',
        'room_name': 'str',
        'device_type': 'int',
        'skd_version': 'str',
        'device_status': 'int',
        'last_online': 'str',
        'user_email': 'str'
    }

    attribute_map = {
        'device_id': 'device_id',
        'device_name': 'device_name',
        'mac_address': 'mac_address',
        'serial_number': 'serial_number',
        'vendor': 'vendor',
        'model': 'model',
        'platform_os': 'platform_os',
        'app_version': 'app_version',
        'tag': 'tag',
        'enrolled_in_zdm': 'enrolled_in_zdm',
        'connected_to_zdm': 'connected_to_zdm',
        'room_id': 'room_id',
        'room_name': 'room_name',
        'device_type': 'device_type',
        'skd_version': 'skd_version',
        'device_status': 'device_status',
        'last_online': 'last_online',
        'user_email': 'user_email'
    }

    def __init__(self, device_id=None, device_name=None, mac_address=None, serial_number=None, vendor=None, model=None, platform_os=None, app_version=None, tag=None, enrolled_in_zdm=None, connected_to_zdm=None, room_id=None, room_name=None, device_type=None, skd_version=None, device_status=None, last_online=None, user_email=None):  # noqa: E501
        """InlineResponse20034Devices - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._device_name = None
        self._mac_address = None
        self._serial_number = None
        self._vendor = None
        self._model = None
        self._platform_os = None
        self._app_version = None
        self._tag = None
        self._enrolled_in_zdm = None
        self._connected_to_zdm = None
        self._room_id = None
        self._room_name = None
        self._device_type = None
        self._skd_version = None
        self._device_status = None
        self._last_online = None
        self._user_email = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if mac_address is not None:
            self.mac_address = mac_address
        if serial_number is not None:
            self.serial_number = serial_number
        if vendor is not None:
            self.vendor = vendor
        if model is not None:
            self.model = model
        if platform_os is not None:
            self.platform_os = platform_os
        if app_version is not None:
            self.app_version = app_version
        if tag is not None:
            self.tag = tag
        if enrolled_in_zdm is not None:
            self.enrolled_in_zdm = enrolled_in_zdm
        if connected_to_zdm is not None:
            self.connected_to_zdm = connected_to_zdm
        if room_id is not None:
            self.room_id = room_id
        if room_name is not None:
            self.room_name = room_name
        if device_type is not None:
            self.device_type = device_type
        if skd_version is not None:
            self.skd_version = skd_version
        if device_status is not None:
            self.device_status = device_status
        if last_online is not None:
            self.last_online = last_online
        if user_email is not None:
            self.user_email = user_email

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse20034Devices.  # noqa: E501

        Unique identifier of the device.  # noqa: E501

        :return: The device_id of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse20034Devices.

        Unique identifier of the device.  # noqa: E501

        :param device_id: The device_id of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this InlineResponse20034Devices.  # noqa: E501

        The name of the device.  # noqa: E501

        :return: The device_name of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this InlineResponse20034Devices.

        The name of the device.  # noqa: E501

        :param device_name: The device_name of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def mac_address(self):
        """Gets the mac_address of this InlineResponse20034Devices.  # noqa: E501

        The mac address of the device.  # noqa: E501

        :return: The mac_address of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this InlineResponse20034Devices.

        The mac address of the device.  # noqa: E501

        :param mac_address: The mac_address of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def serial_number(self):
        """Gets the serial_number of this InlineResponse20034Devices.  # noqa: E501

        The device's serial number.  # noqa: E501

        :return: The serial_number of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InlineResponse20034Devices.

        The device's serial number.  # noqa: E501

        :param serial_number: The serial_number of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def vendor(self):
        """Gets the vendor of this InlineResponse20034Devices.  # noqa: E501

        The device's manufacturer.  # noqa: E501

        :return: The vendor of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this InlineResponse20034Devices.

        The device's manufacturer.  # noqa: E501

        :param vendor: The vendor of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def model(self):
        """Gets the model of this InlineResponse20034Devices.  # noqa: E501

        The device's model.  # noqa: E501

        :return: The model of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse20034Devices.

        The device's model.  # noqa: E501

        :param model: The model of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def platform_os(self):
        """Gets the platform_os of this InlineResponse20034Devices.  # noqa: E501

        The device's platform.  # noqa: E501

        :return: The platform_os of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._platform_os

    @platform_os.setter
    def platform_os(self, platform_os):
        """Sets the platform_os of this InlineResponse20034Devices.

        The device's platform.  # noqa: E501

        :param platform_os: The platform_os of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._platform_os = platform_os

    @property
    def app_version(self):
        """Gets the app_version of this InlineResponse20034Devices.  # noqa: E501

        App version of Zoom Rooms.  # noqa: E501

        :return: The app_version of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this InlineResponse20034Devices.

        App version of Zoom Rooms.  # noqa: E501

        :param app_version: The app_version of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def tag(self):
        """Gets the tag of this InlineResponse20034Devices.  # noqa: E501

        The name of the tag.  # noqa: E501

        :return: The tag of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this InlineResponse20034Devices.

        The name of the tag.  # noqa: E501

        :param tag: The tag of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def enrolled_in_zdm(self):
        """Gets the enrolled_in_zdm of this InlineResponse20034Devices.  # noqa: E501

        Whether the device enrolled in ZDM (Zoom Device Management).  # noqa: E501

        :return: The enrolled_in_zdm of this InlineResponse20034Devices.  # noqa: E501
        :rtype: bool
        """
        return self._enrolled_in_zdm

    @enrolled_in_zdm.setter
    def enrolled_in_zdm(self, enrolled_in_zdm):
        """Sets the enrolled_in_zdm of this InlineResponse20034Devices.

        Whether the device enrolled in ZDM (Zoom Device Management).  # noqa: E501

        :param enrolled_in_zdm: The enrolled_in_zdm of this InlineResponse20034Devices.  # noqa: E501
        :type: bool
        """

        self._enrolled_in_zdm = enrolled_in_zdm

    @property
    def connected_to_zdm(self):
        """Gets the connected_to_zdm of this InlineResponse20034Devices.  # noqa: E501

        Whether the device connected to ZDM (Zoom Device Management).  # noqa: E501

        :return: The connected_to_zdm of this InlineResponse20034Devices.  # noqa: E501
        :rtype: bool
        """
        return self._connected_to_zdm

    @connected_to_zdm.setter
    def connected_to_zdm(self, connected_to_zdm):
        """Sets the connected_to_zdm of this InlineResponse20034Devices.

        Whether the device connected to ZDM (Zoom Device Management).  # noqa: E501

        :param connected_to_zdm: The connected_to_zdm of this InlineResponse20034Devices.  # noqa: E501
        :type: bool
        """

        self._connected_to_zdm = connected_to_zdm

    @property
    def room_id(self):
        """Gets the room_id of this InlineResponse20034Devices.  # noqa: E501

        id of the Zoom Room.  # noqa: E501

        :return: The room_id of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this InlineResponse20034Devices.

        id of the Zoom Room.  # noqa: E501

        :param room_id: The room_id of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._room_id = room_id

    @property
    def room_name(self):
        """Gets the room_name of this InlineResponse20034Devices.  # noqa: E501

        Name of the Zoom Room.  # noqa: E501

        :return: The room_name of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this InlineResponse20034Devices.

        Name of the Zoom Room.  # noqa: E501

        :param room_name: The room_name of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def device_type(self):
        """Gets the device_type of this InlineResponse20034Devices.  # noqa: E501

        Filter devices by device type.     Device Type:    `-1` - All Zoom Room device(0,1,2,3,4,6).    `0` - Zoom Rooms Computer.    `1` - Zoom Rooms Controller.    `2` - Zoom Rooms Scheduling Display.    `3` - Zoom Rooms Control System.    `4` -  Zoom Rooms Whiteboard.    `5` - Zoom Phone Appliance.    `6` - Zoom Rooms Computer (with Controller).  # noqa: E501

        :return: The device_type of this InlineResponse20034Devices.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this InlineResponse20034Devices.

        Filter devices by device type.     Device Type:    `-1` - All Zoom Room device(0,1,2,3,4,6).    `0` - Zoom Rooms Computer.    `1` - Zoom Rooms Controller.    `2` - Zoom Rooms Scheduling Display.    `3` - Zoom Rooms Control System.    `4` -  Zoom Rooms Whiteboard.    `5` - Zoom Phone Appliance.    `6` - Zoom Rooms Computer (with Controller).  # noqa: E501

        :param device_type: The device_type of this InlineResponse20034Devices.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def skd_version(self):
        """Gets the skd_version of this InlineResponse20034Devices.  # noqa: E501

        The version of the SDK.  # noqa: E501

        :return: The skd_version of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._skd_version

    @skd_version.setter
    def skd_version(self, skd_version):
        """Sets the skd_version of this InlineResponse20034Devices.

        The version of the SDK.  # noqa: E501

        :param skd_version: The skd_version of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._skd_version = skd_version

    @property
    def device_status(self):
        """Gets the device_status of this InlineResponse20034Devices.  # noqa: E501

        Filter devices by status.      Device Status:    `0` - offline.    `1` - online.    `-1` - unlink  # noqa: E501

        :return: The device_status of this InlineResponse20034Devices.  # noqa: E501
        :rtype: int
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """Sets the device_status of this InlineResponse20034Devices.

        Filter devices by status.      Device Status:    `0` - offline.    `1` - online.    `-1` - unlink  # noqa: E501

        :param device_status: The device_status of this InlineResponse20034Devices.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 0, 1]  # noqa: E501
        if device_status not in allowed_values:
            raise ValueError(
                "Invalid value for `device_status` ({0}), must be one of {1}"  # noqa: E501
                .format(device_status, allowed_values)
            )

        self._device_status = device_status

    @property
    def last_online(self):
        """Gets the last_online of this InlineResponse20034Devices.  # noqa: E501

        The time when device was online last time.  # noqa: E501

        :return: The last_online of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._last_online

    @last_online.setter
    def last_online(self, last_online):
        """Sets the last_online of this InlineResponse20034Devices.

        The time when device was online last time.  # noqa: E501

        :param last_online: The last_online of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._last_online = last_online

    @property
    def user_email(self):
        """Gets the user_email of this InlineResponse20034Devices.  # noqa: E501

        The owner of the phone device  # noqa: E501

        :return: The user_email of this InlineResponse20034Devices.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this InlineResponse20034Devices.

        The owner of the phone device  # noqa: E501

        :param user_email: The user_email of this InlineResponse20034Devices.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20034Devices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20034Devices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
