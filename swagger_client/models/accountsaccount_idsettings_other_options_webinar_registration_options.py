# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_host_to_enable_join_info': 'bool',
        'allow_host_to_enable_social_share_buttons': 'bool',
        'enable_custom_questions': 'bool'
    }

    attribute_map = {
        'allow_host_to_enable_join_info': 'allow_host_to_enable_join_info',
        'allow_host_to_enable_social_share_buttons': 'allow_host_to_enable_social_share_buttons',
        'enable_custom_questions': 'enable_custom_questions'
    }

    def __init__(self, allow_host_to_enable_join_info=None, allow_host_to_enable_social_share_buttons=None, enable_custom_questions=None):  # noqa: E501
        """AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions - a model defined in Swagger"""  # noqa: E501
        self._allow_host_to_enable_join_info = None
        self._allow_host_to_enable_social_share_buttons = None
        self._enable_custom_questions = None
        self.discriminator = None
        if allow_host_to_enable_join_info is not None:
            self.allow_host_to_enable_join_info = allow_host_to_enable_join_info
        if allow_host_to_enable_social_share_buttons is not None:
            self.allow_host_to_enable_social_share_buttons = allow_host_to_enable_social_share_buttons
        if enable_custom_questions is not None:
            self.enable_custom_questions = enable_custom_questions

    @property
    def allow_host_to_enable_join_info(self):
        """Gets the allow_host_to_enable_join_info of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501

        Allow host to enable **Show join info on registration confirmation page**.  # noqa: E501

        :return: The allow_host_to_enable_join_info of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_to_enable_join_info

    @allow_host_to_enable_join_info.setter
    def allow_host_to_enable_join_info(self, allow_host_to_enable_join_info):
        """Sets the allow_host_to_enable_join_info of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.

        Allow host to enable **Show join info on registration confirmation page**.  # noqa: E501

        :param allow_host_to_enable_join_info: The allow_host_to_enable_join_info of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :type: bool
        """

        self._allow_host_to_enable_join_info = allow_host_to_enable_join_info

    @property
    def allow_host_to_enable_social_share_buttons(self):
        """Gets the allow_host_to_enable_social_share_buttons of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501

        Allow host to enable **Show social share buttons on registration page**.  # noqa: E501

        :return: The allow_host_to_enable_social_share_buttons of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_to_enable_social_share_buttons

    @allow_host_to_enable_social_share_buttons.setter
    def allow_host_to_enable_social_share_buttons(self, allow_host_to_enable_social_share_buttons):
        """Sets the allow_host_to_enable_social_share_buttons of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.

        Allow host to enable **Show social share buttons on registration page**.  # noqa: E501

        :param allow_host_to_enable_social_share_buttons: The allow_host_to_enable_social_share_buttons of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :type: bool
        """

        self._allow_host_to_enable_social_share_buttons = allow_host_to_enable_social_share_buttons

    @property
    def enable_custom_questions(self):
        """Gets the enable_custom_questions of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501

        Enable custom questions.  # noqa: E501

        :return: The enable_custom_questions of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_custom_questions

    @enable_custom_questions.setter
    def enable_custom_questions(self, enable_custom_questions):
        """Sets the enable_custom_questions of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.

        Enable custom questions.  # noqa: E501

        :param enable_custom_questions: The enable_custom_questions of this AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions.  # noqa: E501
        :type: bool
        """

        self._enable_custom_questions = enable_custom_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsOtherOptionsWebinarRegistrationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
