# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20114TrackingFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'value': 'str',
        'visible': 'bool'
    }

    attribute_map = {
        'field': 'field',
        'value': 'value',
        'visible': 'visible'
    }

    def __init__(self, field=None, value=None, visible=None):  # noqa: E501
        """InlineResponse20114TrackingFields - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._value = None
        self._visible = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if value is not None:
            self.value = value
        if visible is not None:
            self.visible = visible

    @property
    def field(self):
        """Gets the field of this InlineResponse20114TrackingFields.  # noqa: E501

        The tracking field's label.  # noqa: E501

        :return: The field of this InlineResponse20114TrackingFields.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this InlineResponse20114TrackingFields.

        The tracking field's label.  # noqa: E501

        :param field: The field of this InlineResponse20114TrackingFields.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def value(self):
        """Gets the value of this InlineResponse20114TrackingFields.  # noqa: E501

        The tracking field's value.  # noqa: E501

        :return: The value of this InlineResponse20114TrackingFields.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse20114TrackingFields.

        The tracking field's value.  # noqa: E501

        :param value: The value of this InlineResponse20114TrackingFields.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def visible(self):
        """Gets the visible of this InlineResponse20114TrackingFields.  # noqa: E501

        Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.  `true`: Tracking field is visible.       `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.   # noqa: E501

        :return: The visible of this InlineResponse20114TrackingFields.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this InlineResponse20114TrackingFields.

        Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.  `true`: Tracking field is visible.       `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.   # noqa: E501

        :param visible: The visible of this InlineResponse20114TrackingFields.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20114TrackingFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20114TrackingFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
