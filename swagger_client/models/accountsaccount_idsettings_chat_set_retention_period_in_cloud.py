# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsaccountIdsettingsChatSetRetentionPeriodInCloud(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'retention_period_of_direct_messages_and_group_conversation': 'str',
        'retention_period_of_channels': 'str'
    }

    attribute_map = {
        'enable': 'enable',
        'retention_period_of_direct_messages_and_group_conversation': 'retention_period_of_direct_messages_and_group_conversation',
        'retention_period_of_channels': 'retention_period_of_channels'
    }

    def __init__(self, enable=None, retention_period_of_direct_messages_and_group_conversation=None, retention_period_of_channels=None):  # noqa: E501
        """AccountsaccountIdsettingsChatSetRetentionPeriodInCloud - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._retention_period_of_direct_messages_and_group_conversation = None
        self._retention_period_of_channels = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if retention_period_of_direct_messages_and_group_conversation is not None:
            self.retention_period_of_direct_messages_and_group_conversation = retention_period_of_direct_messages_and_group_conversation
        if retention_period_of_channels is not None:
            self.retention_period_of_channels = retention_period_of_channels

    @property
    def enable(self):
        """Gets the enable of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501

        By default, messages and files are stored in Zoom's cloud. Enable this setting to specify when they are deleted. When retention is disabled, messages sent by offline users can be received within 7 days before they are deleted.  # noqa: E501

        :return: The enable of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.

        By default, messages and files are stored in Zoom's cloud. Enable this setting to specify when they are deleted. When retention is disabled, messages sent by offline users can be received within 7 days before they are deleted.  # noqa: E501

        :param enable: The enable of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def retention_period_of_direct_messages_and_group_conversation(self):
        """Gets the retention_period_of_direct_messages_and_group_conversation of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501

        Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month, 'd' - day  # noqa: E501

        :return: The retention_period_of_direct_messages_and_group_conversation of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :rtype: str
        """
        return self._retention_period_of_direct_messages_and_group_conversation

    @retention_period_of_direct_messages_and_group_conversation.setter
    def retention_period_of_direct_messages_and_group_conversation(self, retention_period_of_direct_messages_and_group_conversation):
        """Sets the retention_period_of_direct_messages_and_group_conversation of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.

        Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month, 'd' - day  # noqa: E501

        :param retention_period_of_direct_messages_and_group_conversation: The retention_period_of_direct_messages_and_group_conversation of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :type: str
        """

        self._retention_period_of_direct_messages_and_group_conversation = retention_period_of_direct_messages_and_group_conversation

    @property
    def retention_period_of_channels(self):
        """Gets the retention_period_of_channels of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501

        Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day  # noqa: E501

        :return: The retention_period_of_channels of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :rtype: str
        """
        return self._retention_period_of_channels

    @retention_period_of_channels.setter
    def retention_period_of_channels(self, retention_period_of_channels):
        """Sets the retention_period_of_channels of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.

        Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day  # noqa: E501

        :param retention_period_of_channels: The retention_period_of_channels of this AccountsaccountIdsettingsChatSetRetentionPeriodInCloud.  # noqa: E501
        :type: str
        """

        self._retention_period_of_channels = retention_period_of_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsaccountIdsettingsChatSetRetentionPeriodInCloud, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsaccountIdsettingsChatSetRetentionPeriodInCloud):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
