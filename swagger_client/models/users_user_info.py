# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersUserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'display_name': 'str',
        'password': 'str',
        'type': 'int',
        'feature': 'UsersUserInfoFeature',
        'plan_united_type': 'str'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'display_name': 'display_name',
        'password': 'password',
        'type': 'type',
        'feature': 'feature',
        'plan_united_type': 'plan_united_type'
    }

    def __init__(self, email=None, first_name=None, last_name=None, display_name=None, password=None, type=None, feature=None, plan_united_type=None):  # noqa: E501
        """UsersUserInfo - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._password = None
        self._type = None
        self._feature = None
        self._plan_united_type = None
        self.discriminator = None
        self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if password is not None:
            self.password = password
        self.type = type
        if feature is not None:
            self.feature = feature
        if plan_united_type is not None:
            self.plan_united_type = plan_united_type

    @property
    def email(self):
        """Gets the email of this UsersUserInfo.  # noqa: E501

        User email address.  # noqa: E501

        :return: The email of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersUserInfo.

        User email address.  # noqa: E501

        :param email: The email of this UsersUserInfo.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UsersUserInfo.  # noqa: E501

        The user's first name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :return: The first_name of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersUserInfo.

        The user's first name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :param first_name: The first_name of this UsersUserInfo.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersUserInfo.  # noqa: E501

        The user's last name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :return: The last_name of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersUserInfo.

        The user's last name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :param last_name: The last_name of this UsersUserInfo.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this UsersUserInfo.  # noqa: E501

        The user's display name. Cannot contain more than 10 Chinese characters.  # noqa: E501

        :return: The display_name of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UsersUserInfo.

        The user's display name. Cannot contain more than 10 Chinese characters.  # noqa: E501

        :param display_name: The display_name of this UsersUserInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def password(self):
        """Gets the password of this UsersUserInfo.  # noqa: E501

        User password. Only used for the &quot;autoCreate&quot; function. The password has to have a minimum of 8 characters and maximum of 32 characters. By default (basic requirement), password must have at least one letter (a, b, c..), at least one number (1, 2, 3...) and include both uppercase and lowercase letters. It should not contain only one identical character repeatedly ('11111111' or 'aaaaaaaa') and it cannot contain consecutive characters ('12345678' or 'abcdefgh').  **Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API and referring to the `password_requirement` field present in the `security` object.  # noqa: E501

        :return: The password of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UsersUserInfo.

        User password. Only used for the &quot;autoCreate&quot; function. The password has to have a minimum of 8 characters and maximum of 32 characters. By default (basic requirement), password must have at least one letter (a, b, c..), at least one number (1, 2, 3...) and include both uppercase and lowercase letters. It should not contain only one identical character repeatedly ('11111111' or 'aaaaaaaa') and it cannot contain consecutive characters ('12345678' or 'abcdefgh').  **Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API and referring to the `password_requirement` field present in the `security` object.  # noqa: E501

        :param password: The password of this UsersUserInfo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def type(self):
        """Gets the type of this UsersUserInfo.  # noqa: E501

        User type.    `1` - Basic.    `2` - Licensed.    `99` - None (this can only be set with `ssoCreate`).  # noqa: E501

        :return: The type of this UsersUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UsersUserInfo.

        User type.    `1` - Basic.    `2` - Licensed.    `99` - None (this can only be set with `ssoCreate`).  # noqa: E501

        :param type: The type of this UsersUserInfo.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 99]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def feature(self):
        """Gets the feature of this UsersUserInfo.  # noqa: E501


        :return: The feature of this UsersUserInfo.  # noqa: E501
        :rtype: UsersUserInfoFeature
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this UsersUserInfo.


        :param feature: The feature of this UsersUserInfo.  # noqa: E501
        :type: UsersUserInfoFeature
        """

        self._feature = feature

    @property
    def plan_united_type(self):
        """Gets the plan_united_type of this UsersUserInfo.  # noqa: E501

        The Zoom United type. The license option.  * `1` - Zoom United Pro-United with US/CA Unlimited.  * `2` - Zoom United Pro-United with UK/IR Unlimited.  * `4` - Zoom United Pro-United with AU/NZ Unlimited.  * `8` - Zoom United Pro-United with Global Select.  * `16` - Zoom United Pro-United with Zoom Phone Pro.  * `32` - Zoom United Biz-United with US/CA Unlimited.  * `64` - Zoom United Biz-United with UK/IR Unlimited.  * `128` - Zoom United Biz-United with AU/NZ Unlimited.  * `256` - Zoom United Biz-United with Global Select.  * `512` - Zoom United Biz-United with Zoom Phone Pro.  * `1024` - Zoom United Ent-United with US/CA Unlimited.  * `2048` - Zoom United Ent-United with UK/IR Unlimited.  * `4096` - Zoom United Ent-United with AU/NZ Unlimited.  * `8192` - Zoom United Ent-United with Global Select.  * `16384` - Zoom United Ent-United with Zoom Phone Pro.  * `32768` - Zoom United Pro-United with JP Unlimited.  * `65536` - Zoom United Biz-United with JP Unlimited.  * `131072` - Zoom United Ent-United with JP Unlimited.  # noqa: E501

        :return: The plan_united_type of this UsersUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._plan_united_type

    @plan_united_type.setter
    def plan_united_type(self, plan_united_type):
        """Sets the plan_united_type of this UsersUserInfo.

        The Zoom United type. The license option.  * `1` - Zoom United Pro-United with US/CA Unlimited.  * `2` - Zoom United Pro-United with UK/IR Unlimited.  * `4` - Zoom United Pro-United with AU/NZ Unlimited.  * `8` - Zoom United Pro-United with Global Select.  * `16` - Zoom United Pro-United with Zoom Phone Pro.  * `32` - Zoom United Biz-United with US/CA Unlimited.  * `64` - Zoom United Biz-United with UK/IR Unlimited.  * `128` - Zoom United Biz-United with AU/NZ Unlimited.  * `256` - Zoom United Biz-United with Global Select.  * `512` - Zoom United Biz-United with Zoom Phone Pro.  * `1024` - Zoom United Ent-United with US/CA Unlimited.  * `2048` - Zoom United Ent-United with UK/IR Unlimited.  * `4096` - Zoom United Ent-United with AU/NZ Unlimited.  * `8192` - Zoom United Ent-United with Global Select.  * `16384` - Zoom United Ent-United with Zoom Phone Pro.  * `32768` - Zoom United Pro-United with JP Unlimited.  * `65536` - Zoom United Biz-United with JP Unlimited.  * `131072` - Zoom United Ent-United with JP Unlimited.  # noqa: E501

        :param plan_united_type: The plan_united_type of this UsersUserInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384", "32768", "65536", "131072"]  # noqa: E501
        if plan_united_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_united_type` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_united_type, allowed_values)
            )

        self._plan_united_type = plan_united_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersUserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersUserInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
