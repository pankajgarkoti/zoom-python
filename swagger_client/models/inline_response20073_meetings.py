# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20073Meetings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_keys': 'list[InlineResponse20073CustomKeys]',
        'duration': 'int',
        'end_time': 'datetime',
        'id': 'int',
        'participants_count': 'int',
        'session_key': 'str',
        'source': 'str',
        'start_time': 'datetime',
        'topic': 'str',
        'total_minutes': 'int',
        'type': 'int',
        'user_email': 'str',
        'user_name': 'str',
        'uuid': 'str',
        'schedule_time': 'str',
        'join_waiting_room_time': 'str',
        'join_time': 'str',
        'leave_time': 'str',
        'host_organization': 'str',
        'host_name': 'str',
        'has_screen_share': 'bool',
        'has_recording': 'bool',
        'has_chat': 'bool',
        'meeting_encryption_status': 'int',
        'participants_count_my_account': 'int'
    }

    attribute_map = {
        'custom_keys': 'custom_keys',
        'duration': 'duration',
        'end_time': 'end_time',
        'id': 'id',
        'participants_count': 'participants_count',
        'session_key': 'session_key',
        'source': 'source',
        'start_time': 'start_time',
        'topic': 'topic',
        'total_minutes': 'total_minutes',
        'type': 'type',
        'user_email': 'user_email',
        'user_name': 'user_name',
        'uuid': 'uuid',
        'schedule_time': 'schedule_time',
        'join_waiting_room_time': 'join_waiting_room_time',
        'join_time': 'join_time',
        'leave_time': 'leave_time',
        'host_organization': 'host_organization',
        'host_name': 'host_name',
        'has_screen_share': 'has_screen_share',
        'has_recording': 'has_recording',
        'has_chat': 'has_chat',
        'meeting_encryption_status': 'meeting_encryption_status',
        'participants_count_my_account': 'participants_count_my_account'
    }

    def __init__(self, custom_keys=None, duration=None, end_time=None, id=None, participants_count=None, session_key=None, source=None, start_time=None, topic=None, total_minutes=None, type=None, user_email=None, user_name=None, uuid=None, schedule_time=None, join_waiting_room_time=None, join_time=None, leave_time=None, host_organization=None, host_name=None, has_screen_share=None, has_recording=None, has_chat=None, meeting_encryption_status=None, participants_count_my_account=None):  # noqa: E501
        """InlineResponse20073Meetings - a model defined in Swagger"""  # noqa: E501
        self._custom_keys = None
        self._duration = None
        self._end_time = None
        self._id = None
        self._participants_count = None
        self._session_key = None
        self._source = None
        self._start_time = None
        self._topic = None
        self._total_minutes = None
        self._type = None
        self._user_email = None
        self._user_name = None
        self._uuid = None
        self._schedule_time = None
        self._join_waiting_room_time = None
        self._join_time = None
        self._leave_time = None
        self._host_organization = None
        self._host_name = None
        self._has_screen_share = None
        self._has_recording = None
        self._has_chat = None
        self._meeting_encryption_status = None
        self._participants_count_my_account = None
        self.discriminator = None
        if custom_keys is not None:
            self.custom_keys = custom_keys
        if duration is not None:
            self.duration = duration
        if end_time is not None:
            self.end_time = end_time
        if id is not None:
            self.id = id
        if participants_count is not None:
            self.participants_count = participants_count
        if session_key is not None:
            self.session_key = session_key
        if source is not None:
            self.source = source
        if start_time is not None:
            self.start_time = start_time
        if topic is not None:
            self.topic = topic
        if total_minutes is not None:
            self.total_minutes = total_minutes
        if type is not None:
            self.type = type
        if user_email is not None:
            self.user_email = user_email
        if user_name is not None:
            self.user_name = user_name
        if uuid is not None:
            self.uuid = uuid
        if schedule_time is not None:
            self.schedule_time = schedule_time
        if join_waiting_room_time is not None:
            self.join_waiting_room_time = join_waiting_room_time
        if join_time is not None:
            self.join_time = join_time
        if leave_time is not None:
            self.leave_time = leave_time
        if host_organization is not None:
            self.host_organization = host_organization
        if host_name is not None:
            self.host_name = host_name
        if has_screen_share is not None:
            self.has_screen_share = has_screen_share
        if has_recording is not None:
            self.has_recording = has_recording
        if has_chat is not None:
            self.has_chat = has_chat
        if meeting_encryption_status is not None:
            self.meeting_encryption_status = meeting_encryption_status
        if participants_count_my_account is not None:
            self.participants_count_my_account = participants_count_my_account

    @property
    def custom_keys(self):
        """Gets the custom_keys of this InlineResponse20073Meetings.  # noqa: E501

        Information about the meeting's assigned custom keys and values. This returns a maximum of 10 items.  # noqa: E501

        :return: The custom_keys of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: list[InlineResponse20073CustomKeys]
        """
        return self._custom_keys

    @custom_keys.setter
    def custom_keys(self, custom_keys):
        """Sets the custom_keys of this InlineResponse20073Meetings.

        Information about the meeting's assigned custom keys and values. This returns a maximum of 10 items.  # noqa: E501

        :param custom_keys: The custom_keys of this InlineResponse20073Meetings.  # noqa: E501
        :type: list[InlineResponse20073CustomKeys]
        """

        self._custom_keys = custom_keys

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's duration.  # noqa: E501

        :return: The duration of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20073Meetings.

        The meeting's duration.  # noqa: E501

        :param duration: The duration of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's end date and time.  # noqa: E501

        :return: The end_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20073Meetings.

        The meeting's end date and time.  # noqa: E501

        :param end_time: The end_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this InlineResponse20073Meetings.  # noqa: E501

        The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).  # noqa: E501

        :return: The id of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20073Meetings.

        The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).  # noqa: E501

        :param id: The id of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def participants_count(self):
        """Gets the participants_count of this InlineResponse20073Meetings.  # noqa: E501

        The number of meeting participants.  # noqa: E501

        :return: The participants_count of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._participants_count

    @participants_count.setter
    def participants_count(self, participants_count):
        """Sets the participants_count of this InlineResponse20073Meetings.

        The number of meeting participants.  # noqa: E501

        :param participants_count: The participants_count of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """

        self._participants_count = participants_count

    @property
    def session_key(self):
        """Gets the session_key of this InlineResponse20073Meetings.  # noqa: E501

        The Video SDK custom session ID.  # noqa: E501

        :return: The session_key of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this InlineResponse20073Meetings.

        The Video SDK custom session ID.  # noqa: E501

        :param session_key: The session_key of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._session_key = session_key

    @property
    def source(self):
        """Gets the source of this InlineResponse20073Meetings.  # noqa: E501

        Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app's name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.  # noqa: E501

        :return: The source of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponse20073Meetings.

        Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app's name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.  # noqa: E501

        :param source: The source of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's start date and time.  # noqa: E501

        :return: The start_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20073Meetings.

        The meeting's start date and time.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def topic(self):
        """Gets the topic of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's topic.  # noqa: E501

        :return: The topic of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this InlineResponse20073Meetings.

        The meeting's topic.  # noqa: E501

        :param topic: The topic of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def total_minutes(self):
        """Gets the total_minutes of this InlineResponse20073Meetings.  # noqa: E501

        The sum of meeting minutes from all meeting participants in the meeting.  # noqa: E501

        :return: The total_minutes of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._total_minutes

    @total_minutes.setter
    def total_minutes(self, total_minutes):
        """Sets the total_minutes of this InlineResponse20073Meetings.

        The sum of meeting minutes from all meeting participants in the meeting.  # noqa: E501

        :param total_minutes: The total_minutes of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """

        self._total_minutes = total_minutes

    @property
    def type(self):
        """Gets the type of this InlineResponse20073Meetings.  # noqa: E501

        The type of meeting or webinar.   meeting:  * `1` &mdash; Instant meeting.  * `2` &mdash; Scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A meeting created via PMI (Personal Meeting ID).  * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.   webinar:  * `5` &mdash; A webinar.  * `6` &mdash; A recurring webinar without a fixed time  * `9` &mdash; A recurring webinar with a fixed time.   # noqa: E501

        :return: The type of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20073Meetings.

        The type of meeting or webinar.   meeting:  * `1` &mdash; Instant meeting.  * `2` &mdash; Scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A meeting created via PMI (Personal Meeting ID).  * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.   webinar:  * `5` &mdash; A webinar.  * `6` &mdash; A recurring webinar without a fixed time  * `9` &mdash; A recurring webinar with a fixed time.   # noqa: E501

        :param type: The type of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_email(self):
        """Gets the user_email of this InlineResponse20073Meetings.  # noqa: E501

        The user's email address.  # noqa: E501

        :return: The user_email of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this InlineResponse20073Meetings.

        The user's email address.  # noqa: E501

        :param user_email: The user_email of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20073Meetings.  # noqa: E501

        The user's display name.  # noqa: E501

        :return: The user_name of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20073Meetings.

        The user's display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.  # noqa: E501

        :return: The uuid of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20073Meetings.

        The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.  # noqa: E501

        :param uuid: The uuid of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def schedule_time(self):
        """Gets the schedule_time of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's scheduled date and time.  # noqa: E501

        :return: The schedule_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this InlineResponse20073Meetings.

        The meeting's scheduled date and time.  # noqa: E501

        :param schedule_time: The schedule_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._schedule_time = schedule_time

    @property
    def join_waiting_room_time(self):
        """Gets the join_waiting_room_time of this InlineResponse20073Meetings.  # noqa: E501

        The date and time at which the attendee joined the waiting room.  # noqa: E501

        :return: The join_waiting_room_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._join_waiting_room_time

    @join_waiting_room_time.setter
    def join_waiting_room_time(self, join_waiting_room_time):
        """Sets the join_waiting_room_time of this InlineResponse20073Meetings.

        The date and time at which the attendee joined the waiting room.  # noqa: E501

        :param join_waiting_room_time: The join_waiting_room_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._join_waiting_room_time = join_waiting_room_time

    @property
    def join_time(self):
        """Gets the join_time of this InlineResponse20073Meetings.  # noqa: E501

        The date and time at which the attendee joined the meeting.  # noqa: E501

        :return: The join_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this InlineResponse20073Meetings.

        The date and time at which the attendee joined the meeting.  # noqa: E501

        :param join_time: The join_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this InlineResponse20073Meetings.  # noqa: E501

        The date and time at which the attendee left the meeting.  # noqa: E501

        :return: The leave_time of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this InlineResponse20073Meetings.

        The date and time at which the attendee left the meeting.  # noqa: E501

        :param leave_time: The leave_time of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._leave_time = leave_time

    @property
    def host_organization(self):
        """Gets the host_organization of this InlineResponse20073Meetings.  # noqa: E501

        Host Account Name of Hosting Organization.  # noqa: E501

        :return: The host_organization of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._host_organization

    @host_organization.setter
    def host_organization(self, host_organization):
        """Sets the host_organization of this InlineResponse20073Meetings.

        Host Account Name of Hosting Organization.  # noqa: E501

        :param host_organization: The host_organization of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._host_organization = host_organization

    @property
    def host_name(self):
        """Gets the host_name of this InlineResponse20073Meetings.  # noqa: E501

        Host's name.  # noqa: E501

        :return: The host_name of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this InlineResponse20073Meetings.

        Host's name.  # noqa: E501

        :param host_name: The host_name of this InlineResponse20073Meetings.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def has_screen_share(self):
        """Gets the has_screen_share of this InlineResponse20073Meetings.  # noqa: E501

        Indicates whether or not the screenshare feature was used in the meeting.  # noqa: E501

        :return: The has_screen_share of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: bool
        """
        return self._has_screen_share

    @has_screen_share.setter
    def has_screen_share(self, has_screen_share):
        """Sets the has_screen_share of this InlineResponse20073Meetings.

        Indicates whether or not the screenshare feature was used in the meeting.  # noqa: E501

        :param has_screen_share: The has_screen_share of this InlineResponse20073Meetings.  # noqa: E501
        :type: bool
        """

        self._has_screen_share = has_screen_share

    @property
    def has_recording(self):
        """Gets the has_recording of this InlineResponse20073Meetings.  # noqa: E501

        Indicates whether or not the recording feature was used in the meeting.  # noqa: E501

        :return: The has_recording of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: bool
        """
        return self._has_recording

    @has_recording.setter
    def has_recording(self, has_recording):
        """Sets the has_recording of this InlineResponse20073Meetings.

        Indicates whether or not the recording feature was used in the meeting.  # noqa: E501

        :param has_recording: The has_recording of this InlineResponse20073Meetings.  # noqa: E501
        :type: bool
        """

        self._has_recording = has_recording

    @property
    def has_chat(self):
        """Gets the has_chat of this InlineResponse20073Meetings.  # noqa: E501

        Indicates whether or not the chat feature was used in the meeting.  # noqa: E501

        :return: The has_chat of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: bool
        """
        return self._has_chat

    @has_chat.setter
    def has_chat(self, has_chat):
        """Sets the has_chat of this InlineResponse20073Meetings.

        Indicates whether or not the chat feature was used in the meeting.  # noqa: E501

        :param has_chat: The has_chat of this InlineResponse20073Meetings.  # noqa: E501
        :type: bool
        """

        self._has_chat = has_chat

    @property
    def meeting_encryption_status(self):
        """Gets the meeting_encryption_status of this InlineResponse20073Meetings.  # noqa: E501

        The meeting's encryption status.  * `1` &mdash; E2E encryption.  * `2` &mdash; Enhanced encryption.  # noqa: E501

        :return: The meeting_encryption_status of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._meeting_encryption_status

    @meeting_encryption_status.setter
    def meeting_encryption_status(self, meeting_encryption_status):
        """Sets the meeting_encryption_status of this InlineResponse20073Meetings.

        The meeting's encryption status.  * `1` &mdash; E2E encryption.  * `2` &mdash; Enhanced encryption.  # noqa: E501

        :param meeting_encryption_status: The meeting_encryption_status of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if meeting_encryption_status not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_encryption_status` ({0}), must be one of {1}"  # noqa: E501
                .format(meeting_encryption_status, allowed_values)
            )

        self._meeting_encryption_status = meeting_encryption_status

    @property
    def participants_count_my_account(self):
        """Gets the participants_count_my_account of this InlineResponse20073Meetings.  # noqa: E501

        The number of meeting participants from my account.  # noqa: E501

        :return: The participants_count_my_account of this InlineResponse20073Meetings.  # noqa: E501
        :rtype: int
        """
        return self._participants_count_my_account

    @participants_count_my_account.setter
    def participants_count_my_account(self, participants_count_my_account):
        """Sets the participants_count_my_account of this InlineResponse20073Meetings.

        The number of meeting participants from my account.  # noqa: E501

        :param participants_count_my_account: The participants_count_my_account of this InlineResponse20073Meetings.  # noqa: E501
        :type: int
        """

        self._participants_count_my_account = participants_count_my_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20073Meetings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20073Meetings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
