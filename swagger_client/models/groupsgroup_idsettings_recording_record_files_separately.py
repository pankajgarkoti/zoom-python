# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupsgroupIdsettingsRecordingRecordFilesSeparately(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_speaker': 'bool',
        'gallery_view': 'bool',
        'shared_screen': 'bool'
    }

    attribute_map = {
        'active_speaker': 'active_speaker',
        'gallery_view': 'gallery_view',
        'shared_screen': 'shared_screen'
    }

    def __init__(self, active_speaker=None, gallery_view=None, shared_screen=None):  # noqa: E501
        """GroupsgroupIdsettingsRecordingRecordFilesSeparately - a model defined in Swagger"""  # noqa: E501
        self._active_speaker = None
        self._gallery_view = None
        self._shared_screen = None
        self.discriminator = None
        if active_speaker is not None:
            self.active_speaker = active_speaker
        if gallery_view is not None:
            self.gallery_view = gallery_view
        if shared_screen is not None:
            self.shared_screen = shared_screen

    @property
    def active_speaker(self):
        """Gets the active_speaker of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501

        Whether recording only the active speaker is enabled.  # noqa: E501

        :return: The active_speaker of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :rtype: bool
        """
        return self._active_speaker

    @active_speaker.setter
    def active_speaker(self, active_speaker):
        """Sets the active_speaker of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.

        Whether recording only the active speaker is enabled.  # noqa: E501

        :param active_speaker: The active_speaker of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :type: bool
        """

        self._active_speaker = active_speaker

    @property
    def gallery_view(self):
        """Gets the gallery_view of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501

        Whether recording only the gallery view is enabled.  # noqa: E501

        :return: The gallery_view of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :rtype: bool
        """
        return self._gallery_view

    @gallery_view.setter
    def gallery_view(self, gallery_view):
        """Sets the gallery_view of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.

        Whether recording only the gallery view is enabled.  # noqa: E501

        :param gallery_view: The gallery_view of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :type: bool
        """

        self._gallery_view = gallery_view

    @property
    def shared_screen(self):
        """Gets the shared_screen of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501

        Whether recording only shared screen is enabled.  # noqa: E501

        :return: The shared_screen of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :rtype: bool
        """
        return self._shared_screen

    @shared_screen.setter
    def shared_screen(self, shared_screen):
        """Sets the shared_screen of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.

        Whether recording only shared screen is enabled.  # noqa: E501

        :param shared_screen: The shared_screen of this GroupsgroupIdsettingsRecordingRecordFilesSeparately.  # noqa: E501
        :type: bool
        """

        self._shared_screen = shared_screen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsgroupIdsettingsRecordingRecordFilesSeparately, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsgroupIdsettingsRecordingRecordFilesSeparately):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
