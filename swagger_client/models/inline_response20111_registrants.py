# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20111Registrants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'join_url': 'str',
        'registrant_id': 'str',
        'participant_pin_code': 'int'
    }

    attribute_map = {
        'email': 'email',
        'join_url': 'join_url',
        'registrant_id': 'registrant_id',
        'participant_pin_code': 'participant_pin_code'
    }

    def __init__(self, email=None, join_url=None, registrant_id=None, participant_pin_code=None):  # noqa: E501
        """InlineResponse20111Registrants - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._join_url = None
        self._registrant_id = None
        self._participant_pin_code = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if join_url is not None:
            self.join_url = join_url
        if registrant_id is not None:
            self.registrant_id = registrant_id
        if participant_pin_code is not None:
            self.participant_pin_code = participant_pin_code

    @property
    def email(self):
        """Gets the email of this InlineResponse20111Registrants.  # noqa: E501

        Email address of the registrant.  # noqa: E501

        :return: The email of this InlineResponse20111Registrants.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20111Registrants.

        Email address of the registrant.  # noqa: E501

        :param email: The email of this InlineResponse20111Registrants.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def join_url(self):
        """Gets the join_url of this InlineResponse20111Registrants.  # noqa: E501

        Unique URL using which registrant can join the meeting.  # noqa: E501

        :return: The join_url of this InlineResponse20111Registrants.  # noqa: E501
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this InlineResponse20111Registrants.

        Unique URL using which registrant can join the meeting.  # noqa: E501

        :param join_url: The join_url of this InlineResponse20111Registrants.  # noqa: E501
        :type: str
        """

        self._join_url = join_url

    @property
    def registrant_id(self):
        """Gets the registrant_id of this InlineResponse20111Registrants.  # noqa: E501

        Unique identifier of the registrant.  # noqa: E501

        :return: The registrant_id of this InlineResponse20111Registrants.  # noqa: E501
        :rtype: str
        """
        return self._registrant_id

    @registrant_id.setter
    def registrant_id(self, registrant_id):
        """Sets the registrant_id of this InlineResponse20111Registrants.

        Unique identifier of the registrant.  # noqa: E501

        :param registrant_id: The registrant_id of this InlineResponse20111Registrants.  # noqa: E501
        :type: str
        """

        self._registrant_id = registrant_id

    @property
    def participant_pin_code(self):
        """Gets the participant_pin_code of this InlineResponse20111Registrants.  # noqa: E501

        The participant PIN code is used to authenticate audio participants before they join the meeting.  # noqa: E501

        :return: The participant_pin_code of this InlineResponse20111Registrants.  # noqa: E501
        :rtype: int
        """
        return self._participant_pin_code

    @participant_pin_code.setter
    def participant_pin_code(self, participant_pin_code):
        """Sets the participant_pin_code of this InlineResponse20111Registrants.

        The participant PIN code is used to authenticate audio participants before they join the meeting.  # noqa: E501

        :param participant_pin_code: The participant_pin_code of this InlineResponse20111Registrants.  # noqa: E501
        :type: int
        """

        self._participant_pin_code = participant_pin_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20111Registrants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20111Registrants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
