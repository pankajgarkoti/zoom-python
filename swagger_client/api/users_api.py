# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_update_feature(self, **kwargs):  # noqa: E501
        """Bulk update feature  # noqa: E501

        Bulk update features.     **Scopes:** `user:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_feature(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersFeaturesBody body: User feature
        :return: InlineResponse20118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_feature_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_feature_with_http_info(**kwargs)  # noqa: E501
            return data

    def bulk_update_feature_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk update feature  # noqa: E501

        Bulk update features.     **Scopes:** `user:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_feature_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersFeaturesBody body: User feature
        :return: InlineResponse20118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_feature" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_user_vb(self, user_id, **kwargs):  # noqa: E501
        """Delete Virtual Background files  # noqa: E501

        Use this API to delete a user's Virtual Background files. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Prerequisites:**  * The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user_vb(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :param str file_ids: A comma-separated list of the Virtual Background file IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_user_vb_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.del_user_vb_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def del_user_vb_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete Virtual Background files  # noqa: E501

        Use this API to delete a user's Virtual Background files. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Prerequisites:**  * The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user_vb_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :param str file_ids: A comma-separated list of the Virtual Background file IDs to delete.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'file_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_user_vb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `del_user_vb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'file_ids' in params:
            query_params.append(('file_ids', params['file_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/settings/virtual_backgrounds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collaboration_device(self, user_id, collaboration_device_id, **kwargs):  # noqa: E501
        """Get collaboration device detail  # noqa: E501

        Get collaboration device detail. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collaboration_device(user_id, collaboration_device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserId8 user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param str collaboration_device_id: The collaboration deviceId. (required)
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collaboration_device_with_http_info(user_id, collaboration_device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collaboration_device_with_http_info(user_id, collaboration_device_id, **kwargs)  # noqa: E501
            return data

    def get_collaboration_device_with_http_info(self, user_id, collaboration_device_id, **kwargs):  # noqa: E501
        """Get collaboration device detail  # noqa: E501

        Get collaboration device detail. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collaboration_device_with_http_info(user_id, collaboration_device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserId8 user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param str collaboration_device_id: The collaboration deviceId. (required)
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'collaboration_device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collaboration_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_collaboration_device`")  # noqa: E501
        # verify the required parameter 'collaboration_device_id' is set
        if ('collaboration_device_id' not in params or
                params['collaboration_device_id'] is None):
            raise ValueError("Missing the required parameter `collaboration_device_id` when calling `get_collaboration_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'collaboration_device_id' in params:
            path_params['collaborationDeviceId'] = params['collaboration_device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/collaboration_devices/{collaborationDeviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20090',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_meeting_templates(self, user_id, meeting_template_id, **kwargs):  # noqa: E501
        """Get meeting template detail  # noqa: E501

        Retrieve a user's [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_meeting_templates(user_id, meeting_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str meeting_template_id: The meeting template ID. (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_meeting_templates_with_http_info(user_id, meeting_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_meeting_templates_with_http_info(user_id, meeting_template_id, **kwargs)  # noqa: E501
            return data

    def get_user_meeting_templates_with_http_info(self, user_id, meeting_template_id, **kwargs):  # noqa: E501
        """Get meeting template detail  # noqa: E501

        Retrieve a user's [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_meeting_templates_with_http_info(user_id, meeting_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str meeting_template_id: The meeting template ID. (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'meeting_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_meeting_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_meeting_templates`")  # noqa: E501
        # verify the required parameter 'meeting_template_id' is set
        if ('meeting_template_id' not in params or
                params['meeting_template_id'] is None):
            raise ValueError("Missing the required parameter `meeting_template_id` when calling `get_user_meeting_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'meeting_template_id' in params:
            path_params['meetingTemplateId'] = params['meeting_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/meeting_templates/{meetingTemplateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20091',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_collaboration_devices(self, user_id, **kwargs):  # noqa: E501
        """List a user's collaboration devices  # noqa: E501

        List a user's collaboration devices. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_collaboration_devices(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserId7 user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_collaboration_devices_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_collaboration_devices_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_collaboration_devices_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List a user's collaboration devices  # noqa: E501

        List a user's collaboration devices. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_collaboration_devices_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserId7 user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_collaboration_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_collaboration_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/collaboration_devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_presence_status(self, user_id, **kwargs):  # noqa: E501
        """Update a user's presence status  # noqa: E501

        Update a user's presence status. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  A user's status **cannot** be updated more than once per minute. For example, you can only submit a maximum of one update request per minute for a single user.  Users in the Zoom desktop client and mobile apps are assigned with a [presence status](https://support.zoom.us/hc/en-us/articles/360032554051-Status-Icons). The presence status informs users of their contact's availability. Users can also change their own presence status to one the following: * **Away** * **Do not disturb** * **Available** * **In a calendar event** * **Presenting** * **In a Zoom meeting** * **On a call** * **Out of Office** * **Busy**  Note that a user's presence status **cannot** be updated via this API if the user is not logged in to the Zoom client.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_presence_status(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param UserIdPresenceStatusBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_presence_status_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_presence_status_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def update_presence_status_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update a user's presence status  # noqa: E501

        Update a user's presence status. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  A user's status **cannot** be updated more than once per minute. For example, you can only submit a maximum of one update request per minute for a single user.  Users in the Zoom desktop client and mobile apps are assigned with a [presence status](https://support.zoom.us/hc/en-us/articles/360032554051-Status-Icons). The presence status informs users of their contact's availability. Users can also change their own presence status to one the following: * **Away** * **Do not disturb** * **Available** * **In a calendar event** * **Presenting** * **In a Zoom meeting** * **On a call** * **Out of Office** * **Busy**  Note that a user's presence status **cannot** be updated via this API if the user is not logged in to the Zoom client.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_presence_status_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param UserIdPresenceStatusBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_presence_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_presence_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/presence_status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_v_buser(self, user_id, **kwargs):  # noqa: E501
        """Upload Virtual Background files  # noqa: E501

        Use this API to [upload a Virtual Background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) to a user's profile. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Note:**  * A user profile cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * Video files must be in MP4 or MOV file format with a minimum resolution of 480 by 360 pixels (360p) and a maximum resolution of 1920 by 1080 pixels (1080p).  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  * The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_v_buser(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :param str file:
        :return: InlineResponse20120
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_v_buser_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_v_buser_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def upload_v_buser_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Upload Virtual Background files  # noqa: E501

        Use this API to [upload a Virtual Background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) to a user's profile. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.    **Note:**  * A user profile cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * Video files must be in MP4 or MOV file format with a minimum resolution of 480 by 360 pixels (360p) and a maximum resolution of 1920 by 1080 pixels (1080p).  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  * The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_v_buser_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value. (required)
        :param str file:
        :return: InlineResponse20120
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_v_buser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `upload_v_buser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            form_params.append(('file', params['file']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/settings/virtual_backgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20120',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user(self, user_id, **kwargs):  # noqa: E501
        """Get a user  # noqa: E501

        View a user's information on a Zoom account. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note** Users who have not activated their account will have a `pending` status. These users' `created_at` timestamp will also display the time at which the API call was made, **not** the account's creation date.   **Note:** The `user_info:read` scope is only available when you pass the `me` value for the `$userId` value.   **Scopes:** `user:read:admin`,`user:read`,`user_info:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param int login_type: The user's login method.  * `0` - Facebook OAuth  * `1` - Google OAuth.  * `24` - Apple OAuth.  * `27` - Microsoft OAuth.  * `97` - Mobile device.  * `98` - RingCentral OAuth.  * `99` - API user.  * `100` - Zoom Work email.  * `101` - Single Sign-On (SSO).   These login methods are only available in China.  * `11` - Phone number.  * `21` - WeChat.  * `23` - Alipay.
        :param bool encrypted_email: Whether the email address passed for the `userId` value is an encrypted email address.    * `true` - The email address is encrypted.   * `false` - The email address is not encrypted.    If you do not query this parameter, this value defaults to null (`false`).
        :param bool search_by_unique_id: Whether the queried `userId` value is an employee unique ID.  * `true` - The queried ID is an employee's unique ID.  * `false` - The queried ID is not an employee's unique ID.   This value defaults to `false` (null).
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get a user  # noqa: E501

        View a user's information on a Zoom account. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note** Users who have not activated their account will have a `pending` status. These users' `created_at` timestamp will also display the time at which the API call was made, **not** the account's creation date.   **Note:** The `user_info:read` scope is only available when you pass the `me` value for the `$userId` value.   **Scopes:** `user:read:admin`,`user:read`,`user_info:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param int login_type: The user's login method.  * `0` - Facebook OAuth  * `1` - Google OAuth.  * `24` - Apple OAuth.  * `27` - Microsoft OAuth.  * `97` - Mobile device.  * `98` - RingCentral OAuth.  * `99` - API user.  * `100` - Zoom Work email.  * `101` - Single Sign-On (SSO).   These login methods are only available in China.  * `11` - Phone number.  * `21` - WeChat.  * `23` - Alipay.
        :param bool encrypted_email: Whether the email address passed for the `userId` value is an encrypted email address.    * `true` - The email address is encrypted.   * `false` - The email address is not encrypted.    If you do not query this parameter, this value defaults to null (`false`).
        :param bool search_by_unique_id: Whether the queried `userId` value is an employee unique ID.  * `true` - The queried ID is an employee's unique ID.  * `false` - The queried ID is not an employee's unique ID.   This value defaults to `false` (null).
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'login_type', 'encrypted_email', 'search_by_unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'login_type' in params:
            query_params.append(('login_type', params['login_type']))  # noqa: E501
        if 'encrypted_email' in params:
            query_params.append(('encrypted_email', params['encrypted_email']))  # noqa: E501
        if 'search_by_unique_id' in params:
            query_params.append(('search_by_unique_id', params['search_by_unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20088',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_assistant_create(self, user_id, **kwargs):  # noqa: E501
        """Add assistants  # noqa: E501

        Assign assistants to a user. In the request body, provide either the user's ID or the user's email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). Assistants can schedule meetings on behalf of the current user, and can also manage and act as an alternative host for all meetings if the admin has enabled the [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account, or the assistants' account must be in the same organization as the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistant_create(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserAssistantsList body: User assistant.
        :return: InlineResponse20119
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_assistant_create_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_assistant_create_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_assistant_create_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Add assistants  # noqa: E501

        Assign assistants to a user. In the request body, provide either the user's ID or the user's email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). Assistants can schedule meetings on behalf of the current user, and can also manage and act as an alternative host for all meetings if the admin has enabled the [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account, or the assistants' account must be in the same organization as the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistant_create_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserAssistantsList body: User assistant.
        :return: InlineResponse20119
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_assistant_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_assistant_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/assistants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20119',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_assistant_delete(self, user_id, assistant_id, **kwargs):  # noqa: E501
        """Delete a user assistant  # noqa: E501

        Delete a specific assistant of a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistant_delete(user_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str assistant_id: Assistant ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_assistant_delete_with_http_info(user_id, assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_assistant_delete_with_http_info(user_id, assistant_id, **kwargs)  # noqa: E501
            return data

    def user_assistant_delete_with_http_info(self, user_id, assistant_id, **kwargs):  # noqa: E501
        """Delete a user assistant  # noqa: E501

        Delete a specific assistant of a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistant_delete_with_http_info(user_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str assistant_id: Assistant ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_assistant_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_assistant_delete`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `user_assistant_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/assistants/{assistantId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_assistants(self, user_id, **kwargs):  # noqa: E501
        """List user assistants  # noqa: E501

        List a user's assistants. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meetings on behalf of the current user, as well as manage and act as an alternative host for all meetings if the admin has enabled the [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * Current user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistants(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: UserAssistantsList_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_assistants_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_assistants_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_assistants_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List user assistants  # noqa: E501

        List a user's assistants. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meetings on behalf of the current user, as well as manage and act as an alternative host for all meetings if the admin has enabled the [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * Current user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistants_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: UserAssistantsList_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_assistants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_assistants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/assistants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAssistantsList_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_assistants_delete(self, user_id, **kwargs):  # noqa: E501
        """Delete user assistants  # noqa: E501

        Delete all of the current user's assistants. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user, and manage and act as an alternative host for all meetings if the admin has enabled [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistants_delete(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_assistants_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_assistants_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_assistants_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete user assistants  # noqa: E501

        Delete all of the current user's assistants. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Assistants are the users who the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user, and manage and act as an alternative host for all meetings if the admin has enabled [co-host option](https://zoom.us/account/setting) on the account.  **Prerequisites:**  * The user as well as the assistant must have Licensed or an On-prem license. * Assistants must be under the current user's account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_assistants_delete_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_assistants_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_assistants_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/assistants', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_create(self, **kwargs):  # noqa: E501
        """Create users  # noqa: E501

        Add a new user to your Zoom account.   **Note** These rate limits apply when you use the `create` value for the `action` field:  * 50 requests per day for **Free** accounts.  * 1,500 requests per day for **Pro** accounts.  * 10,000 requests per day for **Business+** accounts.   **Prerequisites:**  * A Pro or higher plan.  **Scopes:** `user:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersBody body: User
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create users  # noqa: E501

        Add a new user to your Zoom account.   **Note** These rate limits apply when you use the `create` value for the `action` field:  * 50 requests per day for **Free** accounts.  * 1,500 requests per day for **Pro** accounts.  * 10,000 requests per day for **Business+** accounts.   **Prerequisites:**  * A Pro or higher plan.  **Scopes:** `user:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersBody body: User
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20117',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete(self, user_id, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        **Disassociate** (unlink) a user or permanently **delete** a user.    **Disassociating** a user unlinks the user from the associated Zoom account and provides the user their own basic free Zoom account. The disassociated user can then purchase their own Zoom licenses. An account owner or account admin can transfer the user's meetings, webinars, and cloud recordings to another user before disassociation.   **Deleting** a user permanently removes the user and their data from Zoom. Users can create a new Zoom account using the same email address. An account owner or an account admin can transfer meetings, webinars, and cloud recordings to another Zoom user account before deleting.   For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note:** This API does not support the deletion requirements of a [Data Subject Access Request (DSAR)](https://dataprivacymanager.net/what-is-data-subject-access-request-dsar/). For a DSAR request, contact Zoom Support.      **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param bool encrypted_email: Whether the email address passed for the `userId` value is an encrypted email address.    * `true` - The email address is encrypted.   * `false` - The email address is not encrypted.    If you do not query this parameter, this value defaults to null (`false`).
        :param str action: Delete action options.   `disassociate` - Disassociate a user.    `delete`-  Permanently delete a user.    Note: To delete pending user in the account, use `disassociate`
        :param str transfer_email: Transfer email. This field is **required** if the user has Zoom Events/Sessions feature. After you delete or disassociate the user, the user's hub assets on Zoom Events site will be transferred to the target user.
        :param bool transfer_meeting: Transfer meeting.
        :param bool transfer_webinar: Transfer webinar.
        :param bool transfer_recording: Transfer recording.
        :param bool transfer_whiteboard: When deleting a user, whether to transfer all their [Zoom Whiteboard](https://support.zoom.us/hc/en-us/articles/4410916881421) data to another user.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        **Disassociate** (unlink) a user or permanently **delete** a user.    **Disassociating** a user unlinks the user from the associated Zoom account and provides the user their own basic free Zoom account. The disassociated user can then purchase their own Zoom licenses. An account owner or account admin can transfer the user's meetings, webinars, and cloud recordings to another user before disassociation.   **Deleting** a user permanently removes the user and their data from Zoom. Users can create a new Zoom account using the same email address. An account owner or an account admin can transfer meetings, webinars, and cloud recordings to another Zoom user account before deleting.   For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note:** This API does not support the deletion requirements of a [Data Subject Access Request (DSAR)](https://dataprivacymanager.net/what-is-data-subject-access-request-dsar/). For a DSAR request, contact Zoom Support.      **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param bool encrypted_email: Whether the email address passed for the `userId` value is an encrypted email address.    * `true` - The email address is encrypted.   * `false` - The email address is not encrypted.    If you do not query this parameter, this value defaults to null (`false`).
        :param str action: Delete action options.   `disassociate` - Disassociate a user.    `delete`-  Permanently delete a user.    Note: To delete pending user in the account, use `disassociate`
        :param str transfer_email: Transfer email. This field is **required** if the user has Zoom Events/Sessions feature. After you delete or disassociate the user, the user's hub assets on Zoom Events site will be transferred to the target user.
        :param bool transfer_meeting: Transfer meeting.
        :param bool transfer_webinar: Transfer webinar.
        :param bool transfer_recording: Transfer recording.
        :param bool transfer_whiteboard: When deleting a user, whether to transfer all their [Zoom Whiteboard](https://support.zoom.us/hc/en-us/articles/4410916881421) data to another user.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'encrypted_email', 'action', 'transfer_email', 'transfer_meeting', 'transfer_webinar', 'transfer_recording', 'transfer_whiteboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'encrypted_email' in params:
            query_params.append(('encrypted_email', params['encrypted_email']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'transfer_email' in params:
            query_params.append(('transfer_email', params['transfer_email']))  # noqa: E501
        if 'transfer_meeting' in params:
            query_params.append(('transfer_meeting', params['transfer_meeting']))  # noqa: E501
        if 'transfer_webinar' in params:
            query_params.append(('transfer_webinar', params['transfer_webinar']))  # noqa: E501
        if 'transfer_recording' in params:
            query_params.append(('transfer_recording', params['transfer_recording']))  # noqa: E501
        if 'transfer_whiteboard' in params:
            query_params.append(('transfer_whiteboard', params['transfer_whiteboard']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_email(self, email, **kwargs):  # noqa: E501
        """Check a user email  # noqa: E501

        Verify if a user's email is registered with Zoom.          &lt;b&gt;Note: &lt;/b&gt;You can successfully check if a user is a registered Zoom user only if the user **signed up for Zoom via email and is within your account.** If you provide an email address of a user who is not in your account, the value of &quot;existed_email&quot; parameter will be &quot;false&quot; irrespective of whether or not the user is registered with Zoom. The response of this API call will not include users who joined Zoom using options such as &quot;Sign in with SSO&quot;, &quot;Sign in with Google&quot; or &quot;Sign in with Facebook&quot; even if they are in the same account as yours.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_email(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address to be verified. (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_email_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.user_email_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def user_email_with_http_info(self, email, **kwargs):  # noqa: E501
        """Check a user email  # noqa: E501

        Verify if a user's email is registered with Zoom.          &lt;b&gt;Note: &lt;/b&gt;You can successfully check if a user is a registered Zoom user only if the user **signed up for Zoom via email and is within your account.** If you provide an email address of a user who is not in your account, the value of &quot;existed_email&quot; parameter will be &quot;false&quot; irrespective of whether or not the user is registered with Zoom. The response of this API call will not include users who joined Zoom using options such as &quot;Sign in with SSO&quot;, &quot;Sign in with Google&quot; or &quot;Sign in with Facebook&quot; even if they are in the same account as yours.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_email_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address to be verified. (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `user_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/email', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_email_update(self, user_id, **kwargs):  # noqa: E501
        """Update a user's email  # noqa: E501

        Change a user's [email address](https://support.zoom.us/hc/en-us/articles/201362563-How-Do-I-Change-the-Email-on-My-Account-) on a Zoom account that has managed domain set up. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * If the Zoom account in which the user belongs has multiple [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-), then the email to be updated **must** match one of the managed domains. * A user's email address can be changed up to 3 times in any 24 hour period.  **Prerequisites:**  * Managed domain must be enabled in the account.  * The new email address should not already exist in Zoom.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_email_update(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The users's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdEmailBody body: User email.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_email_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_email_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_email_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update a user's email  # noqa: E501

        Change a user's [email address](https://support.zoom.us/hc/en-us/articles/201362563-How-Do-I-Change-the-Email-on-My-Account-) on a Zoom account that has managed domain set up. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * If the Zoom account in which the user belongs has multiple [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-), then the email to be updated **must** match one of the managed domains. * A user's email address can be changed up to 3 times in any 24 hour period.  **Prerequisites:**  * Managed domain must be enabled in the account.  * The new email address should not already exist in Zoom.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_email_update_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The users's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdEmailBody body: User email.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_email_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_email_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/email', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_password(self, user_id, **kwargs):  # noqa: E501
        """Update a user's password  # noqa: E501

        Update the [password](https://support.zoom.us/hc/en-us/articles/206344385-Change-a-User-s-Password) of a user using which the user can login to Zoom. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  After this request is processed successfully, an email notification is sent to the user saying that the password was changed.     **Prerequisites:**     * Owner or admin of the Zoom account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_password(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdPasswordBody body: User password.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_password_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_password_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_password_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update a user's password  # noqa: E501

        Update the [password](https://support.zoom.us/hc/en-us/articles/206344385-Change-a-User-s-Password) of a user using which the user can login to Zoom. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  After this request is processed successfully, an email notification is sent to the user saying that the password was changed.     **Prerequisites:**     * Owner or admin of the Zoom account.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_password_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdPasswordBody body: User password.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_permission(self, user_id, **kwargs):  # noqa: E501
        """Get user permissions  # noqa: E501

        Get permissions that have been granted to the user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Users can be assigned a set of permissions that allows them to access only the pages or information that a user needs to view or edit.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_permission(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_permission_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_permission_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_permission_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user permissions  # noqa: E501

        Get permissions that have been granted to the user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Users can be assigned a set of permissions that allows them to access only the pages or information that a user needs to view or edit.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_permission_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20092',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_picture(self, user_id, **kwargs):  # noqa: E501
        """Upload a user's profile picture  # noqa: E501

        Upload a user's profile picture. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Provide `multipart/form-data` as the value of the `content-type` header for this request. This API supports `.jpeg` and `.png` file formats.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_picture(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str pic_file:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_picture_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_picture_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_picture_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Upload a user's profile picture  # noqa: E501

        Upload a user's profile picture. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Provide `multipart/form-data` as the value of the `content-type` header for this request. This API supports `.jpeg` and `.png` file formats.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_picture_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str pic_file:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'pic_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_picture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_picture`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'pic_file' in params:
            form_params.append(('pic_file', params['pic_file']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/picture', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_picture_delete(self, user_id, **kwargs):  # noqa: E501
        """Delete a user's profile picture  # noqa: E501

        Delete a user's profile picture. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.     **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_picture_delete(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_picture_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_picture_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_picture_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete a user's profile picture  # noqa: E501

        Delete a user's profile picture. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.     **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_picture_delete_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_picture_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_picture_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/picture', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_scheduler_delete(self, user_id, scheduler_id, **kwargs):  # noqa: E501
        """Delete a scheduler  # noqa: E501

        Delete a scheduler. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers are users who the current user (assistant) can schedule meetings on their behalf. By calling this API, the current user will no longer be a scheduling assistant of this scheduler.  **Prerequisites:**  * Current user must be under the same account as the scheduler.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_scheduler_delete(user_id, scheduler_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str scheduler_id: Scheduler's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_scheduler_delete_with_http_info(user_id, scheduler_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_scheduler_delete_with_http_info(user_id, scheduler_id, **kwargs)  # noqa: E501
            return data

    def user_scheduler_delete_with_http_info(self, user_id, scheduler_id, **kwargs):  # noqa: E501
        """Delete a scheduler  # noqa: E501

        Delete a scheduler. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers are users who the current user (assistant) can schedule meetings on their behalf. By calling this API, the current user will no longer be a scheduling assistant of this scheduler.  **Prerequisites:**  * Current user must be under the same account as the scheduler.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_scheduler_delete_with_http_info(user_id, scheduler_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str scheduler_id: Scheduler's ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'scheduler_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_scheduler_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_scheduler_delete`")  # noqa: E501
        # verify the required parameter 'scheduler_id' is set
        if ('scheduler_id' not in params or
                params['scheduler_id'] is None):
            raise ValueError("Missing the required parameter `scheduler_id` when calling `user_scheduler_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'scheduler_id' in params:
            path_params['schedulerId'] = params['scheduler_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/schedulers/{schedulerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_schedulers(self, user_id, **kwargs):  # noqa: E501
        """List user schedulers  # noqa: E501

        List all of a user's schedulers. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers in this context are users who can schedule meetings for the current user. For example, if the current user, the user whose `userId` was passed in the `path` parameter, is **User A**, this API's response will list all users for whom **User A** can schedule and manage meetings. **User A** is the assistant of these users, and thus has scheduling privilege for these users.  **Prerequisites**  * Current user must be under the same account as the scheduler.  **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_schedulers(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: UserSchedulersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_schedulers_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_schedulers_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_schedulers_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List user schedulers  # noqa: E501

        List all of a user's schedulers. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers in this context are users who can schedule meetings for the current user. For example, if the current user, the user whose `userId` was passed in the `path` parameter, is **User A**, this API's response will list all users for whom **User A** can schedule and manage meetings. **User A** is the assistant of these users, and thus has scheduling privilege for these users.  **Prerequisites**  * Current user must be under the same account as the scheduler.  **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_schedulers_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: UserSchedulersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/schedulers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSchedulersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_schedulers_delete(self, user_id, **kwargs):  # noqa: E501
        """Delete user schedulers  # noqa: E501

        Delete all of a user's schedulers. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of any user.   **Prerequisites:**  * Current user (assistant) must be under the same account as the scheduler.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_schedulers_delete(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_schedulers_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_schedulers_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_schedulers_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete user schedulers  # noqa: E501

        Delete all of a user's schedulers. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  Schedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of any user.   **Prerequisites:**  * Current user (assistant) must be under the same account as the scheduler.  **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_schedulers_delete_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_schedulers_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_schedulers_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/schedulers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings(self, user_id, **kwargs):  # noqa: E501
        """Get user settings  # noqa: E501

        Retrieve a user's settings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param int login_type: The user's login method.  * `0` - Facebook OAuth  * `1` - Google OAuth  * `24` - Apple OAuth  * `27` - Microsoft OAuth  * `97` - Mobile device  * `98` - RingCentral OAuth  * `99` - API user  * `100` - Zoom Work email  * `101` - Single Sign-On (SSO)   These login methods are only available in China:  * `11` - Phone number  * `21` - WeChat  * `23` - Alipay
        :param str option: Optional query parameters:  * `meeting_authentication` - Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account.  * `recording_authentication` - Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account.  * `meeting_security` - Use this query parameter to view the meeting security settings applied to the user's account.
        :param str custom_query_fields: Provide the name of the field to filter the response. For example, if you provide `host_video` as the value of this field, you will get a response similar to this.     {    schedule_meeting: {         host_video: false     } }     You can provide multiple values by separating them with commas(example: `host_video,participant_video`).
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_settings_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user settings  # noqa: E501

        Retrieve a user's settings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass the `me` value. (required)
        :param int login_type: The user's login method.  * `0` - Facebook OAuth  * `1` - Google OAuth  * `24` - Apple OAuth  * `27` - Microsoft OAuth  * `97` - Mobile device  * `98` - RingCentral OAuth  * `99` - API user  * `100` - Zoom Work email  * `101` - Single Sign-On (SSO)   These login methods are only available in China:  * `11` - Phone number  * `21` - WeChat  * `23` - Alipay
        :param str option: Optional query parameters:  * `meeting_authentication` - Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account.  * `recording_authentication` - Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account.  * `meeting_security` - Use this query parameter to view the meeting security settings applied to the user's account.
        :param str custom_query_fields: Provide the name of the field to filter the response. For example, if you provide `host_video` as the value of this field, you will get a response similar to this.     {    schedule_meeting: {         host_video: false     } }     You can provide multiple values by separating them with commas(example: `host_video,participant_video`).
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'login_type', 'option', 'custom_query_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'login_type' in params:
            query_params.append(('login_type', params['login_type']))  # noqa: E501
        if 'option' in params:
            query_params.append(('option', params['option']))  # noqa: E501
        if 'custom_query_fields' in params:
            query_params.append(('custom_query_fields', params['custom_query_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20093',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_update(self, user_id, **kwargs):  # noqa: E501
        """Update user settings  # noqa: E501

        Update a user's settings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_update(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdSettingsBody body: User Settings
        :param str option: Optional query parameters:  * `meeting_authentication` &mdash; Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account.  * `recording_authentication` &mdash; Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account.  * `meeting_security` &mdash; Use this query parameter to view the meeting security settings applied to the user's account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_settings_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update user settings  # noqa: E501

        Update a user's settings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_update_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdSettingsBody body: User Settings
        :param str option: Optional query parameters:  * `meeting_authentication` &mdash; Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account.  * `recording_authentication` &mdash; Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account.  * `meeting_security` &mdash; Use this query parameter to view the meeting security settings applied to the user's account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body', 'option']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'option' in params:
            query_params.append(('option', params['option']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/settings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_sso_token_delete(self, user_id, **kwargs):  # noqa: E501
        """Revoke a user's SSO token  # noqa: E501

        Revoke a user's SSO token. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  After calling this API, the SSO user will be logged out of their current Zoom session.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sso_token_delete(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_sso_token_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_sso_token_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_sso_token_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Revoke a user's SSO token  # noqa: E501

        Revoke a user's SSO token. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  After calling this API, the SSO user will be logged out of their current Zoom session.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sso_token_delete_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_sso_token_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_sso_token_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/token', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_status(self, user_id, **kwargs):  # noqa: E501
        """Update user status  # noqa: E501

        [Deactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_6a9bc1c3-d739-4945-b1f2-00b3b88fb5cc) an active user or to [reactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_16319724-d120-4be6-af5d-31582d134ea0) a deactivated user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  An account owner or admins can deactivate as well as activate a user in a Zoom account. Deactivating a user removes all licenses associated with a user, and prevents the deactivated user from logging into their Zoom account. A deactivated user can be reactivated. Reactivating a user grants the user access to log in to their Zoom account.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_status(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdStatusBody body: User status.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_status_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_status_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_status_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update user status  # noqa: E501

        [Deactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_6a9bc1c3-d739-4945-b1f2-00b3b88fb5cc) an active user or to [reactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_16319724-d120-4be6-af5d-31582d134ea0) a deactivated user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  An account owner or admins can deactivate as well as activate a user in a Zoom account. Deactivating a user removes all licenses associated with a user, and prevents the deactivated user from logging into their Zoom account. A deactivated user can be reactivated. Reactivating a user grants the user access to log in to their Zoom account.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_status_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UserIdStatusBody body: User status.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_summary(self, **kwargs):  # noqa: E501
        """Get user summary  # noqa: E501

        Use this API to get a summary of users, including the number and types of users in the account.     **Scopes:** `user:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get user summary  # noqa: E501

        Use this API to get a summary of users, including the number and types of users in the account.     **Scopes:** `user:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_token(self, user_id, **kwargs):  # noqa: E501
        """Get a user's token  # noqa: E501

        Get a user's Zoom token or Zoom Access Key (ZAK). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.      **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_token(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The user token type.  * `zak` - A Zoom Access Key (ZAK) is used to generate a URL to start meetings. See [Getting a Zoom Access Key (ZAK)](https://developers.zoom.us/docs/meeting-sdk/auth/#start-meetings-and-webinars-with-a-zoom-users-zak-token) for details. The ZAK's expiration time is two hours. For API users, the expiration time is 90 days. An API user is a user created via the `custCreate` action in the **[Create users](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods/#operation/userCreate)** API. The maximum length of this value is `512`.  * `token` - **Deprecated** A Zoom token. This token expires in 14 days. You must make the request again after expiration to receive a new token. This query parameter returns a null value if the user signed in to Zoom via Google or Facebook. The maximum length of this value is `512`.    This value defaults to `token`.
        :param int ttl: The ZAK expiration time to live (TTL), in seconds. To update the user's ZAK TTL, use this field with the `zak` value for the `type` query parameter.   Defaults to `7200` or `7776000` (90 days) for API users. The maximum value is one year.
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_token_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_token_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_token_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get a user's token  # noqa: E501

        Get a user's Zoom token or Zoom Access Key (ZAK). For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.      **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_token_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param str type: The user token type.  * `zak` - A Zoom Access Key (ZAK) is used to generate a URL to start meetings. See [Getting a Zoom Access Key (ZAK)](https://developers.zoom.us/docs/meeting-sdk/auth/#start-meetings-and-webinars-with-a-zoom-users-zak-token) for details. The ZAK's expiration time is two hours. For API users, the expiration time is 90 days. An API user is a user created via the `custCreate` action in the **[Create users](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods/#operation/userCreate)** API. The maximum length of this value is `512`.  * `token` - **Deprecated** A Zoom token. This token expires in 14 days. You must make the request again after expiration to receive a new token. This query parameter returns a null value if the user signed in to Zoom via Google or Facebook. The maximum length of this value is `512`.    This value defaults to `token`.
        :param int ttl: The ZAK expiration time to live (TTL), in seconds. To update the user's ZAK TTL, use this field with the `zak` value for the `type` query parameter.   Defaults to `7200` or `7776000` (90 days) for API users. The maximum value is one year.
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'ttl']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'ttl' in params:
            query_params.append(('ttl', params['ttl']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_update(self, user_id, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

        Update a user's [Zoom profile](https://support.zoom.us/hc/en-us/articles/201363203-My-Profile) information. For user-level apps, pass [the `me` value](hhttps://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UpdateAUser body: The user's profile information.
        :param int login_type: The user's login method.  * `0` - Facebook OAuth.  * `1` - Google OAuth.  * `24` - Apple OAuth.  * `27` - Microsoft OAuth.  * `97` - Mobile device.  * `98` - RingCentral OAuth.  * `99` - API user.  * `100` - Zoom Work email.  * `101` - Single Sign-On (SSO).   These login methods are only available in China.  * `11` - Phone number.  * `21` - WeChat.  * `23` - Alipay.
        :param bool remove_tsp_credentials: Whether to remove the user's TSP credentials.  * `true` - The queried ID is an employee's unique ID.  * `false` - The queried ID is not an employee's unique ID.    This value defaults to `false` (null).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

        Update a user's [Zoom profile](https://support.zoom.us/hc/en-us/articles/201363203-My-Profile) information. For user-level apps, pass [the `me` value](hhttps://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `user:write:admin`,`user:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user's user ID or email address. For user-level apps, pass the `me` value. (required)
        :param UpdateAUser body: The user's profile information.
        :param int login_type: The user's login method.  * `0` - Facebook OAuth.  * `1` - Google OAuth.  * `24` - Apple OAuth.  * `27` - Microsoft OAuth.  * `97` - Mobile device.  * `98` - RingCentral OAuth.  * `99` - API user.  * `100` - Zoom Work email.  * `101` - Single Sign-On (SSO).   These login methods are only available in China.  * `11` - Phone number.  * `21` - WeChat.  * `23` - Alipay.
        :param bool remove_tsp_credentials: Whether to remove the user's TSP credentials.  * `true` - The queried ID is an employee's unique ID.  * `false` - The queried ID is not an employee's unique ID.    This value defaults to `false` (null).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body', 'login_type', 'remove_tsp_credentials']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'login_type' in params:
            query_params.append(('login_type', params['login_type']))  # noqa: E501
        if 'remove_tsp_credentials' in params:
            query_params.append(('remove_tsp_credentials', params['remove_tsp_credentials']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_vanity_name(self, vanity_name, **kwargs):  # noqa: E501
        """Check a user's PM room  # noqa: E501

        A personal meeting room is a virtual meeting room that can be permanently assigned to a user. Use this API to check if a personal meeting room with the given name exists or not.           **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_vanity_name(vanity_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vanity_name: Personal meeting room name. (required)
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_vanity_name_with_http_info(vanity_name, **kwargs)  # noqa: E501
        else:
            (data) = self.user_vanity_name_with_http_info(vanity_name, **kwargs)  # noqa: E501
            return data

    def user_vanity_name_with_http_info(self, vanity_name, **kwargs):  # noqa: E501
        """Check a user's PM room  # noqa: E501

        A personal meeting room is a virtual meeting room that can be permanently assigned to a user. Use this API to check if a personal meeting room with the given name exists or not.           **Scopes:** `user:read:admin`,`user:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_vanity_name_with_http_info(vanity_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vanity_name: Personal meeting room name. (required)
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vanity_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_vanity_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vanity_name' is set
        if ('vanity_name' not in params or
                params['vanity_name'] is None):
            raise ValueError("Missing the required parameter `vanity_name` when calling `user_vanity_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vanity_name' in params:
            query_params.append(('vanity_name', params['vanity_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/vanity_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_zak(self, **kwargs):  # noqa: E501
        """Get the user's ZAK  # noqa: E501

        Get the Zoom Access Key (ZAK) for the authenticated user associated with the access token in the API request. Use a ZAK to start or join a meeting on behalf of this user.  ZAKs obtained with this endpoint expire five minutes after receipt.  To get a ZAK for a different user or with a different expiration, use the [Get a user token](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods#operation/userToken) API with the `zak` `type` query parameter.  See [Getting a Zoom Access Key (ZAK)](https://developers.zoom.us/docs/meeting-sdk/auth/#start-meetings-and-webinars-with-a-zoom-users-zak-token) for details.    **Scopes:** `user_zak:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_zak(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_zak_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_zak_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_zak_with_http_info(self, **kwargs):  # noqa: E501
        """Get the user's ZAK  # noqa: E501

        Get the Zoom Access Key (ZAK) for the authenticated user associated with the access token in the API request. Use a ZAK to start or join a meeting on behalf of this user.  ZAKs obtained with this endpoint expire five minutes after receipt.  To get a ZAK for a different user or with a different expiration, use the [Get a user token](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods#operation/userToken) API with the `zak` `type` query parameter.  See [Getting a Zoom Access Key (ZAK)](https://developers.zoom.us/docs/meeting-sdk/auth/#start-meetings-and-webinars-with-a-zoom-users-zak-token) for details.    **Scopes:** `user_zak:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_zak_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_zak" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users/me/zak', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users(self, **kwargs):  # noqa: E501
        """List users  # noqa: E501

        Retrieve a list your account's users.     **Scopes:** `user:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: The user's status.  * `active` - The user exists on the account.  * `inactive` - The user has been deactivated.  * `pending` - The user exists on the account, but has not activated their account. See [Managing users](https://support.zoom.us/hc/en-us/articles/201363183) for details.  This value defaults to `active`.
        :param int page_size: The number of records returned within a single API call.
        :param str role_id: The role's unique ID. Use this parameter to filter the response by a specific role. You can use the [**List roles**](/api-reference/zoom-api/methods#operation/roles) API to get a role's unique ID value.
        :param str page_number: The page number of the current page in the returned records.
        :param str include_fields: Use this parameter to display one of the following attributes in the API call's response:  * `custom_attributes` &mdash; Return the user's custom attributes.  * `host_key` &mdash; Return the user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key).
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :param str license: The user's license. Filter the response by a specific license.
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_with_http_info(self, **kwargs):  # noqa: E501
        """List users  # noqa: E501

        Retrieve a list your account's users.     **Scopes:** `user:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: The user's status.  * `active` - The user exists on the account.  * `inactive` - The user has been deactivated.  * `pending` - The user exists on the account, but has not activated their account. See [Managing users](https://support.zoom.us/hc/en-us/articles/201363183) for details.  This value defaults to `active`.
        :param int page_size: The number of records returned within a single API call.
        :param str role_id: The role's unique ID. Use this parameter to filter the response by a specific role. You can use the [**List roles**](/api-reference/zoom-api/methods#operation/roles) API to get a role's unique ID value.
        :param str page_number: The page number of the current page in the returned records.
        :param str include_fields: Use this parameter to display one of the following attributes in the API call's response:  * `custom_attributes` &mdash; Return the user's custom attributes.  * `host_key` &mdash; Return the user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key).
        :param str next_page_token: Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
        :param str license: The user's license. Filter the response by a specific license.
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'page_size', 'role_id', 'page_number', 'include_fields', 'next_page_token', 'license']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'include_fields' in params:
            query_params.append(('include_fields', params['include_fields']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['openapi_authorization', 'openapi_oauth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
